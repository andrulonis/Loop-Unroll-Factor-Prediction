; ModuleID = 'ss_sort.c'
source_filename = "ss_sort.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [4 x i8] c"%d\09\00", align 1

; Function Attrs: nofree noinline nounwind uwtable
define dso_local void @print(i32* nocapture readonly %a, i32 %size) local_unnamed_addr #0 !dbg !24 {
entry:
  call void @llvm.dbg.value(metadata i32* %a, metadata !28, metadata !DIExpression()), !dbg !31
  call void @llvm.dbg.value(metadata i32 %size, metadata !29, metadata !DIExpression()), !dbg !31
  call void @llvm.dbg.value(metadata i32 0, metadata !30, metadata !DIExpression()), !dbg !31
  %cmp4 = icmp sgt i32 %size, 0, !dbg !32
  br i1 %cmp4, label %for.body.preheader, label %for.end, !dbg !35

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %size to i64, !dbg !32
  br label %for.body, !dbg !35

for.body:                                         ; preds = %for.body, %for.body.preheader
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !30, metadata !DIExpression()), !dbg !31
  %arrayidx = getelementptr inbounds i32, i32* %a, i64 %indvars.iv, !dbg !36
  %0 = load i32, i32* %arrayidx, align 4, !dbg !36, !tbaa !37
  %call = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %0), !dbg !41
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !42
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !30, metadata !DIExpression()), !dbg !31
  %exitcond = icmp eq i64 %indvars.iv.next, %wide.trip.count, !dbg !32
  br i1 %exitcond, label %for.end, label %for.body, !dbg !35, !llvm.loop !43

for.end:                                          ; preds = %for.body, %entry
  ret void, !dbg !45
}

; Function Attrs: nofree nounwind
declare dso_local i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #1

; Function Attrs: nofree noinline norecurse nounwind uwtable
define dso_local void @local_scan(i32* nocapture %bucket) local_unnamed_addr #2 !dbg !46 {
entry:
  call void @llvm.dbg.value(metadata i32* %bucket, metadata !50, metadata !DIExpression()), !dbg !57
  call void @llvm.dbg.label(metadata !53), !dbg !58
  call void @llvm.dbg.value(metadata i32 0, metadata !51, metadata !DIExpression()), !dbg !57
  br label %for.cond1.preheader, !dbg !59

for.cond1.preheader:                              ; preds = %for.inc9, %entry
  %indvars.iv25 = phi i64 [ 0, %entry ], [ %indvars.iv.next26, %for.inc9 ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv25, metadata !51, metadata !DIExpression()), !dbg !57
  call void @llvm.dbg.value(metadata i32 1, metadata !52, metadata !DIExpression()), !dbg !57
  %0 = shl nuw nsw i64 %indvars.iv25, 4, !dbg !60
  %scevgep = getelementptr i32, i32* %bucket, i64 %0, !dbg !60
  %1 = shl nsw i64 %indvars.iv25, 4, !dbg !60
  %load_initial = load i32, i32* %scevgep, align 4
  br label %for.body3, !dbg !64

for.body3:                                        ; preds = %for.body3, %for.cond1.preheader
  %store_forwarded = phi i32 [ %load_initial, %for.cond1.preheader ], [ %add8, %for.body3 ]
  %indvars.iv = phi i64 [ 1, %for.cond1.preheader ], [ %indvars.iv.next, %for.body3 ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !52, metadata !DIExpression()), !dbg !57
  %2 = add nuw nsw i64 %indvars.iv, %1, !dbg !65
  %arrayidx7 = getelementptr inbounds i32, i32* %bucket, i64 %2, !dbg !66
  %3 = load i32, i32* %arrayidx7, align 4, !dbg !67, !tbaa !37
  %add8 = add nsw i32 %3, %store_forwarded, !dbg !67
  store i32 %add8, i32* %arrayidx7, align 4, !dbg !67, !tbaa !37
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !68
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !52, metadata !DIExpression()), !dbg !57
  %exitcond = icmp eq i64 %indvars.iv.next, 16, !dbg !69
  br i1 %exitcond, label %for.inc9, label %for.body3, !dbg !64, !llvm.loop !70

for.inc9:                                         ; preds = %for.body3
  %indvars.iv.next26 = add nuw nsw i64 %indvars.iv25, 1, !dbg !72
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next26, metadata !51, metadata !DIExpression()), !dbg !57
  %exitcond28 = icmp eq i64 %indvars.iv.next26, 128, !dbg !73
  br i1 %exitcond28, label %for.end11, label %for.cond1.preheader, !dbg !59, !llvm.loop !74

for.end11:                                        ; preds = %for.inc9
  ret void, !dbg !76
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #3

; Function Attrs: nofree noinline norecurse nounwind uwtable
define dso_local void @sum_scan(i32* nocapture %sum, i32* nocapture readonly %bucket) local_unnamed_addr #2 !dbg !77 {
entry:
  call void @llvm.dbg.value(metadata i32* %sum, metadata !81, metadata !DIExpression()), !dbg !85
  call void @llvm.dbg.value(metadata i32* %bucket, metadata !82, metadata !DIExpression()), !dbg !85
  store i32 0, i32* %sum, align 4, !dbg !86, !tbaa !37
  call void @llvm.dbg.label(metadata !84), !dbg !87
  call void @llvm.dbg.value(metadata i32 1, metadata !83, metadata !DIExpression()), !dbg !85
  br label %for.body, !dbg !88

for.body:                                         ; preds = %for.body, %entry
  %store_forwarded = phi i32 [ 0, %entry ], [ %add, %for.body ]
  %indvars.iv = phi i64 [ 1, %entry ], [ %indvars.iv.next, %for.body ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !83, metadata !DIExpression()), !dbg !85
  %0 = shl i64 %indvars.iv, 4, !dbg !90
  %1 = add nsw i64 %0, -1, !dbg !92
  %arrayidx4 = getelementptr inbounds i32, i32* %bucket, i64 %1, !dbg !93
  %2 = load i32, i32* %arrayidx4, align 4, !dbg !93, !tbaa !37
  %add = add nsw i32 %2, %store_forwarded, !dbg !94
  %arrayidx6 = getelementptr inbounds i32, i32* %sum, i64 %indvars.iv, !dbg !95
  store i32 %add, i32* %arrayidx6, align 4, !dbg !96, !tbaa !37
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !97
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !83, metadata !DIExpression()), !dbg !85
  %exitcond = icmp eq i64 %indvars.iv.next, 128, !dbg !98
  br i1 %exitcond, label %for.end, label %for.body, !dbg !88, !llvm.loop !99

for.end:                                          ; preds = %for.body
  ret void, !dbg !101
}

; Function Attrs: nofree noinline norecurse nounwind uwtable
define dso_local void @last_step_scan(i32* nocapture %bucket, i32* nocapture readonly %sum) local_unnamed_addr #2 !dbg !102 {
entry:
  call void @llvm.dbg.value(metadata i32* %bucket, metadata !104, metadata !DIExpression()), !dbg !112
  call void @llvm.dbg.value(metadata i32* %sum, metadata !105, metadata !DIExpression()), !dbg !112
  call void @llvm.dbg.label(metadata !108), !dbg !113
  call void @llvm.dbg.value(metadata i32 0, metadata !106, metadata !DIExpression()), !dbg !112
  br label %for.cond1.preheader, !dbg !114

for.cond1.preheader:                              ; preds = %for.inc11, %entry
  %indvars.iv27 = phi i64 [ 0, %entry ], [ %indvars.iv.next28, %for.inc11 ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv27, metadata !106, metadata !DIExpression()), !dbg !112
  call void @llvm.dbg.value(metadata i32 0, metadata !107, metadata !DIExpression()), !dbg !112
  %0 = shl i64 %indvars.iv27, 4, !dbg !115
  %arrayidx5 = getelementptr inbounds i32, i32* %sum, i64 %indvars.iv27, !dbg !115
  br label %for.body3, !dbg !119

for.body3:                                        ; preds = %for.body3, %for.cond1.preheader
  %indvars.iv = phi i64 [ 0, %for.cond1.preheader ], [ %indvars.iv.next, %for.body3 ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !107, metadata !DIExpression()), !dbg !112
  %1 = add nuw nsw i64 %indvars.iv, %0, !dbg !120
  %arrayidx = getelementptr inbounds i32, i32* %bucket, i64 %1, !dbg !121
  %2 = load i32, i32* %arrayidx, align 4, !dbg !121, !tbaa !37
  %3 = load i32, i32* %arrayidx5, align 4, !dbg !122, !tbaa !37
  %add6 = add nsw i32 %3, %2, !dbg !123
  store i32 %add6, i32* %arrayidx, align 4, !dbg !124, !tbaa !37
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !125
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !107, metadata !DIExpression()), !dbg !112
  %exitcond = icmp eq i64 %indvars.iv.next, 16, !dbg !126
  br i1 %exitcond, label %for.inc11, label %for.body3, !dbg !119, !llvm.loop !127

for.inc11:                                        ; preds = %for.body3
  %indvars.iv.next28 = add nuw nsw i64 %indvars.iv27, 1, !dbg !129
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next28, metadata !106, metadata !DIExpression()), !dbg !112
  %exitcond30 = icmp eq i64 %indvars.iv.next28, 128, !dbg !130
  br i1 %exitcond30, label %for.end13, label %for.cond1.preheader, !dbg !114, !llvm.loop !131

for.end13:                                        ; preds = %for.inc11
  ret void, !dbg !133
}

; Function Attrs: nofree noinline norecurse nounwind uwtable writeonly
define dso_local void @init(i32* nocapture %bucket) local_unnamed_addr #4 !dbg !134 {
entry:
  call void @llvm.dbg.value(metadata i32* %bucket, metadata !136, metadata !DIExpression()), !dbg !140
  call void @llvm.dbg.label(metadata !139), !dbg !141
  call void @llvm.dbg.value(metadata i32 0, metadata !137, metadata !DIExpression()), !dbg !140
  %bucket6 = bitcast i32* %bucket to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(8192) %bucket6, i8 0, i64 8192, i1 false), !dbg !142
  call void @llvm.dbg.value(metadata i32 undef, metadata !137, metadata !DIExpression()), !dbg !140
  ret void, !dbg !145
}

; Function Attrs: nofree noinline norecurse nounwind uwtable
define dso_local void @hist(i32* nocapture %bucket, i32* nocapture readonly %a, i32 %exp) local_unnamed_addr #2 !dbg !146 {
entry:
  call void @llvm.dbg.value(metadata i32* %bucket, metadata !150, metadata !DIExpression()), !dbg !160
  call void @llvm.dbg.value(metadata i32* %a, metadata !151, metadata !DIExpression()), !dbg !160
  call void @llvm.dbg.value(metadata i32 %exp, metadata !152, metadata !DIExpression()), !dbg !160
  call void @llvm.dbg.value(metadata i32 0, metadata !153, metadata !DIExpression()), !dbg !160
  call void @llvm.dbg.value(metadata i32 0, metadata !154, metadata !DIExpression()), !dbg !160
  call void @llvm.dbg.label(metadata !155), !dbg !161
  call void @llvm.dbg.value(metadata i32 0, metadata !153, metadata !DIExpression()), !dbg !160
  br label %for.cond1.preheader, !dbg !162

for.cond1.preheader:                              ; preds = %for.inc10, %entry
  %indvars.iv23 = phi i64 [ 0, %entry ], [ %indvars.iv.next24, %for.inc10 ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv23, metadata !153, metadata !DIExpression()), !dbg !160
  call void @llvm.dbg.value(metadata i32 0, metadata !154, metadata !DIExpression()), !dbg !160
  %0 = shl i64 %indvars.iv23, 2, !dbg !163
  %indvars.iv.next24 = add nuw nsw i64 %indvars.iv23, 1, !dbg !166
  br label %for.body3, !dbg !167

for.body3:                                        ; preds = %for.body3, %for.cond1.preheader
  %indvars.iv = phi i64 [ 0, %for.cond1.preheader ], [ %indvars.iv.next, %for.body3 ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !154, metadata !DIExpression()), !dbg !160
  %1 = add nuw nsw i64 %indvars.iv, %0, !dbg !168
  %arrayidx = getelementptr inbounds i32, i32* %a, i64 %1, !dbg !169
  %2 = load i32, i32* %arrayidx, align 4, !dbg !169, !tbaa !37
  %shr = ashr i32 %2, %exp, !dbg !170
  %and = shl i32 %shr, 9, !dbg !171
  %mul4 = and i32 %and, 1536, !dbg !171
  %3 = trunc i64 %indvars.iv.next24 to i32, !dbg !172
  %add6 = add i32 %mul4, %3, !dbg !172
  %idxprom7 = zext i32 %add6 to i64, !dbg !173
  %arrayidx8 = getelementptr inbounds i32, i32* %bucket, i64 %idxprom7, !dbg !173
  %4 = load i32, i32* %arrayidx8, align 4, !dbg !174, !tbaa !37
  %inc = add nsw i32 %4, 1, !dbg !174
  store i32 %inc, i32* %arrayidx8, align 4, !dbg !174, !tbaa !37
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !175
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !154, metadata !DIExpression()), !dbg !160
  %exitcond = icmp eq i64 %indvars.iv.next, 4, !dbg !176
  br i1 %exitcond, label %for.inc10, label %for.body3, !dbg !167, !llvm.loop !177

for.inc10:                                        ; preds = %for.body3
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next24, metadata !153, metadata !DIExpression()), !dbg !160
  %exitcond26 = icmp eq i64 %indvars.iv.next24, 512, !dbg !179
  br i1 %exitcond26, label %for.end12, label %for.cond1.preheader, !dbg !162, !llvm.loop !180

for.end12:                                        ; preds = %for.inc10
  ret void, !dbg !182
}

; Function Attrs: nofree noinline norecurse nounwind uwtable
define dso_local void @update(i32* nocapture %b, i32* nocapture %bucket, i32* nocapture readonly %a, i32 %exp) local_unnamed_addr #2 !dbg !183 {
entry:
  call void @llvm.dbg.value(metadata i32* %b, metadata !187, metadata !DIExpression()), !dbg !203
  call void @llvm.dbg.value(metadata i32* %bucket, metadata !188, metadata !DIExpression()), !dbg !203
  call void @llvm.dbg.value(metadata i32* %a, metadata !189, metadata !DIExpression()), !dbg !203
  call void @llvm.dbg.value(metadata i32 %exp, metadata !190, metadata !DIExpression()), !dbg !203
  call void @llvm.dbg.value(metadata i32 0, metadata !191, metadata !DIExpression()), !dbg !203
  call void @llvm.dbg.value(metadata i32 0, metadata !192, metadata !DIExpression()), !dbg !203
  call void @llvm.dbg.label(metadata !201), !dbg !204
  call void @llvm.dbg.value(metadata i32 0, metadata !191, metadata !DIExpression()), !dbg !203
  br label %for.cond1.preheader, !dbg !205

for.cond1.preheader:                              ; preds = %for.inc17, %entry
  %indvars.iv38 = phi i64 [ 0, %entry ], [ %indvars.iv.next39, %for.inc17 ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv38, metadata !191, metadata !DIExpression()), !dbg !203
  call void @llvm.dbg.value(metadata i32 0, metadata !192, metadata !DIExpression()), !dbg !203
  %0 = shl i64 %indvars.iv38, 2, !dbg !206
  br label %for.body3, !dbg !207

for.body3:                                        ; preds = %for.body3, %for.cond1.preheader
  %indvars.iv = phi i64 [ 0, %for.cond1.preheader ], [ %indvars.iv.next, %for.body3 ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !192, metadata !DIExpression()), !dbg !203
  %1 = add nuw nsw i64 %indvars.iv, %0, !dbg !208
  %arrayidx = getelementptr inbounds i32, i32* %a, i64 %1, !dbg !209
  %2 = load i32, i32* %arrayidx, align 4, !dbg !209, !tbaa !37
  call void @llvm.dbg.value(metadata i32 %2, metadata !193, metadata !DIExpression()), !dbg !206
  %shr = ashr i32 %2, %exp, !dbg !210
  %and = shl i32 %shr, 9, !dbg !211
  %mul4 = and i32 %and, 1536, !dbg !211
  %3 = trunc i64 %indvars.iv38 to i32, !dbg !212
  %add5 = add nuw nsw i32 %mul4, %3, !dbg !212
  %idxprom6 = zext i32 %add5 to i64, !dbg !213
  %arrayidx7 = getelementptr inbounds i32, i32* %bucket, i64 %idxprom6, !dbg !213
  %4 = load i32, i32* %arrayidx7, align 4, !dbg !213, !tbaa !37
  call void @llvm.dbg.value(metadata i32 %4, metadata !200, metadata !DIExpression()), !dbg !206
  %idxprom8 = sext i32 %4 to i64, !dbg !214
  %arrayidx9 = getelementptr inbounds i32, i32* %b, i64 %idxprom8, !dbg !214
  store i32 %2, i32* %arrayidx9, align 4, !dbg !215, !tbaa !37
  %add10 = add nsw i32 %4, 1, !dbg !216
  store i32 %add10, i32* %arrayidx7, align 4, !dbg !217, !tbaa !37
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !218
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !192, metadata !DIExpression()), !dbg !203
  %exitcond = icmp eq i64 %indvars.iv.next, 4, !dbg !219
  br i1 %exitcond, label %for.inc17, label %for.body3, !dbg !207, !llvm.loop !220

for.inc17:                                        ; preds = %for.body3
  %indvars.iv.next39 = add nuw nsw i64 %indvars.iv38, 1, !dbg !222
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next39, metadata !191, metadata !DIExpression()), !dbg !203
  %exitcond41 = icmp eq i64 %indvars.iv.next39, 512, !dbg !223
  br i1 %exitcond41, label %for.end19, label %for.cond1.preheader, !dbg !205, !llvm.loop !224

for.end19:                                        ; preds = %for.inc17
  ret void, !dbg !226
}

; Function Attrs: nofree noinline norecurse nounwind uwtable
define dso_local void @ss_sort(i32* nocapture %a, i32* nocapture %b, i32* nocapture %bucket, i32* nocapture %sum) local_unnamed_addr #2 !dbg !227 {
entry:
  call void @llvm.dbg.value(metadata i32* %a, metadata !231, metadata !DIExpression()), !dbg !239
  call void @llvm.dbg.value(metadata i32* %b, metadata !232, metadata !DIExpression()), !dbg !239
  call void @llvm.dbg.value(metadata i32* %bucket, metadata !233, metadata !DIExpression()), !dbg !239
  call void @llvm.dbg.value(metadata i32* %sum, metadata !234, metadata !DIExpression()), !dbg !239
  call void @llvm.dbg.value(metadata i32 0, metadata !237, metadata !DIExpression()), !dbg !239
  call void @llvm.dbg.value(metadata i32 0, metadata !236, metadata !DIExpression()), !dbg !239
  call void @init(i32* %bucket), !dbg !240
  call void @hist(i32* %bucket, i32* %a, i32 0), !dbg !244
  call void @local_scan(i32* %bucket), !dbg !246
  call void @sum_scan(i32* %sum, i32* %bucket), !dbg !247
  call void @last_step_scan(i32* %bucket, i32* %sum), !dbg !248
  call void @update(i32* %b, i32* %bucket, i32* %a, i32 0), !dbg !249
  call void @llvm.dbg.value(metadata i32 1, metadata !237, metadata !DIExpression()), !dbg !239
  call void @llvm.dbg.value(metadata i32 2, metadata !236, metadata !DIExpression()), !dbg !239
  ret void, !dbg !252
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #5 !dbg !253 {
entry:
  %call = call noalias dereferenceable_or_null(8192) i8* @malloc(i64 8192) #8, !dbg !263
  call void @llvm.dbg.value(metadata i32* %1, metadata !257, metadata !DIExpression()), !dbg !264
  %call1 = call noalias dereferenceable_or_null(8192) i8* @malloc(i64 8192) #8, !dbg !265
  call void @llvm.dbg.value(metadata i32* %2, metadata !258, metadata !DIExpression()), !dbg !264
  %call2 = call noalias dereferenceable_or_null(8192) i8* @malloc(i64 8192) #8, !dbg !266
  %0 = bitcast i8* %call2 to i32*, !dbg !267
  call void @llvm.dbg.value(metadata i32* %0, metadata !256, metadata !DIExpression()), !dbg !264
  %call3 = call noalias dereferenceable_or_null(512) i8* @malloc(i64 512) #8, !dbg !268
  call void @llvm.dbg.value(metadata i32* %3, metadata !259, metadata !DIExpression()), !dbg !264
  call void @srand(i32 8650341) #8, !dbg !269
  call void @llvm.dbg.value(metadata float 2.550000e+02, metadata !260, metadata !DIExpression()), !dbg !264
  call void @llvm.dbg.value(metadata float 0.000000e+00, metadata !262, metadata !DIExpression()), !dbg !264
  call void @llvm.dbg.value(metadata i32 0, metadata !255, metadata !DIExpression()), !dbg !264
  br label %for.body, !dbg !270

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !255, metadata !DIExpression()), !dbg !264
  %call4 = call i32 @rand() #8, !dbg !272
  %conv = sitofp i32 %call4 to double, !dbg !275
  %div = fdiv double %conv, 0x41DFFFFFFFC00000, !dbg !276
  %mul = fmul double %div, 2.550000e+02, !dbg !277
  %add = fadd double %mul, 0.000000e+00, !dbg !278
  %conv7 = fptosi double %add to i32, !dbg !279
  %arrayidx = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !280
  store i32 %conv7, i32* %arrayidx, align 4, !dbg !281, !tbaa !37
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !282
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !255, metadata !DIExpression()), !dbg !264
  %exitcond = icmp eq i64 %indvars.iv.next, 2048, !dbg !283
  br i1 %exitcond, label %for.end, label %for.body, !dbg !270, !llvm.loop !284

for.end:                                          ; preds = %for.body
  %1 = bitcast i8* %call to i32*, !dbg !286
  %2 = bitcast i8* %call1 to i32*, !dbg !287
  %3 = bitcast i8* %call3 to i32*, !dbg !288
  call void @ss_sort(i32* %0, i32* %2, i32* %1, i32* %3), !dbg !289
  call void @print(i32* %0, i32 1), !dbg !290
  ret i32 0, !dbg !291
}

; Function Attrs: nofree nounwind
declare dso_local noalias i8* @malloc(i64) local_unnamed_addr #1

; Function Attrs: nounwind
declare !dbg !11 dso_local void @srand(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare !dbg !17 dso_local i32 @rand() local_unnamed_addr #6

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #7

attributes #0 = { nofree noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable willreturn }
attributes #4 = { nofree noinline norecurse nounwind uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly nounwind willreturn }
attributes #8 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!20, !21, !22}
!llvm.ident = !{!23}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 10.0.1 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !8, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "ss_sort.c", directory: "/home/coco/work/benchmark_codes/ss_sort")
!2 = !{!3}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !1, line: 16, baseType: !4, size: 32, elements: !5)
!4 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!5 = !{!6, !7}
!6 = !DIEnumerator(name: "false", value: 0, isUnsigned: true)
!7 = !DIEnumerator(name: "true", value: 1, isUnsigned: true)
!8 = !{!9, !11, !10, !16, !17}
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64)
!10 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!11 = !DISubprogram(name: "srand", scope: !12, file: !12, line: 456, type: !13, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !15)
!12 = !DIFile(filename: "/usr/include/stdlib.h", directory: "")
!13 = !DISubroutineType(types: !14)
!14 = !{null, !4}
!15 = !{}
!16 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!17 = !DISubprogram(name: "rand", scope: !12, file: !12, line: 454, type: !18, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !15)
!18 = !DISubroutineType(types: !19)
!19 = !{!10}
!20 = !{i32 7, !"Dwarf Version", i32 4}
!21 = !{i32 2, !"Debug Info Version", i32 3}
!22 = !{i32 1, !"wchar_size", i32 4}
!23 = !{!"clang version 10.0.1 "}
!24 = distinct !DISubprogram(name: "print", scope: !1, file: !1, line: 7, type: !25, scopeLine: 8, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !27)
!25 = !DISubroutineType(types: !26)
!26 = !{null, !9, !10}
!27 = !{!28, !29, !30}
!28 = !DILocalVariable(name: "a", arg: 1, scope: !24, file: !1, line: 7, type: !9)
!29 = !DILocalVariable(name: "size", arg: 2, scope: !24, file: !1, line: 7, type: !10)
!30 = !DILocalVariable(name: "i", scope: !24, file: !1, line: 9, type: !10)
!31 = !DILocation(line: 0, scope: !24)
!32 = !DILocation(line: 11, column: 16, scope: !33)
!33 = distinct !DILexicalBlock(scope: !34, file: !1, line: 11, column: 2)
!34 = distinct !DILexicalBlock(scope: !24, file: !1, line: 11, column: 2)
!35 = !DILocation(line: 11, column: 2, scope: !34)
!36 = !DILocation(line: 12, column: 18, scope: !33)
!37 = !{!38, !38, i64 0}
!38 = !{!"int", !39, i64 0}
!39 = !{!"omnipotent char", !40, i64 0}
!40 = !{!"Simple C/C++ TBAA"}
!41 = !DILocation(line: 12, column: 3, scope: !33)
!42 = !DILocation(line: 11, column: 25, scope: !33)
!43 = distinct !{!43, !35, !44}
!44 = !DILocation(line: 12, column: 22, scope: !34)
!45 = !DILocation(line: 13, column: 1, scope: !24)
!46 = distinct !DISubprogram(name: "local_scan", scope: !1, file: !1, line: 17, type: !47, scopeLine: 18, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !49)
!47 = !DISubroutineType(types: !48)
!48 = !{null, !9}
!49 = !{!50, !51, !52, !53, !54}
!50 = !DILocalVariable(name: "bucket", arg: 1, scope: !46, file: !1, line: 17, type: !9)
!51 = !DILocalVariable(name: "radixID", scope: !46, file: !1, line: 19, type: !10)
!52 = !DILocalVariable(name: "i", scope: !46, file: !1, line: 19, type: !10)
!53 = !DILabel(scope: !46, name: "loop1_outer", file: !1, line: 21)
!54 = !DILabel(scope: !55, name: "loop1_inner", file: !1, line: 23)
!55 = distinct !DILexicalBlock(scope: !56, file: !1, line: 21, column: 15)
!56 = distinct !DILexicalBlock(scope: !46, file: !1, line: 21, column: 15)
!57 = !DILocation(line: 0, scope: !46)
!58 = !DILocation(line: 21, column: 3, scope: !46)
!59 = !DILocation(line: 21, column: 15, scope: !56)
!60 = !DILocation(line: 0, scope: !61)
!61 = distinct !DILexicalBlock(scope: !62, file: !1, line: 24, column: 5)
!62 = distinct !DILexicalBlock(scope: !63, file: !1, line: 23, column: 17)
!63 = distinct !DILexicalBlock(scope: !55, file: !1, line: 23, column: 17)
!64 = !DILocation(line: 23, column: 17, scope: !63)
!65 = !DILocation(line: 25, column: 71, scope: !61)
!66 = !DILocation(line: 25, column: 7, scope: !61)
!67 = !DILocation(line: 25, column: 40, scope: !61)
!68 = !DILocation(line: 23, column: 45, scope: !62)
!69 = !DILocation(line: 23, column: 31, scope: !62)
!70 = distinct !{!70, !64, !71}
!71 = !DILocation(line: 26, column: 5, scope: !63)
!72 = !DILocation(line: 21, column: 55, scope: !55)
!73 = !DILocation(line: 21, column: 41, scope: !55)
!74 = distinct !{!74, !59, !75}
!75 = !DILocation(line: 26, column: 5, scope: !56)
!76 = !DILocation(line: 27, column: 1, scope: !46)
!77 = distinct !DISubprogram(name: "sum_scan", scope: !1, file: !1, line: 29, type: !78, scopeLine: 30, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !80)
!78 = !DISubroutineType(types: !79)
!79 = !{null, !9, !9}
!80 = !{!81, !82, !83, !84}
!81 = !DILocalVariable(name: "sum", arg: 1, scope: !77, file: !1, line: 29, type: !9)
!82 = !DILocalVariable(name: "bucket", arg: 2, scope: !77, file: !1, line: 29, type: !9)
!83 = !DILocalVariable(name: "radixID", scope: !77, file: !1, line: 31, type: !10)
!84 = !DILabel(scope: !77, name: "loop2", file: !1, line: 34)
!85 = !DILocation(line: 0, scope: !77)
!86 = !DILocation(line: 32, column: 10, scope: !77)
!87 = !DILocation(line: 34, column: 3, scope: !77)
!88 = !DILocation(line: 34, column: 9, scope: !89)
!89 = distinct !DILexicalBlock(scope: !77, file: !1, line: 34, column: 9)
!90 = !DILocation(line: 35, column: 53, scope: !91)
!91 = distinct !DILexicalBlock(scope: !89, file: !1, line: 34, column: 9)
!92 = !DILocation(line: 35, column: 66, scope: !91)
!93 = !DILocation(line: 35, column: 38, scope: !91)
!94 = !DILocation(line: 35, column: 36, scope: !91)
!95 = !DILocation(line: 35, column: 5, scope: !91)
!96 = !DILocation(line: 35, column: 18, scope: !91)
!97 = !DILocation(line: 34, column: 49, scope: !91)
!98 = !DILocation(line: 34, column: 35, scope: !91)
!99 = distinct !{!99, !88, !100}
!100 = !DILocation(line: 35, column: 69, scope: !89)
!101 = !DILocation(line: 36, column: 1, scope: !77)
!102 = distinct !DISubprogram(name: "last_step_scan", scope: !1, file: !1, line: 38, type: !78, scopeLine: 39, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !103)
!103 = !{!104, !105, !106, !107, !108, !109}
!104 = !DILocalVariable(name: "bucket", arg: 1, scope: !102, file: !1, line: 38, type: !9)
!105 = !DILocalVariable(name: "sum", arg: 2, scope: !102, file: !1, line: 38, type: !9)
!106 = !DILocalVariable(name: "radixID", scope: !102, file: !1, line: 40, type: !10)
!107 = !DILocalVariable(name: "i", scope: !102, file: !1, line: 40, type: !10)
!108 = !DILabel(scope: !102, name: "loop3_outer", file: !1, line: 42)
!109 = !DILabel(scope: !110, name: "loop3_inner", file: !1, line: 44)
!110 = distinct !DILexicalBlock(scope: !111, file: !1, line: 42, column: 15)
!111 = distinct !DILexicalBlock(scope: !102, file: !1, line: 42, column: 15)
!112 = !DILocation(line: 0, scope: !102)
!113 = !DILocation(line: 42, column: 3, scope: !102)
!114 = !DILocation(line: 42, column: 15, scope: !111)
!115 = !DILocation(line: 0, scope: !116)
!116 = distinct !DILexicalBlock(scope: !117, file: !1, line: 45, column: 5)
!117 = distinct !DILexicalBlock(scope: !118, file: !1, line: 44, column: 17)
!118 = distinct !DILexicalBlock(scope: !110, file: !1, line: 44, column: 17)
!119 = !DILocation(line: 44, column: 17, scope: !118)
!120 = !DILocation(line: 47, column: 37, scope: !116)
!121 = !DILocation(line: 47, column: 9, scope: !116)
!122 = !DILocation(line: 47, column: 45, scope: !116)
!123 = !DILocation(line: 47, column: 43, scope: !116)
!124 = !DILocation(line: 46, column: 40, scope: !116)
!125 = !DILocation(line: 44, column: 45, scope: !117)
!126 = !DILocation(line: 44, column: 31, scope: !117)
!127 = distinct !{!127, !119, !128}
!128 = !DILocation(line: 48, column: 5, scope: !118)
!129 = !DILocation(line: 42, column: 55, scope: !110)
!130 = !DILocation(line: 42, column: 41, scope: !110)
!131 = distinct !{!131, !114, !132}
!132 = !DILocation(line: 48, column: 5, scope: !111)
!133 = !DILocation(line: 50, column: 1, scope: !102)
!134 = distinct !DISubprogram(name: "init", scope: !1, file: !1, line: 52, type: !47, scopeLine: 53, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !135)
!135 = !{!136, !137, !138, !139}
!136 = !DILocalVariable(name: "bucket", arg: 1, scope: !134, file: !1, line: 52, type: !9)
!137 = !DILocalVariable(name: "radixID", scope: !134, file: !1, line: 54, type: !10)
!138 = !DILocalVariable(name: "i", scope: !134, file: !1, line: 54, type: !10)
!139 = !DILabel(scope: !134, name: "loop1_outer", file: !1, line: 56)
!140 = !DILocation(line: 0, scope: !134)
!141 = !DILocation(line: 56, column: 3, scope: !134)
!142 = !DILocation(line: 57, column: 23, scope: !143)
!143 = distinct !DILexicalBlock(scope: !144, file: !1, line: 56, column: 15)
!144 = distinct !DILexicalBlock(scope: !134, file: !1, line: 56, column: 15)
!145 = !DILocation(line: 58, column: 1, scope: !134)
!146 = distinct !DISubprogram(name: "hist", scope: !1, file: !1, line: 61, type: !147, scopeLine: 62, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !149)
!147 = !DISubroutineType(types: !148)
!148 = !{null, !9, !9, !10}
!149 = !{!150, !151, !152, !153, !154, !155, !156}
!150 = !DILocalVariable(name: "bucket", arg: 1, scope: !146, file: !1, line: 61, type: !9)
!151 = !DILocalVariable(name: "a", arg: 2, scope: !146, file: !1, line: 61, type: !9)
!152 = !DILocalVariable(name: "exp", arg: 3, scope: !146, file: !1, line: 61, type: !10)
!153 = !DILocalVariable(name: "blockID", scope: !146, file: !1, line: 63, type: !10)
!154 = !DILocalVariable(name: "maskID", scope: !146, file: !1, line: 63, type: !10)
!155 = !DILabel(scope: !146, name: "loop2", file: !1, line: 65)
!156 = !DILabel(scope: !157, name: "loop1", file: !1, line: 67)
!157 = distinct !DILexicalBlock(scope: !158, file: !1, line: 66, column: 3)
!158 = distinct !DILexicalBlock(scope: !159, file: !1, line: 65, column: 9)
!159 = distinct !DILexicalBlock(scope: !146, file: !1, line: 65, column: 9)
!160 = !DILocation(line: 0, scope: !146)
!161 = !DILocation(line: 65, column: 3, scope: !146)
!162 = !DILocation(line: 65, column: 9, scope: !159)
!163 = !DILocation(line: 0, scope: !164)
!164 = distinct !DILexicalBlock(scope: !165, file: !1, line: 67, column: 12)
!165 = distinct !DILexicalBlock(scope: !157, file: !1, line: 67, column: 12)
!166 = !DILocation(line: 65, column: 57, scope: !158)
!167 = !DILocation(line: 67, column: 12, scope: !165)
!168 = !DILocation(line: 68, column: 45, scope: !164)
!169 = !DILocation(line: 68, column: 16, scope: !164)
!170 = !DILocation(line: 68, column: 55, scope: !164)
!171 = !DILocation(line: 68, column: 71, scope: !164)
!172 = !DILocation(line: 68, column: 95, scope: !164)
!173 = !DILocation(line: 68, column: 7, scope: !164)
!174 = !DILocation(line: 68, column: 99, scope: !164)
!175 = !DILocation(line: 67, column: 48, scope: !164)
!176 = !DILocation(line: 67, column: 37, scope: !164)
!177 = distinct !{!177, !167, !178}
!178 = !DILocation(line: 68, column: 99, scope: !165)
!179 = !DILocation(line: 65, column: 35, scope: !158)
!180 = distinct !{!180, !162, !181}
!181 = !DILocation(line: 69, column: 3, scope: !159)
!182 = !DILocation(line: 70, column: 1, scope: !146)
!183 = distinct !DISubprogram(name: "update", scope: !1, file: !1, line: 75, type: !184, scopeLine: 76, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !186)
!184 = !DISubroutineType(types: !185)
!185 = !{null, !9, !9, !9, !10}
!186 = !{!187, !188, !189, !190, !191, !192, !193, !200, !201, !202}
!187 = !DILocalVariable(name: "b", arg: 1, scope: !183, file: !1, line: 75, type: !9)
!188 = !DILocalVariable(name: "bucket", arg: 2, scope: !183, file: !1, line: 75, type: !9)
!189 = !DILocalVariable(name: "a", arg: 3, scope: !183, file: !1, line: 75, type: !9)
!190 = !DILocalVariable(name: "exp", arg: 4, scope: !183, file: !1, line: 75, type: !10)
!191 = !DILocalVariable(name: "blockID", scope: !183, file: !1, line: 77, type: !10)
!192 = !DILocalVariable(name: "maskID", scope: !183, file: !1, line: 77, type: !10)
!193 = !DILocalVariable(name: "a_value", scope: !194, file: !1, line: 82, type: !10)
!194 = distinct !DILexicalBlock(scope: !195, file: !1, line: 81, column: 51)
!195 = distinct !DILexicalBlock(scope: !196, file: !1, line: 81, column: 12)
!196 = distinct !DILexicalBlock(scope: !197, file: !1, line: 81, column: 12)
!197 = distinct !DILexicalBlock(scope: !198, file: !1, line: 80, column: 3)
!198 = distinct !DILexicalBlock(scope: !199, file: !1, line: 79, column: 9)
!199 = distinct !DILexicalBlock(scope: !183, file: !1, line: 79, column: 9)
!200 = !DILocalVariable(name: "bucket_value", scope: !194, file: !1, line: 83, type: !10)
!201 = !DILabel(scope: !183, name: "loop3", file: !1, line: 79)
!202 = !DILabel(scope: !197, name: "loop1", file: !1, line: 81)
!203 = !DILocation(line: 0, scope: !183)
!204 = !DILocation(line: 79, column: 3, scope: !183)
!205 = !DILocation(line: 79, column: 9, scope: !199)
!206 = !DILocation(line: 0, scope: !194)
!207 = !DILocation(line: 81, column: 12, scope: !196)
!208 = !DILocation(line: 82, column: 51, scope: !194)
!209 = !DILocation(line: 82, column: 22, scope: !194)
!210 = !DILocation(line: 83, column: 43, scope: !194)
!211 = !DILocation(line: 83, column: 59, scope: !194)
!212 = !DILocation(line: 83, column: 73, scope: !194)
!213 = !DILocation(line: 83, column: 26, scope: !194)
!214 = !DILocation(line: 84, column: 7, scope: !194)
!215 = !DILocation(line: 84, column: 23, scope: !194)
!216 = !DILocation(line: 85, column: 80, scope: !194)
!217 = !DILocation(line: 85, column: 65, scope: !194)
!218 = !DILocation(line: 81, column: 47, scope: !195)
!219 = !DILocation(line: 81, column: 36, scope: !195)
!220 = distinct !{!220, !207, !221}
!221 = !DILocation(line: 86, column: 5, scope: !196)
!222 = !DILocation(line: 79, column: 57, scope: !198)
!223 = !DILocation(line: 79, column: 35, scope: !198)
!224 = distinct !{!224, !205, !225}
!225 = !DILocation(line: 87, column: 3, scope: !199)
!226 = !DILocation(line: 88, column: 1, scope: !183)
!227 = distinct !DISubprogram(name: "ss_sort", scope: !1, file: !1, line: 90, type: !228, scopeLine: 90, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !230)
!228 = !DISubroutineType(types: !229)
!229 = !{null, !9, !9, !9, !9}
!230 = !{!231, !232, !233, !234, !235, !236, !237}
!231 = !DILocalVariable(name: "a", arg: 1, scope: !227, file: !1, line: 90, type: !9)
!232 = !DILocalVariable(name: "b", arg: 2, scope: !227, file: !1, line: 90, type: !9)
!233 = !DILocalVariable(name: "bucket", arg: 3, scope: !227, file: !1, line: 90, type: !9)
!234 = !DILocalVariable(name: "sum", arg: 4, scope: !227, file: !1, line: 90, type: !9)
!235 = !DILocalVariable(name: "i", scope: !227, file: !1, line: 91, type: !10)
!236 = !DILocalVariable(name: "exp", scope: !227, file: !1, line: 91, type: !10)
!237 = !DILocalVariable(name: "flag", scope: !227, file: !1, line: 92, type: !238)
!238 = !DIDerivedType(tag: DW_TAG_typedef, name: "bool", file: !1, line: 16, baseType: !3)
!239 = !DILocation(line: 0, scope: !227)
!240 = !DILocation(line: 103, column: 5, scope: !241)
!241 = distinct !DILexicalBlock(scope: !242, file: !1, line: 97, column: 32)
!242 = distinct !DILexicalBlock(scope: !243, file: !1, line: 97, column: 2)
!243 = distinct !DILexicalBlock(scope: !227, file: !1, line: 97, column: 2)
!244 = !DILocation(line: 105, column: 7, scope: !245)
!245 = distinct !DILexicalBlock(scope: !241, file: !1, line: 104, column: 9)
!246 = !DILocation(line: 111, column: 5, scope: !241)
!247 = !DILocation(line: 112, column: 5, scope: !241)
!248 = !DILocation(line: 113, column: 5, scope: !241)
!249 = !DILocation(line: 118, column: 7, scope: !250)
!250 = distinct !DILexicalBlock(scope: !251, file: !1, line: 117, column: 5)
!251 = distinct !DILexicalBlock(scope: !241, file: !1, line: 116, column: 9)
!252 = !DILocation(line: 131, column: 1, scope: !227)
!253 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 133, type: !18, scopeLine: 134, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !254)
!254 = !{!255, !256, !257, !258, !259, !260, !262}
!255 = !DILocalVariable(name: "i", scope: !253, file: !1, line: 135, type: !10)
!256 = !DILocalVariable(name: "arr", scope: !253, file: !1, line: 136, type: !9)
!257 = !DILocalVariable(name: "bucket", scope: !253, file: !1, line: 137, type: !9)
!258 = !DILocalVariable(name: "b", scope: !253, file: !1, line: 139, type: !9)
!259 = !DILocalVariable(name: "sum", scope: !253, file: !1, line: 140, type: !9)
!260 = !DILocalVariable(name: "max", scope: !253, file: !1, line: 144, type: !261)
!261 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!262 = !DILocalVariable(name: "min", scope: !253, file: !1, line: 144, type: !261)
!263 = !DILocation(line: 138, column: 19, scope: !253)
!264 = !DILocation(line: 0, scope: !253)
!265 = !DILocation(line: 141, column: 14, scope: !253)
!266 = !DILocation(line: 142, column: 15, scope: !253)
!267 = !DILocation(line: 142, column: 9, scope: !253)
!268 = !DILocation(line: 143, column: 15, scope: !253)
!269 = !DILocation(line: 145, column: 2, scope: !253)
!270 = !DILocation(line: 149, column: 9, scope: !271)
!271 = distinct !DILexicalBlock(scope: !253, file: !1, line: 149, column: 9)
!272 = !DILocation(line: 150, column: 43, scope: !273)
!273 = distinct !DILexicalBlock(scope: !274, file: !1, line: 149, column: 27)
!274 = distinct !DILexicalBlock(scope: !271, file: !1, line: 149, column: 9)
!275 = !DILocation(line: 150, column: 34, scope: !273)
!276 = !DILocation(line: 150, column: 50, scope: !273)
!277 = !DILocation(line: 150, column: 64, scope: !273)
!278 = !DILocation(line: 150, column: 76, scope: !273)
!279 = !DILocation(line: 150, column: 26, scope: !273)
!280 = !DILocation(line: 150, column: 17, scope: !273)
!281 = !DILocation(line: 150, column: 24, scope: !273)
!282 = !DILocation(line: 149, column: 24, scope: !274)
!283 = !DILocation(line: 149, column: 19, scope: !274)
!284 = distinct !{!284, !270, !285}
!285 = !DILocation(line: 152, column: 9, scope: !271)
!286 = !DILocation(line: 138, column: 12, scope: !253)
!287 = !DILocation(line: 141, column: 7, scope: !253)
!288 = !DILocation(line: 143, column: 9, scope: !253)
!289 = !DILocation(line: 159, column: 2, scope: !253)
!290 = !DILocation(line: 165, column: 2, scope: !253)
!291 = !DILocation(line: 168, column: 2, scope: !253)
