; ModuleID = 'stencil.c'
source_filename = "stencil.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [16 x i8] c"%d, %d, %d,%d\0A \00", align 1
@str = private unnamed_addr constant [10 x i8] c"Success!!\00", align 1

; Function Attrs: nofree noinline norecurse nounwind uwtable
define dso_local void @stencil(i32* nocapture readonly %orig, i32* nocapture %sol, i32* nocapture readonly %filter) local_unnamed_addr #0 !dbg !18 {
entry:
  call void @llvm.dbg.value(metadata i32* %orig, metadata !24, metadata !DIExpression()), !dbg !44
  call void @llvm.dbg.value(metadata i32* %sol, metadata !25, metadata !DIExpression()), !dbg !44
  call void @llvm.dbg.value(metadata i32* %filter, metadata !26, metadata !DIExpression()), !dbg !44
  call void @llvm.dbg.label(metadata !39), !dbg !45
  call void @llvm.dbg.value(metadata i32 0, metadata !27, metadata !DIExpression()), !dbg !44
  %arrayidx10 = getelementptr inbounds i32, i32* %filter, i64 1, !dbg !46
  %arrayidx18 = getelementptr inbounds i32, i32* %filter, i64 2, !dbg !46
  %arrayidx27 = getelementptr inbounds i32, i32* %filter, i64 3, !dbg !46
  %arrayidx35 = getelementptr inbounds i32, i32* %filter, i64 4, !dbg !46
  %arrayidx43 = getelementptr inbounds i32, i32* %filter, i64 5, !dbg !46
  %arrayidx52 = getelementptr inbounds i32, i32* %filter, i64 6, !dbg !46
  %arrayidx60 = getelementptr inbounds i32, i32* %filter, i64 7, !dbg !46
  %arrayidx68 = getelementptr inbounds i32, i32* %filter, i64 8, !dbg !46
  br label %for.cond1.preheader, !dbg !50

for.cond1.preheader:                              ; preds = %for.inc78, %entry
  %indvars.iv178 = phi i64 [ 0, %entry ], [ %indvars.iv.next179, %for.inc78 ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv178, metadata !27, metadata !DIExpression()), !dbg !44
  call void @llvm.dbg.value(metadata i32 0, metadata !28, metadata !DIExpression()), !dbg !44
  %0 = shl nsw i64 %indvars.iv178, 5, !dbg !46
  br label %for.body3, !dbg !51

for.body3:                                        ; preds = %for.body3, %for.cond1.preheader
  %indvars.iv = phi i64 [ 0, %for.cond1.preheader ], [ %indvars.iv.next, %for.body3 ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !28, metadata !DIExpression()), !dbg !44
  call void @llvm.dbg.value(metadata i32 0, metadata !35, metadata !DIExpression()), !dbg !44
  call void @llvm.dbg.value(metadata i32 0, metadata !36, metadata !DIExpression()), !dbg !44
  call void @llvm.dbg.value(metadata i32 0, metadata !34, metadata !DIExpression()), !dbg !44
  call void @llvm.dbg.value(metadata i32 0, metadata !33, metadata !DIExpression()), !dbg !44
  call void @llvm.dbg.value(metadata i64 %0, metadata !36, metadata !DIExpression()), !dbg !44
  %1 = add nuw nsw i64 %indvars.iv, %0, !dbg !52
  call void @llvm.dbg.value(metadata i64 %1, metadata !31, metadata !DIExpression()), !dbg !44
  call void @llvm.dbg.value(metadata i64 %1, metadata !32, metadata !DIExpression()), !dbg !44
  %2 = load i32, i32* %filter, align 4, !dbg !53, !tbaa !54
  %arrayidx5 = getelementptr inbounds i32, i32* %orig, i64 %1, !dbg !58
  %3 = load i32, i32* %arrayidx5, align 4, !dbg !58, !tbaa !54
  %mul6 = mul nsw i32 %3, %2, !dbg !59
  call void @llvm.dbg.value(metadata i32 %mul6, metadata !35, metadata !DIExpression()), !dbg !44
  call void @llvm.dbg.value(metadata i32 %mul6, metadata !34, metadata !DIExpression()), !dbg !44
  %4 = add nuw nsw i64 %1, 1, !dbg !60
  call void @llvm.dbg.value(metadata i64 %4, metadata !31, metadata !DIExpression()), !dbg !44
  call void @llvm.dbg.value(metadata i32 1, metadata !33, metadata !DIExpression()), !dbg !44
  %5 = load i32, i32* %arrayidx10, align 4, !dbg !61, !tbaa !54
  %arrayidx12 = getelementptr inbounds i32, i32* %orig, i64 %4, !dbg !62
  %6 = load i32, i32* %arrayidx12, align 4, !dbg !62, !tbaa !54
  %mul13 = mul nsw i32 %6, %5, !dbg !63
  call void @llvm.dbg.value(metadata i32 %mul13, metadata !35, metadata !DIExpression()), !dbg !44
  %add14 = add nsw i32 %mul13, %mul6, !dbg !64
  call void @llvm.dbg.value(metadata i32 %add14, metadata !34, metadata !DIExpression()), !dbg !44
  %7 = add nuw nsw i64 %1, 2, !dbg !65
  call void @llvm.dbg.value(metadata i64 %7, metadata !31, metadata !DIExpression()), !dbg !44
  call void @llvm.dbg.value(metadata i32 2, metadata !33, metadata !DIExpression()), !dbg !44
  %8 = load i32, i32* %arrayidx18, align 4, !dbg !66, !tbaa !54
  %arrayidx20 = getelementptr inbounds i32, i32* %orig, i64 %7, !dbg !67
  %9 = load i32, i32* %arrayidx20, align 4, !dbg !67, !tbaa !54
  %mul21 = mul nsw i32 %9, %8, !dbg !68
  call void @llvm.dbg.value(metadata i32 %mul21, metadata !35, metadata !DIExpression()), !dbg !44
  %add22 = add nsw i32 %add14, %mul21, !dbg !69
  call void @llvm.dbg.value(metadata i32 %add22, metadata !34, metadata !DIExpression()), !dbg !44
  call void @llvm.dbg.value(metadata i64 %1, metadata !31, metadata !DIExpression(DW_OP_plus_uconst, 3, DW_OP_stack_value)), !dbg !44
  call void @llvm.dbg.value(metadata i32 3, metadata !33, metadata !DIExpression()), !dbg !44
  %10 = add nuw nsw i64 %1, 32, !dbg !70
  call void @llvm.dbg.value(metadata i64 %10, metadata !31, metadata !DIExpression()), !dbg !44
  %11 = load i32, i32* %arrayidx27, align 4, !dbg !71, !tbaa !54
  %arrayidx29 = getelementptr inbounds i32, i32* %orig, i64 %10, !dbg !72
  %12 = load i32, i32* %arrayidx29, align 4, !dbg !72, !tbaa !54
  %mul30 = mul nsw i32 %12, %11, !dbg !73
  call void @llvm.dbg.value(metadata i32 %mul30, metadata !35, metadata !DIExpression()), !dbg !44
  %add31 = add nsw i32 %add22, %mul30, !dbg !74
  call void @llvm.dbg.value(metadata i32 %add31, metadata !34, metadata !DIExpression()), !dbg !44
  %13 = add nuw nsw i64 %1, 33, !dbg !75
  call void @llvm.dbg.value(metadata i64 %13, metadata !31, metadata !DIExpression()), !dbg !44
  call void @llvm.dbg.value(metadata i32 4, metadata !33, metadata !DIExpression()), !dbg !44
  %14 = load i32, i32* %arrayidx35, align 4, !dbg !76, !tbaa !54
  %arrayidx37 = getelementptr inbounds i32, i32* %orig, i64 %13, !dbg !77
  %15 = load i32, i32* %arrayidx37, align 4, !dbg !77, !tbaa !54
  %mul38 = mul nsw i32 %15, %14, !dbg !78
  call void @llvm.dbg.value(metadata i32 %mul38, metadata !35, metadata !DIExpression()), !dbg !44
  %add39 = add nsw i32 %add31, %mul38, !dbg !79
  call void @llvm.dbg.value(metadata i32 %add39, metadata !34, metadata !DIExpression()), !dbg !44
  %16 = add nuw nsw i64 %1, 34, !dbg !80
  call void @llvm.dbg.value(metadata i64 %16, metadata !31, metadata !DIExpression()), !dbg !44
  call void @llvm.dbg.value(metadata i32 5, metadata !33, metadata !DIExpression()), !dbg !44
  %17 = load i32, i32* %arrayidx43, align 4, !dbg !81, !tbaa !54
  %arrayidx45 = getelementptr inbounds i32, i32* %orig, i64 %16, !dbg !82
  %18 = load i32, i32* %arrayidx45, align 4, !dbg !82, !tbaa !54
  %mul46 = mul nsw i32 %18, %17, !dbg !83
  call void @llvm.dbg.value(metadata i32 %mul46, metadata !35, metadata !DIExpression()), !dbg !44
  %add47 = add nsw i32 %add39, %mul46, !dbg !84
  call void @llvm.dbg.value(metadata i32 %add47, metadata !34, metadata !DIExpression()), !dbg !44
  call void @llvm.dbg.value(metadata i64 %1, metadata !31, metadata !DIExpression(DW_OP_plus_uconst, 35, DW_OP_stack_value)), !dbg !44
  call void @llvm.dbg.value(metadata i32 6, metadata !33, metadata !DIExpression()), !dbg !44
  %19 = add nuw nsw i64 %1, 64, !dbg !85
  call void @llvm.dbg.value(metadata i64 %19, metadata !31, metadata !DIExpression()), !dbg !44
  %20 = load i32, i32* %arrayidx52, align 4, !dbg !86, !tbaa !54
  %arrayidx54 = getelementptr inbounds i32, i32* %orig, i64 %19, !dbg !87
  %21 = load i32, i32* %arrayidx54, align 4, !dbg !87, !tbaa !54
  %mul55 = mul nsw i32 %21, %20, !dbg !88
  call void @llvm.dbg.value(metadata i32 %mul55, metadata !35, metadata !DIExpression()), !dbg !44
  %add56 = add nsw i32 %add47, %mul55, !dbg !89
  call void @llvm.dbg.value(metadata i32 %add56, metadata !34, metadata !DIExpression()), !dbg !44
  %22 = add nuw nsw i64 %1, 65, !dbg !90
  call void @llvm.dbg.value(metadata i64 %22, metadata !31, metadata !DIExpression()), !dbg !44
  call void @llvm.dbg.value(metadata i32 7, metadata !33, metadata !DIExpression()), !dbg !44
  %23 = load i32, i32* %arrayidx60, align 4, !dbg !91, !tbaa !54
  %arrayidx62 = getelementptr inbounds i32, i32* %orig, i64 %22, !dbg !92
  %24 = load i32, i32* %arrayidx62, align 4, !dbg !92, !tbaa !54
  %mul63 = mul nsw i32 %24, %23, !dbg !93
  call void @llvm.dbg.value(metadata i32 %mul63, metadata !35, metadata !DIExpression()), !dbg !44
  %add64 = add nsw i32 %add56, %mul63, !dbg !94
  call void @llvm.dbg.value(metadata i32 %add64, metadata !34, metadata !DIExpression()), !dbg !44
  %25 = add nuw nsw i64 %1, 66, !dbg !95
  call void @llvm.dbg.value(metadata i64 %25, metadata !31, metadata !DIExpression()), !dbg !44
  call void @llvm.dbg.value(metadata i32 8, metadata !33, metadata !DIExpression()), !dbg !44
  %26 = load i32, i32* %arrayidx68, align 4, !dbg !96, !tbaa !54
  %arrayidx70 = getelementptr inbounds i32, i32* %orig, i64 %25, !dbg !97
  %27 = load i32, i32* %arrayidx70, align 4, !dbg !97, !tbaa !54
  %mul71 = mul nsw i32 %27, %26, !dbg !98
  call void @llvm.dbg.value(metadata i32 %mul71, metadata !35, metadata !DIExpression()), !dbg !44
  %add72 = add nsw i32 %add64, %mul71, !dbg !99
  call void @llvm.dbg.value(metadata i32 %add72, metadata !34, metadata !DIExpression()), !dbg !44
  call void @llvm.dbg.value(metadata i64 %25, metadata !31, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !44
  call void @llvm.dbg.value(metadata i32 8, metadata !33, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !44
  %arrayidx76 = getelementptr inbounds i32, i32* %sol, i64 %1, !dbg !100
  store i32 %add72, i32* %arrayidx76, align 4, !dbg !101, !tbaa !54
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !102
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !28, metadata !DIExpression()), !dbg !44
  %exitcond = icmp eq i64 %indvars.iv.next, 30, !dbg !103
  br i1 %exitcond, label %for.inc78, label %for.body3, !dbg !51, !llvm.loop !104

for.inc78:                                        ; preds = %for.body3
  %indvars.iv.next179 = add nuw nsw i64 %indvars.iv178, 1, !dbg !106
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next179, metadata !27, metadata !DIExpression()), !dbg !44
  %exitcond181 = icmp eq i64 %indvars.iv.next179, 30, !dbg !107
  br i1 %exitcond181, label %for.end80, label %for.cond1.preheader, !dbg !50, !llvm.loop !108

for.end80:                                        ; preds = %for.inc78
  ret void, !dbg !110
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #2 !dbg !111 {
entry:
  call void @srand(i32 8650341) #6, !dbg !121
  call void @llvm.dbg.value(metadata i32 2147483646, metadata !119, metadata !DIExpression()), !dbg !122
  call void @llvm.dbg.value(metadata i32 0, metadata !120, metadata !DIExpression()), !dbg !122
  %call = call noalias dereferenceable_or_null(4096) i8* @malloc(i64 4096) #6, !dbg !123
  %0 = bitcast i8* %call to i32*, !dbg !124
  call void @llvm.dbg.value(metadata i32* %0, metadata !113, metadata !DIExpression()), !dbg !122
  %call1 = call noalias dereferenceable_or_null(4096) i8* @malloc(i64 4096) #6, !dbg !125
  %1 = bitcast i8* %call1 to i32*, !dbg !126
  call void @llvm.dbg.value(metadata i32* %1, metadata !114, metadata !DIExpression()), !dbg !122
  %call2 = call noalias dereferenceable_or_null(36) i8* @malloc(i64 36) #6, !dbg !127
  call void @llvm.dbg.value(metadata i32* %4, metadata !115, metadata !DIExpression()), !dbg !122
  call void @llvm.dbg.value(metadata i32 0, metadata !116, metadata !DIExpression()), !dbg !122
  br label %for.cond3.preheader, !dbg !128

for.cond3.preheader:                              ; preds = %for.inc17, %entry
  %indvars.iv136 = phi i64 [ 0, %entry ], [ %indvars.iv.next137, %for.inc17 ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv136, metadata !116, metadata !DIExpression()), !dbg !122
  call void @llvm.dbg.value(metadata i32 0, metadata !117, metadata !DIExpression()), !dbg !122
  %2 = shl i64 %indvars.iv136, 5, !dbg !130
  br label %for.body5, !dbg !136

for.body5:                                        ; preds = %for.body5, %for.cond3.preheader
  %indvars.iv132 = phi i64 [ 0, %for.cond3.preheader ], [ %indvars.iv.next133, %for.body5 ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv132, metadata !117, metadata !DIExpression()), !dbg !122
  %call6 = call i32 @rand() #6, !dbg !137
  %conv = sitofp i32 %call6 to double, !dbg !137
  %mul8 = fmul double %conv, 0x41DFFFFFFF800000, !dbg !138
  %div = fdiv double %mul8, 0x41DFFFFFFFC00000, !dbg !139
  %add = fadd double %div, 0.000000e+00, !dbg !140
  %conv10 = fptosi double %add to i32, !dbg !141
  %3 = add nuw nsw i64 %indvars.iv132, %2, !dbg !142
  %arrayidx = getelementptr inbounds i32, i32* %0, i64 %3, !dbg !143
  store i32 %conv10, i32* %arrayidx, align 4, !dbg !144, !tbaa !54
  %arrayidx16 = getelementptr inbounds i32, i32* %1, i64 %3, !dbg !145
  store i32 0, i32* %arrayidx16, align 4, !dbg !146, !tbaa !54
  %indvars.iv.next133 = add nuw nsw i64 %indvars.iv132, 1, !dbg !147
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next133, metadata !117, metadata !DIExpression()), !dbg !122
  %exitcond135 = icmp eq i64 %indvars.iv.next133, 32, !dbg !148
  br i1 %exitcond135, label %for.inc17, label %for.body5, !dbg !136, !llvm.loop !149

for.inc17:                                        ; preds = %for.body5
  %indvars.iv.next137 = add nuw nsw i64 %indvars.iv136, 1, !dbg !151
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next137, metadata !116, metadata !DIExpression()), !dbg !122
  %exitcond139 = icmp eq i64 %indvars.iv.next137, 32, !dbg !152
  br i1 %exitcond139, label %for.cond24.preheader.preheader, label %for.cond3.preheader, !dbg !128, !llvm.loop !153

for.cond24.preheader.preheader:                   ; preds = %for.inc17
  %4 = bitcast i8* %call2 to i32*, !dbg !155
  br label %for.cond24.preheader, !dbg !156

for.cond24.preheader:                             ; preds = %for.inc45, %for.cond24.preheader.preheader
  %indvars.iv128 = phi i64 [ 0, %for.cond24.preheader.preheader ], [ %indvars.iv.next129, %for.inc45 ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv128, metadata !116, metadata !DIExpression()), !dbg !122
  call void @llvm.dbg.value(metadata i32 0, metadata !117, metadata !DIExpression()), !dbg !122
  %5 = mul nuw nsw i64 %indvars.iv128, 3, !dbg !158
  br label %for.body27, !dbg !164

for.body27:                                       ; preds = %for.body27, %for.cond24.preheader
  %indvars.iv124 = phi i64 [ 0, %for.cond24.preheader ], [ %indvars.iv.next125, %for.body27 ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv124, metadata !117, metadata !DIExpression()), !dbg !122
  %call28 = call i32 @rand() #6, !dbg !165
  %conv29 = sitofp i32 %call28 to double, !dbg !165
  %mul33 = fmul double %conv29, 0x41DFFFFFFF800000, !dbg !166
  %div34 = fdiv double %mul33, 0x41DFFFFFFFC00000, !dbg !167
  %add36 = fadd double %div34, 0.000000e+00, !dbg !168
  %conv37 = fptosi double %add36 to i32, !dbg !169
  %6 = add nuw nsw i64 %indvars.iv124, %5, !dbg !170
  %arrayidx41 = getelementptr inbounds i32, i32* %4, i64 %6, !dbg !171
  store i32 %conv37, i32* %arrayidx41, align 4, !dbg !172, !tbaa !54
  %indvars.iv.next125 = add nuw nsw i64 %indvars.iv124, 1, !dbg !173
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next125, metadata !117, metadata !DIExpression()), !dbg !122
  %exitcond127 = icmp eq i64 %indvars.iv.next125, 3, !dbg !174
  br i1 %exitcond127, label %for.inc45, label %for.body27, !dbg !164, !llvm.loop !175

for.inc45:                                        ; preds = %for.body27
  %indvars.iv.next129 = add nuw nsw i64 %indvars.iv128, 1, !dbg !177
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next129, metadata !116, metadata !DIExpression()), !dbg !122
  %exitcond131 = icmp eq i64 %indvars.iv.next129, 3, !dbg !178
  br i1 %exitcond131, label %for.end47, label %for.cond24.preheader, !dbg !156, !llvm.loop !179

for.end47:                                        ; preds = %for.inc45
  call void @stencil(i32* %0, i32* %1, i32* %4), !dbg !181
  call void @llvm.dbg.value(metadata i32 0, metadata !116, metadata !DIExpression()), !dbg !122
  br label %for.cond55.preheader, !dbg !182

for.cond55.preheader:                             ; preds = %for.inc71, %for.end47
  %indvars.iv120 = phi i64 [ 0, %for.end47 ], [ %indvars.iv.next121, %for.inc71 ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv120, metadata !116, metadata !DIExpression()), !dbg !122
  call void @llvm.dbg.value(metadata i32 0, metadata !117, metadata !DIExpression()), !dbg !122
  %7 = shl i64 %indvars.iv120, 5, !dbg !184
  br label %for.body58, !dbg !190

for.body58:                                       ; preds = %for.body58, %for.cond55.preheader
  %indvars.iv = phi i64 [ 0, %for.cond55.preheader ], [ %indvars.iv.next, %for.body58 ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !117, metadata !DIExpression()), !dbg !122
  %8 = add nuw nsw i64 %indvars.iv, %7, !dbg !191
  %arrayidx62 = getelementptr inbounds i32, i32* %0, i64 %8, !dbg !192
  %9 = load i32, i32* %arrayidx62, align 4, !dbg !192, !tbaa !54
  %arrayidx66 = getelementptr inbounds i32, i32* %1, i64 %8, !dbg !193
  %10 = load i32, i32* %arrayidx66, align 4, !dbg !193, !tbaa !54
  %11 = trunc i64 %indvars.iv to i32, !dbg !194
  %12 = trunc i64 %indvars.iv120 to i32, !dbg !194
  %call67 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0), i32 %12, i32 %11, i32 %9, i32 %10), !dbg !194
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !195
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !117, metadata !DIExpression()), !dbg !122
  %exitcond = icmp eq i64 %indvars.iv.next, 4, !dbg !196
  br i1 %exitcond, label %for.inc71, label %for.body58, !dbg !190, !llvm.loop !197

for.inc71:                                        ; preds = %for.body58
  %indvars.iv.next121 = add nuw nsw i64 %indvars.iv120, 1, !dbg !199
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next121, metadata !116, metadata !DIExpression()), !dbg !122
  %exitcond123 = icmp eq i64 %indvars.iv.next121, 4, !dbg !200
  br i1 %exitcond123, label %for.end73, label %for.cond55.preheader, !dbg !182, !llvm.loop !201

for.end73:                                        ; preds = %for.inc71
  %puts = call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([10 x i8], [10 x i8]* @str, i64 0, i64 0)), !dbg !203
  ret i32 0, !dbg !204
}

; Function Attrs: nounwind
declare !dbg !4 dso_local void @srand(i32) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare dso_local noalias i8* @malloc(i64) local_unnamed_addr #4

; Function Attrs: nounwind
declare !dbg !11 dso_local i32 @rand() local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare dso_local i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #5

attributes #0 = { nofree noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!14, !15, !16}
!llvm.ident = !{!17}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 10.0.1 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "stencil.c", directory: "/home/coco/work/benchmark_codes/stencil")
!2 = !{}
!3 = !{!4, !9, !10, !11}
!4 = !DISubprogram(name: "srand", scope: !5, file: !5, line: 456, type: !6, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !2)
!5 = !DIFile(filename: "/usr/include/stdlib.h", directory: "")
!6 = !DISubroutineType(types: !7)
!7 = !{null, !8}
!8 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64)
!10 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!11 = !DISubprogram(name: "rand", scope: !5, file: !5, line: 454, type: !12, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !2)
!12 = !DISubroutineType(types: !13)
!13 = !{!10}
!14 = !{i32 7, !"Dwarf Version", i32 4}
!15 = !{i32 2, !"Debug Info Version", i32 3}
!16 = !{i32 1, !"wchar_size", i32 4}
!17 = !{!"clang version 10.0.1 "}
!18 = distinct !DISubprogram(name: "stencil", scope: !1, file: !1, line: 7, type: !19, scopeLine: 8, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !23)
!19 = !DISubroutineType(types: !20)
!20 = !{null, !9, !9, !21}
!21 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !22, size: 64)
!22 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !10)
!23 = !{!24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40}
!24 = !DILocalVariable(name: "orig", arg: 1, scope: !18, file: !1, line: 7, type: !9)
!25 = !DILocalVariable(name: "sol", arg: 2, scope: !18, file: !1, line: 7, type: !9)
!26 = !DILocalVariable(name: "filter", arg: 3, scope: !18, file: !1, line: 7, type: !21)
!27 = !DILocalVariable(name: "i", scope: !18, file: !1, line: 12, type: !10)
!28 = !DILocalVariable(name: "j", scope: !18, file: !1, line: 12, type: !10)
!29 = !DILocalVariable(name: "k1", scope: !18, file: !1, line: 12, type: !10)
!30 = !DILocalVariable(name: "k2", scope: !18, file: !1, line: 12, type: !10)
!31 = !DILocalVariable(name: "sidx", scope: !18, file: !1, line: 12, type: !10)
!32 = !DILocalVariable(name: "didx", scope: !18, file: !1, line: 12, type: !10)
!33 = !DILocalVariable(name: "fidx", scope: !18, file: !1, line: 12, type: !10)
!34 = !DILocalVariable(name: "tmp", scope: !18, file: !1, line: 13, type: !10)
!35 = !DILocalVariable(name: "Si", scope: !18, file: !1, line: 13, type: !10)
!36 = !DILocalVariable(name: "SI", scope: !18, file: !1, line: 13, type: !10)
!37 = !DILocalVariable(name: "Di", scope: !18, file: !1, line: 13, type: !10)
!38 = !DILocalVariable(name: "Ti", scope: !18, file: !1, line: 13, type: !10)
!39 = !DILabel(scope: !18, name: "outer", file: !1, line: 14)
!40 = !DILabel(scope: !41, name: "inner", file: !1, line: 15)
!41 = distinct !DILexicalBlock(scope: !42, file: !1, line: 14, column: 31)
!42 = distinct !DILexicalBlock(scope: !43, file: !1, line: 14, column: 9)
!43 = distinct !DILexicalBlock(scope: !18, file: !1, line: 14, column: 9)
!44 = !DILocation(line: 0, scope: !18)
!45 = !DILocation(line: 14, column: 3, scope: !18)
!46 = !DILocation(line: 0, scope: !47)
!47 = distinct !DILexicalBlock(scope: !48, file: !1, line: 15, column: 33)
!48 = distinct !DILexicalBlock(scope: !49, file: !1, line: 15, column: 11)
!49 = distinct !DILexicalBlock(scope: !41, file: !1, line: 15, column: 11)
!50 = !DILocation(line: 14, column: 9, scope: !43)
!51 = !DILocation(line: 15, column: 11, scope: !49)
!52 = !DILocation(line: 21, column: 14, scope: !47)
!53 = !DILocation(line: 24, column: 9, scope: !47)
!54 = !{!55, !55, i64 0}
!55 = !{!"int", !56, i64 0}
!56 = !{!"omnipotent char", !57, i64 0}
!57 = !{!"Simple C/C++ TBAA"}
!58 = !DILocation(line: 24, column: 24, scope: !47)
!59 = !DILocation(line: 24, column: 22, scope: !47)
!60 = !DILocation(line: 26, column: 9, scope: !47)
!61 = !DILocation(line: 29, column: 9, scope: !47)
!62 = !DILocation(line: 29, column: 24, scope: !47)
!63 = !DILocation(line: 29, column: 22, scope: !47)
!64 = !DILocation(line: 30, column: 14, scope: !47)
!65 = !DILocation(line: 31, column: 9, scope: !47)
!66 = !DILocation(line: 34, column: 9, scope: !47)
!67 = !DILocation(line: 34, column: 24, scope: !47)
!68 = !DILocation(line: 34, column: 22, scope: !47)
!69 = !DILocation(line: 35, column: 14, scope: !47)
!70 = !DILocation(line: 39, column: 9, scope: !47)
!71 = !DILocation(line: 41, column: 9, scope: !47)
!72 = !DILocation(line: 41, column: 24, scope: !47)
!73 = !DILocation(line: 41, column: 22, scope: !47)
!74 = !DILocation(line: 42, column: 14, scope: !47)
!75 = !DILocation(line: 43, column: 9, scope: !47)
!76 = !DILocation(line: 46, column: 9, scope: !47)
!77 = !DILocation(line: 46, column: 24, scope: !47)
!78 = !DILocation(line: 46, column: 22, scope: !47)
!79 = !DILocation(line: 47, column: 14, scope: !47)
!80 = !DILocation(line: 48, column: 9, scope: !47)
!81 = !DILocation(line: 51, column: 9, scope: !47)
!82 = !DILocation(line: 51, column: 24, scope: !47)
!83 = !DILocation(line: 51, column: 22, scope: !47)
!84 = !DILocation(line: 52, column: 14, scope: !47)
!85 = !DILocation(line: 56, column: 23, scope: !47)
!86 = !DILocation(line: 58, column: 9, scope: !47)
!87 = !DILocation(line: 58, column: 24, scope: !47)
!88 = !DILocation(line: 58, column: 22, scope: !47)
!89 = !DILocation(line: 59, column: 14, scope: !47)
!90 = !DILocation(line: 60, column: 9, scope: !47)
!91 = !DILocation(line: 63, column: 9, scope: !47)
!92 = !DILocation(line: 63, column: 24, scope: !47)
!93 = !DILocation(line: 63, column: 22, scope: !47)
!94 = !DILocation(line: 64, column: 14, scope: !47)
!95 = !DILocation(line: 65, column: 9, scope: !47)
!96 = !DILocation(line: 68, column: 9, scope: !47)
!97 = !DILocation(line: 68, column: 24, scope: !47)
!98 = !DILocation(line: 68, column: 22, scope: !47)
!99 = !DILocation(line: 69, column: 14, scope: !47)
!100 = !DILocation(line: 72, column: 4, scope: !47)
!101 = !DILocation(line: 72, column: 14, scope: !47)
!102 = !DILocation(line: 15, column: 29, scope: !48)
!103 = !DILocation(line: 15, column: 22, scope: !48)
!104 = distinct !{!104, !51, !105}
!105 = !DILocation(line: 73, column: 3, scope: !49)
!106 = !DILocation(line: 14, column: 27, scope: !42)
!107 = !DILocation(line: 14, column: 20, scope: !42)
!108 = distinct !{!108, !50, !109}
!109 = !DILocation(line: 74, column: 2, scope: !43)
!110 = !DILocation(line: 78, column: 1, scope: !18)
!111 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 80, type: !12, scopeLine: 81, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !112)
!112 = !{!113, !114, !115, !116, !117, !118, !119, !120}
!113 = !DILocalVariable(name: "OrigImg", scope: !111, file: !1, line: 82, type: !9)
!114 = !DILocalVariable(name: "Solution", scope: !111, file: !1, line: 83, type: !9)
!115 = !DILocalVariable(name: "Filter", scope: !111, file: !1, line: 84, type: !9)
!116 = !DILocalVariable(name: "i", scope: !111, file: !1, line: 85, type: !10)
!117 = !DILocalVariable(name: "j", scope: !111, file: !1, line: 85, type: !10)
!118 = !DILocalVariable(name: "k", scope: !111, file: !1, line: 85, type: !10)
!119 = !DILocalVariable(name: "max", scope: !111, file: !1, line: 86, type: !10)
!120 = !DILocalVariable(name: "min", scope: !111, file: !1, line: 86, type: !10)
!121 = !DILocation(line: 88, column: 3, scope: !111)
!122 = !DILocation(line: 0, scope: !111)
!123 = !DILocation(line: 91, column: 20, scope: !111)
!124 = !DILocation(line: 91, column: 13, scope: !111)
!125 = !DILocation(line: 92, column: 21, scope: !111)
!126 = !DILocation(line: 92, column: 14, scope: !111)
!127 = !DILocation(line: 93, column: 20, scope: !111)
!128 = !DILocation(line: 94, column: 2, scope: !129)
!129 = distinct !DILexicalBlock(scope: !111, file: !1, line: 94, column: 2)
!130 = !DILocation(line: 0, scope: !131)
!131 = distinct !DILexicalBlock(scope: !132, file: !1, line: 97, column: 3)
!132 = distinct !DILexicalBlock(scope: !133, file: !1, line: 96, column: 3)
!133 = distinct !DILexicalBlock(scope: !134, file: !1, line: 96, column: 3)
!134 = distinct !DILexicalBlock(scope: !135, file: !1, line: 95, column: 2)
!135 = distinct !DILexicalBlock(scope: !129, file: !1, line: 94, column: 2)
!136 = !DILocation(line: 96, column: 3, scope: !133)
!137 = !DILocation(line: 98, column: 36, scope: !131)
!138 = !DILocation(line: 98, column: 49, scope: !131)
!139 = !DILocation(line: 98, column: 62, scope: !131)
!140 = !DILocation(line: 98, column: 76, scope: !131)
!141 = !DILocation(line: 98, column: 28, scope: !131)
!142 = !DILocation(line: 98, column: 21, scope: !131)
!143 = !DILocation(line: 98, column: 4, scope: !131)
!144 = !DILocation(line: 98, column: 26, scope: !131)
!145 = !DILocation(line: 99, column: 4, scope: !131)
!146 = !DILocation(line: 99, column: 27, scope: !131)
!147 = !DILocation(line: 96, column: 17, scope: !132)
!148 = !DILocation(line: 96, column: 12, scope: !132)
!149 = distinct !{!149, !136, !150}
!150 = !DILocation(line: 101, column: 3, scope: !133)
!151 = !DILocation(line: 94, column: 16, scope: !135)
!152 = !DILocation(line: 94, column: 11, scope: !135)
!153 = distinct !{!153, !128, !154}
!154 = !DILocation(line: 102, column: 2, scope: !129)
!155 = !DILocation(line: 93, column: 12, scope: !111)
!156 = !DILocation(line: 104, column: 2, scope: !157)
!157 = distinct !DILexicalBlock(scope: !111, file: !1, line: 104, column: 2)
!158 = !DILocation(line: 0, scope: !159)
!159 = distinct !DILexicalBlock(scope: !160, file: !1, line: 107, column: 3)
!160 = distinct !DILexicalBlock(scope: !161, file: !1, line: 106, column: 3)
!161 = distinct !DILexicalBlock(scope: !162, file: !1, line: 106, column: 3)
!162 = distinct !DILexicalBlock(scope: !163, file: !1, line: 105, column: 2)
!163 = distinct !DILexicalBlock(scope: !157, file: !1, line: 104, column: 2)
!164 = !DILocation(line: 106, column: 3, scope: !161)
!165 = !DILocation(line: 108, column: 30, scope: !159)
!166 = !DILocation(line: 108, column: 43, scope: !159)
!167 = !DILocation(line: 108, column: 58, scope: !159)
!168 = !DILocation(line: 108, column: 72, scope: !159)
!169 = !DILocation(line: 108, column: 22, scope: !159)
!170 = !DILocation(line: 108, column: 15, scope: !159)
!171 = !DILocation(line: 108, column: 4, scope: !159)
!172 = !DILocation(line: 108, column: 20, scope: !159)
!173 = !DILocation(line: 106, column: 16, scope: !160)
!174 = !DILocation(line: 106, column: 12, scope: !160)
!175 = distinct !{!175, !164, !176}
!176 = !DILocation(line: 113, column: 3, scope: !161)
!177 = !DILocation(line: 104, column: 15, scope: !163)
!178 = !DILocation(line: 104, column: 11, scope: !163)
!179 = distinct !{!179, !156, !180}
!180 = !DILocation(line: 114, column: 2, scope: !157)
!181 = !DILocation(line: 119, column: 2, scope: !111)
!182 = !DILocation(line: 124, column: 2, scope: !183)
!183 = distinct !DILexicalBlock(scope: !111, file: !1, line: 124, column: 2)
!184 = !DILocation(line: 0, scope: !185)
!185 = distinct !DILexicalBlock(scope: !186, file: !1, line: 127, column: 4)
!186 = distinct !DILexicalBlock(scope: !187, file: !1, line: 126, column: 4)
!187 = distinct !DILexicalBlock(scope: !188, file: !1, line: 126, column: 4)
!188 = distinct !DILexicalBlock(scope: !189, file: !1, line: 125, column: 3)
!189 = distinct !DILexicalBlock(scope: !183, file: !1, line: 124, column: 2)
!190 = !DILocation(line: 126, column: 4, scope: !187)
!191 = !DILocation(line: 128, column: 53, scope: !185)
!192 = !DILocation(line: 128, column: 38, scope: !185)
!193 = !DILocation(line: 128, column: 59, scope: !185)
!194 = !DILocation(line: 128, column: 5, scope: !185)
!195 = !DILocation(line: 126, column: 17, scope: !186)
!196 = !DILocation(line: 126, column: 13, scope: !186)
!197 = distinct !{!197, !190, !198}
!198 = !DILocation(line: 130, column: 4, scope: !187)
!199 = !DILocation(line: 124, column: 17, scope: !189)
!200 = !DILocation(line: 124, column: 11, scope: !189)
!201 = distinct !{!201, !182, !202}
!202 = !DILocation(line: 131, column: 3, scope: !183)
!203 = !DILocation(line: 132, column: 2, scope: !111)
!204 = !DILocation(line: 134, column: 2, scope: !111)
