; ModuleID = 'gemm.c'
source_filename = "gemm.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: nofree noinline norecurse nounwind uwtable
define dso_local void @gemm(double* nocapture readonly %host_m1, double* nocapture readonly %host_m2, double* nocapture %host_prod, double* nocapture readnone %m1, double* nocapture readnone %m2, double* nocapture readnone %prod) local_unnamed_addr #0 !dbg !7 {
entry:
  call void @llvm.dbg.value(metadata double* %host_m1, metadata !13, metadata !DIExpression()), !dbg !36
  call void @llvm.dbg.value(metadata double* %host_m2, metadata !14, metadata !DIExpression()), !dbg !36
  call void @llvm.dbg.value(metadata double* %host_prod, metadata !15, metadata !DIExpression()), !dbg !36
  call void @llvm.dbg.value(metadata double* %m1, metadata !16, metadata !DIExpression()), !dbg !36
  call void @llvm.dbg.value(metadata double* %m2, metadata !17, metadata !DIExpression()), !dbg !36
  call void @llvm.dbg.value(metadata double* %prod, metadata !18, metadata !DIExpression()), !dbg !36
  call void @llvm.dbg.value(metadata double* %host_m1, metadata !16, metadata !DIExpression()), !dbg !36
  call void @llvm.dbg.value(metadata double* %host_m2, metadata !17, metadata !DIExpression()), !dbg !36
  call void @llvm.dbg.value(metadata double* %host_prod, metadata !18, metadata !DIExpression()), !dbg !36
  call void @llvm.dbg.label(metadata !33), !dbg !37
  call void @llvm.dbg.value(metadata i32 0, metadata !19, metadata !DIExpression()), !dbg !36
  br label %for.cond1.preheader, !dbg !38

for.cond1.preheader:                              ; preds = %for.inc19, %entry
  %indvars.iv49 = phi i64 [ 0, %entry ], [ %indvars.iv.next50, %for.inc19 ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv49, metadata !19, metadata !DIExpression()), !dbg !36
  call void @llvm.dbg.value(metadata i32 0, metadata !21, metadata !DIExpression()), !dbg !36
  %0 = shl nsw i64 %indvars.iv49, 6, !dbg !39
  br label %for.body3, !dbg !40

for.body3:                                        ; preds = %for.end, %for.cond1.preheader
  %indvars.iv45 = phi i64 [ 0, %for.cond1.preheader ], [ %indvars.iv.next46, %for.end ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv45, metadata !21, metadata !DIExpression()), !dbg !36
  call void @llvm.dbg.value(metadata i64 %0, metadata !24, metadata !DIExpression()), !dbg !36
  call void @llvm.dbg.value(metadata double 0.000000e+00, metadata !26, metadata !DIExpression()), !dbg !39
  call void @llvm.dbg.label(metadata !35), !dbg !41
  call void @llvm.dbg.value(metadata i32 0, metadata !22, metadata !DIExpression()), !dbg !36
  call void @llvm.dbg.value(metadata double 0.000000e+00, metadata !26, metadata !DIExpression()), !dbg !39
  br label %for.body6, !dbg !42

for.body6:                                        ; preds = %for.body6, %for.body3
  %indvars.iv = phi i64 [ 0, %for.body3 ], [ %indvars.iv.next, %for.body6 ]
  %sum.039 = phi double [ 0.000000e+00, %for.body3 ], [ %add12, %for.body6 ]
  call void @llvm.dbg.value(metadata double %sum.039, metadata !26, metadata !DIExpression()), !dbg !39
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !22, metadata !DIExpression()), !dbg !36
  %1 = shl i64 %indvars.iv, 6, !dbg !44
  call void @llvm.dbg.value(metadata i64 %1, metadata !23, metadata !DIExpression()), !dbg !36
  %2 = add nuw nsw i64 %indvars.iv, %0, !dbg !47
  %arrayidx = getelementptr inbounds double, double* %host_m1, i64 %2, !dbg !48
  %3 = load double, double* %arrayidx, align 8, !dbg !48, !tbaa !49
  %4 = add nuw nsw i64 %1, %indvars.iv45, !dbg !53
  %arrayidx10 = getelementptr inbounds double, double* %host_m2, i64 %4, !dbg !54
  %5 = load double, double* %arrayidx10, align 8, !dbg !54, !tbaa !49
  %mul11 = fmul double %3, %5, !dbg !55
  call void @llvm.dbg.value(metadata double %mul11, metadata !25, metadata !DIExpression()), !dbg !36
  %add12 = fadd double %sum.039, %mul11, !dbg !56
  call void @llvm.dbg.value(metadata double %add12, metadata !26, metadata !DIExpression()), !dbg !39
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !57
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !22, metadata !DIExpression()), !dbg !36
  %exitcond = icmp eq i64 %indvars.iv.next, 64, !dbg !58
  br i1 %exitcond, label %for.end, label %for.body6, !dbg !42, !llvm.loop !59

for.end:                                          ; preds = %for.body6
  call void @llvm.dbg.value(metadata double %add12, metadata !26, metadata !DIExpression()), !dbg !39
  %6 = add nuw nsw i64 %indvars.iv45, %0, !dbg !61
  %arrayidx15 = getelementptr inbounds double, double* %host_prod, i64 %6, !dbg !62
  store double %add12, double* %arrayidx15, align 8, !dbg !63, !tbaa !49
  %indvars.iv.next46 = add nuw nsw i64 %indvars.iv45, 1, !dbg !64
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next46, metadata !21, metadata !DIExpression()), !dbg !36
  %exitcond48 = icmp eq i64 %indvars.iv.next46, 64, !dbg !65
  br i1 %exitcond48, label %for.inc19, label %for.body3, !dbg !40, !llvm.loop !66

for.inc19:                                        ; preds = %for.end
  %indvars.iv.next50 = add nuw nsw i64 %indvars.iv49, 1, !dbg !68
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next50, metadata !19, metadata !DIExpression()), !dbg !36
  %exitcond52 = icmp eq i64 %indvars.iv.next50, 64, !dbg !69
  br i1 %exitcond52, label %for.end21, label %for.cond1.preheader, !dbg !38, !llvm.loop !70

for.end21:                                        ; preds = %for.inc19
  ret void, !dbg !72
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

attributes #0 = { nofree noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4, !5}
!llvm.ident = !{!6}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 10.0.1 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "gemm.c", directory: "/home/coco/work/benchmark_codes/gemm-ncubed")
!2 = !{}
!3 = !{i32 7, !"Dwarf Version", i32 4}
!4 = !{i32 2, !"Debug Info Version", i32 3}
!5 = !{i32 1, !"wchar_size", i32 4}
!6 = !{!"clang version 10.0.1 "}
!7 = distinct !DISubprogram(name: "gemm", scope: !1, file: !1, line: 7, type: !8, scopeLine: 8, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !12)
!8 = !DISubroutineType(types: !9)
!9 = !{null, !10, !10, !10, !10, !10, !10}
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!11 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!12 = !{!13, !14, !15, !16, !17, !18, !19, !21, !22, !23, !24, !25, !26, !33, !34, !35}
!13 = !DILocalVariable(name: "host_m1", arg: 1, scope: !7, file: !1, line: 7, type: !10)
!14 = !DILocalVariable(name: "host_m2", arg: 2, scope: !7, file: !1, line: 7, type: !10)
!15 = !DILocalVariable(name: "host_prod", arg: 3, scope: !7, file: !1, line: 7, type: !10)
!16 = !DILocalVariable(name: "m1", arg: 4, scope: !7, file: !1, line: 8, type: !10)
!17 = !DILocalVariable(name: "m2", arg: 5, scope: !7, file: !1, line: 8, type: !10)
!18 = !DILocalVariable(name: "prod", arg: 6, scope: !7, file: !1, line: 8, type: !10)
!19 = !DILocalVariable(name: "i", scope: !7, file: !1, line: 9, type: !20)
!20 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!21 = !DILocalVariable(name: "j", scope: !7, file: !1, line: 9, type: !20)
!22 = !DILocalVariable(name: "k", scope: !7, file: !1, line: 9, type: !20)
!23 = !DILocalVariable(name: "k_col", scope: !7, file: !1, line: 10, type: !20)
!24 = !DILocalVariable(name: "i_col", scope: !7, file: !1, line: 10, type: !20)
!25 = !DILocalVariable(name: "mult", scope: !7, file: !1, line: 11, type: !11)
!26 = !DILocalVariable(name: "sum", scope: !27, file: !1, line: 25, type: !11)
!27 = distinct !DILexicalBlock(scope: !28, file: !1, line: 23, column: 40)
!28 = distinct !DILexicalBlock(scope: !29, file: !1, line: 23, column: 16)
!29 = distinct !DILexicalBlock(scope: !30, file: !1, line: 23, column: 16)
!30 = distinct !DILexicalBlock(scope: !31, file: !1, line: 22, column: 35)
!31 = distinct !DILexicalBlock(scope: !32, file: !1, line: 22, column: 11)
!32 = distinct !DILexicalBlock(scope: !7, file: !1, line: 22, column: 11)
!33 = !DILabel(scope: !7, name: "outer", file: !1, line: 22)
!34 = !DILabel(scope: !30, name: "middle", file: !1, line: 23)
!35 = !DILabel(scope: !27, name: "inner", file: !1, line: 26)
!36 = !DILocation(line: 0, scope: !7)
!37 = !DILocation(line: 22, column: 5, scope: !7)
!38 = !DILocation(line: 22, column: 11, scope: !32)
!39 = !DILocation(line: 0, scope: !27)
!40 = !DILocation(line: 23, column: 16, scope: !29)
!41 = !DILocation(line: 26, column: 13, scope: !27)
!42 = !DILocation(line: 26, column: 19, scope: !43)
!43 = distinct !DILexicalBlock(scope: !27, file: !1, line: 26, column: 19)
!44 = !DILocation(line: 27, column: 27, scope: !45)
!45 = distinct !DILexicalBlock(scope: !46, file: !1, line: 26, column: 43)
!46 = distinct !DILexicalBlock(scope: !43, file: !1, line: 26, column: 19)
!47 = !DILocation(line: 28, column: 33, scope: !45)
!48 = !DILocation(line: 28, column: 24, scope: !45)
!49 = !{!50, !50, i64 0}
!50 = !{!"double", !51, i64 0}
!51 = !{!"omnipotent char", !52, i64 0}
!52 = !{!"Simple C/C++ TBAA"}
!53 = !DILocation(line: 28, column: 49, scope: !45)
!54 = !DILocation(line: 28, column: 40, scope: !45)
!55 = !DILocation(line: 28, column: 38, scope: !45)
!56 = !DILocation(line: 29, column: 21, scope: !45)
!57 = !DILocation(line: 26, column: 39, scope: !46)
!58 = !DILocation(line: 26, column: 28, scope: !46)
!59 = distinct !{!59, !42, !60}
!60 = !DILocation(line: 30, column: 13, scope: !43)
!61 = !DILocation(line: 31, column: 24, scope: !27)
!62 = !DILocation(line: 31, column: 13, scope: !27)
!63 = !DILocation(line: 31, column: 30, scope: !27)
!64 = !DILocation(line: 23, column: 36, scope: !28)
!65 = !DILocation(line: 23, column: 25, scope: !28)
!66 = distinct !{!66, !40, !67}
!67 = !DILocation(line: 32, column: 9, scope: !29)
!68 = !DILocation(line: 22, column: 31, scope: !31)
!69 = !DILocation(line: 22, column: 20, scope: !31)
!70 = distinct !{!70, !38, !71}
!71 = !DILocation(line: 33, column: 5, scope: !32)
!72 = !DILocation(line: 38, column: 1, scope: !7)
