; ModuleID = 'kmp.c'
source_filename = "kmp.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: nofree noinline norecurse nounwind uwtable
define dso_local void @CPF(i8* nocapture readonly %pattern, i32* nocapture %kmpNext) local_unnamed_addr #0 !dbg !7 {
entry:
  call void @llvm.dbg.value(metadata i8* %pattern, metadata !19, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i32* %kmpNext, metadata !20, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i32 0, metadata !21, metadata !DIExpression()), !dbg !28
  store i32 0, i32* %kmpNext, align 4, !dbg !29, !tbaa !30
  call void @llvm.dbg.label(metadata !23), !dbg !34
  call void @llvm.dbg.value(metadata i32 1, metadata !22, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i32 0, metadata !21, metadata !DIExpression()), !dbg !28
  br label %while.cond.preheader, !dbg !35

while.cond.preheader:                             ; preds = %while.end, %entry
  %indvars.iv = phi i64 [ 1, %entry ], [ %indvars.iv.next, %while.end ]
  %k.040 = phi i32 [ 0, %entry ], [ %spec.select, %while.end ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !22, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i32 %k.040, metadata !21, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i32 %k.040, metadata !21, metadata !DIExpression()), !dbg !28
  %cmp137 = icmp sgt i32 %k.040, 0, !dbg !36
  br i1 %cmp137, label %land.rhs.lr.ph, label %while.end, !dbg !37

land.rhs.lr.ph:                                   ; preds = %while.cond.preheader
  %arrayidx4 = getelementptr inbounds i8, i8* %pattern, i64 %indvars.iv, !dbg !38
  %0 = load i8, i8* %arrayidx4, align 1, !dbg !38, !tbaa !39
  %arrayidx9 = getelementptr inbounds i32, i32* %kmpNext, i64 %indvars.iv, !dbg !40
  br label %land.rhs, !dbg !37

land.rhs:                                         ; preds = %land.rhs.lr.ph, %while.body
  %k.138 = phi i32 [ %k.040, %land.rhs.lr.ph ], [ %2, %while.body ]
  call void @llvm.dbg.value(metadata i32 %k.138, metadata !21, metadata !DIExpression()), !dbg !28
  %idxprom = sext i32 %k.138 to i64, !dbg !42
  %arrayidx2 = getelementptr inbounds i8, i8* %pattern, i64 %idxprom, !dbg !42
  %1 = load i8, i8* %arrayidx2, align 1, !dbg !42, !tbaa !39
  %cmp6 = icmp eq i8 %1, %0, !dbg !43
  br i1 %cmp6, label %while.end, label %while.body, !dbg !44

while.body:                                       ; preds = %land.rhs
  %2 = load i32, i32* %arrayidx9, align 4, !dbg !45, !tbaa !30
  call void @llvm.dbg.value(metadata i32 %2, metadata !21, metadata !DIExpression()), !dbg !28
  %cmp1 = icmp sgt i32 %2, 0, !dbg !36
  br i1 %cmp1, label %land.rhs, label %while.end, !dbg !37, !llvm.loop !46

while.end:                                        ; preds = %while.body, %land.rhs, %while.cond.preheader
  %k.1.lcssa = phi i32 [ %k.040, %while.cond.preheader ], [ %2, %while.body ], [ %k.138, %land.rhs ], !dbg !28
  call void @llvm.dbg.value(metadata i32 %k.1.lcssa, metadata !21, metadata !DIExpression()), !dbg !28
  %idxprom10 = sext i32 %k.1.lcssa to i64, !dbg !48
  %arrayidx11 = getelementptr inbounds i8, i8* %pattern, i64 %idxprom10, !dbg !48
  %3 = load i8, i8* %arrayidx11, align 1, !dbg !48, !tbaa !39
  %arrayidx14 = getelementptr inbounds i8, i8* %pattern, i64 %indvars.iv, !dbg !50
  %4 = load i8, i8* %arrayidx14, align 1, !dbg !50, !tbaa !39
  %cmp16 = icmp eq i8 %3, %4, !dbg !51
  %inc = zext i1 %cmp16 to i32, !dbg !52
  %spec.select = add nsw i32 %k.1.lcssa, %inc, !dbg !52
  call void @llvm.dbg.value(metadata i32 %spec.select, metadata !21, metadata !DIExpression()), !dbg !28
  %arrayidx19 = getelementptr inbounds i32, i32* %kmpNext, i64 %indvars.iv, !dbg !53
  store i32 %spec.select, i32* %arrayidx19, align 4, !dbg !54, !tbaa !30
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !55
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !22, metadata !DIExpression()), !dbg !28
  %exitcond = icmp eq i64 %indvars.iv.next, 4, !dbg !56
  br i1 %exitcond, label %for.end, label %while.cond.preheader, !dbg !35, !llvm.loop !57

for.end:                                          ; preds = %while.end
  ret void, !dbg !59
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: nofree noinline norecurse nounwind uwtable
define dso_local i32 @kmp(i8* nocapture readonly %host_input, i32* nocapture %host_n_matches, i8* nocapture readonly %pattern, i8* nocapture readnone %input, i32* nocapture %kmpNext, i32* nocapture readnone %n_matches) local_unnamed_addr #0 !dbg !60 {
entry:
  call void @llvm.dbg.value(metadata i8* %host_input, metadata !64, metadata !DIExpression()), !dbg !77
  call void @llvm.dbg.value(metadata i32* %host_n_matches, metadata !65, metadata !DIExpression()), !dbg !77
  call void @llvm.dbg.value(metadata i8* %pattern, metadata !66, metadata !DIExpression()), !dbg !77
  call void @llvm.dbg.value(metadata i8* %input, metadata !67, metadata !DIExpression()), !dbg !77
  call void @llvm.dbg.value(metadata i32* %kmpNext, metadata !68, metadata !DIExpression()), !dbg !77
  call void @llvm.dbg.value(metadata i32* %n_matches, metadata !69, metadata !DIExpression()), !dbg !77
  call void @llvm.dbg.value(metadata i8* %host_input, metadata !67, metadata !DIExpression()), !dbg !77
  call void @llvm.dbg.value(metadata i32* %host_n_matches, metadata !69, metadata !DIExpression()), !dbg !77
  store i32 0, i32* %host_n_matches, align 4, !dbg !78, !tbaa !30
  call void @CPF(i8* %pattern, i32* %kmpNext), !dbg !79
  call void @llvm.dbg.value(metadata i32 0, metadata !71, metadata !DIExpression()), !dbg !77
  call void @llvm.dbg.label(metadata !72), !dbg !80
  call void @llvm.dbg.value(metadata i32 0, metadata !70, metadata !DIExpression()), !dbg !77
  call void @llvm.dbg.value(metadata i32 0, metadata !71, metadata !DIExpression()), !dbg !77
  br label %while.cond.preheader, !dbg !81

while.cond.preheader:                             ; preds = %for.inc, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.inc ]
  %q.049 = phi i32 [ 0, %entry ], [ %q.3, %for.inc ]
  call void @llvm.dbg.value(metadata i32 %q.049, metadata !71, metadata !DIExpression()), !dbg !77
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !70, metadata !DIExpression()), !dbg !77
  call void @llvm.dbg.value(metadata i32 %q.049, metadata !71, metadata !DIExpression()), !dbg !77
  %cmp144 = icmp sgt i32 %q.049, 0, !dbg !82
  br i1 %cmp144, label %land.rhs.lr.ph, label %while.end, !dbg !83

land.rhs.lr.ph:                                   ; preds = %while.cond.preheader
  %arrayidx4 = getelementptr inbounds i8, i8* %host_input, i64 %indvars.iv, !dbg !84
  %0 = load i8, i8* %arrayidx4, align 1, !dbg !84, !tbaa !39
  br label %land.rhs, !dbg !83

land.rhs:                                         ; preds = %land.rhs.lr.ph, %while.body
  %q.145 = phi i32 [ %q.049, %land.rhs.lr.ph ], [ %2, %while.body ]
  call void @llvm.dbg.value(metadata i32 %q.145, metadata !71, metadata !DIExpression()), !dbg !77
  %idxprom = sext i32 %q.145 to i64, !dbg !85
  %arrayidx2 = getelementptr inbounds i8, i8* %pattern, i64 %idxprom, !dbg !85
  %1 = load i8, i8* %arrayidx2, align 1, !dbg !85, !tbaa !39
  %cmp6 = icmp eq i8 %1, %0, !dbg !86
  br i1 %cmp6, label %while.end, label %while.body, !dbg !87

while.body:                                       ; preds = %land.rhs
  %arrayidx9 = getelementptr inbounds i32, i32* %kmpNext, i64 %idxprom, !dbg !88
  %2 = load i32, i32* %arrayidx9, align 4, !dbg !88, !tbaa !30
  call void @llvm.dbg.value(metadata i32 %2, metadata !71, metadata !DIExpression()), !dbg !77
  %cmp1 = icmp sgt i32 %2, 0, !dbg !82
  br i1 %cmp1, label %land.rhs, label %while.end, !dbg !83, !llvm.loop !90

while.end:                                        ; preds = %while.body, %land.rhs, %while.cond.preheader
  %q.1.lcssa = phi i32 [ %q.049, %while.cond.preheader ], [ %2, %while.body ], [ %q.145, %land.rhs ], !dbg !77
  call void @llvm.dbg.value(metadata i32 %q.1.lcssa, metadata !71, metadata !DIExpression()), !dbg !77
  call void @llvm.dbg.value(metadata i32 %q.1.lcssa, metadata !71, metadata !DIExpression()), !dbg !77
  %idxprom10 = sext i32 %q.1.lcssa to i64, !dbg !92
  %arrayidx11 = getelementptr inbounds i8, i8* %pattern, i64 %idxprom10, !dbg !92
  %3 = load i8, i8* %arrayidx11, align 1, !dbg !92, !tbaa !39
  %arrayidx14 = getelementptr inbounds i8, i8* %host_input, i64 %indvars.iv, !dbg !94
  %4 = load i8, i8* %arrayidx14, align 1, !dbg !94, !tbaa !39
  %cmp16 = icmp eq i8 %3, %4, !dbg !95
  %inc = zext i1 %cmp16 to i32, !dbg !96
  %spec.select = add nsw i32 %q.1.lcssa, %inc, !dbg !96
  call void @llvm.dbg.value(metadata i32 %spec.select, metadata !71, metadata !DIExpression()), !dbg !77
  %cmp18 = icmp sgt i32 %spec.select, 3, !dbg !97
  br i1 %cmp18, label %if.then20, label %for.inc, !dbg !99

if.then20:                                        ; preds = %while.end
  %5 = load i32, i32* %host_n_matches, align 4, !dbg !100, !tbaa !30
  %inc22 = add nsw i32 %5, 1, !dbg !100
  store i32 %inc22, i32* %host_n_matches, align 4, !dbg !100, !tbaa !30
  %sub = add nsw i32 %spec.select, -1, !dbg !102
  %idxprom23 = sext i32 %sub to i64, !dbg !103
  %arrayidx24 = getelementptr inbounds i32, i32* %kmpNext, i64 %idxprom23, !dbg !103
  %6 = load i32, i32* %arrayidx24, align 4, !dbg !103, !tbaa !30
  call void @llvm.dbg.value(metadata i32 %6, metadata !71, metadata !DIExpression()), !dbg !77
  br label %for.inc, !dbg !104

for.inc:                                          ; preds = %while.end, %if.then20
  %q.3 = phi i32 [ %6, %if.then20 ], [ %spec.select, %while.end ], !dbg !84
  call void @llvm.dbg.value(metadata i32 %q.3, metadata !71, metadata !DIExpression()), !dbg !77
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !105
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !70, metadata !DIExpression()), !dbg !77
  %exitcond = icmp eq i64 %indvars.iv.next, 32411, !dbg !106
  br i1 %exitcond, label %for.end, label %while.cond.preheader, !dbg !81, !llvm.loop !107

for.end:                                          ; preds = %for.inc
  ret i32 0, !dbg !109
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

attributes #0 = { nofree noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4, !5}
!llvm.ident = !{!6}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 10.0.1 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "kmp.c", directory: "/home/coco/work/benchmark_codes/kmp")
!2 = !{}
!3 = !{i32 7, !"Dwarf Version", i32 4}
!4 = !{i32 2, !"Debug Info Version", i32 3}
!5 = !{i32 1, !"wchar_size", i32 4}
!6 = !{!"clang version 10.0.1 "}
!7 = distinct !DISubprogram(name: "CPF", scope: !1, file: !1, line: 11, type: !8, scopeLine: 11, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !18)
!8 = !DISubroutineType(types: !9)
!9 = !{null, !10, !12}
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!11 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!12 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !13, size: 64)
!13 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !14, line: 26, baseType: !15)
!14 = !DIFile(filename: "/usr/include/bits/stdint-intn.h", directory: "")
!15 = !DIDerivedType(tag: DW_TAG_typedef, name: "__int32_t", file: !16, line: 41, baseType: !17)
!16 = !DIFile(filename: "/usr/include/bits/types.h", directory: "")
!17 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!18 = !{!19, !20, !21, !22, !23, !24}
!19 = !DILocalVariable(name: "pattern", arg: 1, scope: !7, file: !1, line: 11, type: !10)
!20 = !DILocalVariable(name: "kmpNext", arg: 2, scope: !7, file: !1, line: 11, type: !12)
!21 = !DILocalVariable(name: "k", scope: !7, file: !1, line: 12, type: !13)
!22 = !DILocalVariable(name: "q", scope: !7, file: !1, line: 12, type: !13)
!23 = !DILabel(scope: !7, name: "c1", file: !1, line: 16)
!24 = !DILabel(scope: !25, name: "c2", file: !1, line: 17)
!25 = distinct !DILexicalBlock(scope: !26, file: !1, line: 16, column: 43)
!26 = distinct !DILexicalBlock(scope: !27, file: !1, line: 16, column: 10)
!27 = distinct !DILexicalBlock(scope: !7, file: !1, line: 16, column: 10)
!28 = !DILocation(line: 0, scope: !7)
!29 = !DILocation(line: 14, column: 16, scope: !7)
!30 = !{!31, !31, i64 0}
!31 = !{!"int", !32, i64 0}
!32 = !{!"omnipotent char", !33, i64 0}
!33 = !{!"Simple C/C++ TBAA"}
!34 = !DILocation(line: 16, column: 5, scope: !7)
!35 = !DILocation(line: 16, column: 10, scope: !27)
!36 = !DILocation(line: 17, column: 22, scope: !25)
!37 = !DILocation(line: 17, column: 26, scope: !25)
!38 = !DILocation(line: 0, scope: !25)
!39 = !{!32, !32, i64 0}
!40 = !DILocation(line: 0, scope: !41)
!41 = distinct !DILexicalBlock(scope: !25, file: !1, line: 17, column: 54)
!42 = !DILocation(line: 17, column: 29, scope: !25)
!43 = !DILocation(line: 17, column: 40, scope: !25)
!44 = !DILocation(line: 17, column: 14, scope: !25)
!45 = !DILocation(line: 18, column: 17, scope: !41)
!46 = distinct !{!46, !44, !47}
!47 = !DILocation(line: 19, column: 9, scope: !25)
!48 = !DILocation(line: 20, column: 12, scope: !49)
!49 = distinct !DILexicalBlock(scope: !25, file: !1, line: 20, column: 12)
!50 = !DILocation(line: 20, column: 26, scope: !49)
!51 = !DILocation(line: 20, column: 23, scope: !49)
!52 = !DILocation(line: 20, column: 12, scope: !25)
!53 = !DILocation(line: 23, column: 9, scope: !25)
!54 = !DILocation(line: 23, column: 20, scope: !25)
!55 = !DILocation(line: 16, column: 40, scope: !26)
!56 = !DILocation(line: 16, column: 23, scope: !26)
!57 = distinct !{!57, !35, !58}
!58 = !DILocation(line: 24, column: 5, scope: !27)
!59 = !DILocation(line: 25, column: 1, scope: !7)
!60 = distinct !DISubprogram(name: "kmp", scope: !1, file: !1, line: 28, type: !61, scopeLine: 33, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !63)
!61 = !DISubroutineType(types: !62)
!62 = !{!17, !10, !12, !10, !10, !12, !12}
!63 = !{!64, !65, !66, !67, !68, !69, !70, !71, !72, !73}
!64 = !DILocalVariable(name: "host_input", arg: 1, scope: !60, file: !1, line: 28, type: !10)
!65 = !DILocalVariable(name: "host_n_matches", arg: 2, scope: !60, file: !1, line: 29, type: !12)
!66 = !DILocalVariable(name: "pattern", arg: 3, scope: !60, file: !1, line: 30, type: !10)
!67 = !DILocalVariable(name: "input", arg: 4, scope: !60, file: !1, line: 31, type: !10)
!68 = !DILocalVariable(name: "kmpNext", arg: 5, scope: !60, file: !1, line: 32, type: !12)
!69 = !DILocalVariable(name: "n_matches", arg: 6, scope: !60, file: !1, line: 33, type: !12)
!70 = !DILocalVariable(name: "i", scope: !60, file: !1, line: 34, type: !13)
!71 = !DILocalVariable(name: "q", scope: !60, file: !1, line: 34, type: !13)
!72 = !DILabel(scope: !60, name: "k1", file: !1, line: 50)
!73 = !DILabel(scope: !74, name: "k2", file: !1, line: 51)
!74 = distinct !DILexicalBlock(scope: !75, file: !1, line: 50, column: 42)
!75 = distinct !DILexicalBlock(scope: !76, file: !1, line: 50, column: 10)
!76 = distinct !DILexicalBlock(scope: !60, file: !1, line: 50, column: 10)
!77 = !DILocation(line: 0, scope: !60)
!78 = !DILocation(line: 45, column: 18, scope: !60)
!79 = !DILocation(line: 47, column: 5, scope: !60)
!80 = !DILocation(line: 50, column: 5, scope: !60)
!81 = !DILocation(line: 50, column: 10, scope: !76)
!82 = !DILocation(line: 51, column: 23, scope: !74)
!83 = !DILocation(line: 51, column: 27, scope: !74)
!84 = !DILocation(line: 0, scope: !74)
!85 = !DILocation(line: 51, column: 30, scope: !74)
!86 = !DILocation(line: 51, column: 41, scope: !74)
!87 = !DILocation(line: 51, column: 14, scope: !74)
!88 = !DILocation(line: 52, column: 17, scope: !89)
!89 = distinct !DILexicalBlock(scope: !74, file: !1, line: 51, column: 53)
!90 = distinct !{!90, !87, !91}
!91 = !DILocation(line: 53, column: 9, scope: !74)
!92 = !DILocation(line: 54, column: 13, scope: !93)
!93 = distinct !DILexicalBlock(scope: !74, file: !1, line: 54, column: 13)
!94 = !DILocation(line: 54, column: 27, scope: !93)
!95 = !DILocation(line: 54, column: 24, scope: !93)
!96 = !DILocation(line: 54, column: 13, scope: !74)
!97 = !DILocation(line: 57, column: 15, scope: !98)
!98 = distinct !DILexicalBlock(scope: !74, file: !1, line: 57, column: 13)
!99 = !DILocation(line: 57, column: 13, scope: !74)
!100 = !DILocation(line: 58, column: 25, scope: !101)
!101 = distinct !DILexicalBlock(scope: !98, file: !1, line: 57, column: 31)
!102 = !DILocation(line: 59, column: 27, scope: !101)
!103 = !DILocation(line: 59, column: 17, scope: !101)
!104 = !DILocation(line: 60, column: 9, scope: !101)
!105 = !DILocation(line: 50, column: 39, scope: !75)
!106 = !DILocation(line: 50, column: 23, scope: !75)
!107 = distinct !{!107, !81, !108}
!108 = !DILocation(line: 61, column: 5, scope: !76)
!109 = !DILocation(line: 68, column: 5, scope: !60)
