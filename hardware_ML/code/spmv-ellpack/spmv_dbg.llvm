; ModuleID = 'spmv.c'
source_filename = "spmv.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: nofree noinline norecurse nounwind uwtable
define dso_local void @ellpack(double* nocapture readonly %host_nzval, i32* nocapture readonly %host_cols, double* nocapture readonly %host_vec, double* nocapture %host_out, double* nocapture readnone %nzval, i32* nocapture readnone %cols, double* nocapture readnone %vec, double* nocapture readnone %out) local_unnamed_addr #0 !dbg !7 {
entry:
  call void @llvm.dbg.value(metadata double* %host_nzval, metadata !19, metadata !DIExpression()), !dbg !36
  call void @llvm.dbg.value(metadata i32* %host_cols, metadata !20, metadata !DIExpression()), !dbg !36
  call void @llvm.dbg.value(metadata double* %host_vec, metadata !21, metadata !DIExpression()), !dbg !36
  call void @llvm.dbg.value(metadata double* %host_out, metadata !22, metadata !DIExpression()), !dbg !36
  call void @llvm.dbg.value(metadata double* %nzval, metadata !23, metadata !DIExpression()), !dbg !36
  call void @llvm.dbg.value(metadata i32* %cols, metadata !24, metadata !DIExpression()), !dbg !36
  call void @llvm.dbg.value(metadata double* %vec, metadata !25, metadata !DIExpression()), !dbg !36
  call void @llvm.dbg.value(metadata double* %out, metadata !26, metadata !DIExpression()), !dbg !36
  call void @llvm.dbg.value(metadata double* %host_nzval, metadata !23, metadata !DIExpression()), !dbg !36
  call void @llvm.dbg.value(metadata i32* %host_cols, metadata !24, metadata !DIExpression()), !dbg !36
  call void @llvm.dbg.value(metadata double* %host_vec, metadata !25, metadata !DIExpression()), !dbg !36
  call void @llvm.dbg.value(metadata double* %host_out, metadata !26, metadata !DIExpression()), !dbg !36
  call void @llvm.dbg.label(metadata !34), !dbg !37
  call void @llvm.dbg.value(metadata i32 0, metadata !27, metadata !DIExpression()), !dbg !36
  br label %for.body, !dbg !38

for.body:                                         ; preds = %for.end, %entry
  %indvars.iv37 = phi i64 [ 0, %entry ], [ %indvars.iv.next38, %for.end ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv37, metadata !27, metadata !DIExpression()), !dbg !36
  %arrayidx = getelementptr inbounds double, double* %host_out, i64 %indvars.iv37, !dbg !39
  %0 = load double, double* %arrayidx, align 8, !dbg !39, !tbaa !40
  call void @llvm.dbg.value(metadata double %0, metadata !30, metadata !DIExpression()), !dbg !44
  call void @llvm.dbg.label(metadata !35), !dbg !45
  call void @llvm.dbg.value(metadata i32 0, metadata !28, metadata !DIExpression()), !dbg !36
  call void @llvm.dbg.value(metadata double %0, metadata !30, metadata !DIExpression()), !dbg !44
  %1 = mul nuw nsw i64 %indvars.iv37, 10, !dbg !46
  br label %for.body3, !dbg !50

for.body3:                                        ; preds = %for.body3, %for.body
  %indvars.iv = phi i64 [ 0, %for.body ], [ %indvars.iv.next, %for.body3 ]
  %sum.034 = phi double [ %0, %for.body ], [ %add13, %for.body3 ]
  call void @llvm.dbg.value(metadata double %sum.034, metadata !30, metadata !DIExpression()), !dbg !44
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !28, metadata !DIExpression()), !dbg !36
  %2 = add nuw nsw i64 %indvars.iv, %1, !dbg !51
  %arrayidx5 = getelementptr inbounds double, double* %host_nzval, i64 %2, !dbg !52
  %3 = load double, double* %arrayidx5, align 8, !dbg !52, !tbaa !40
  %arrayidx9 = getelementptr inbounds i32, i32* %host_cols, i64 %2, !dbg !53
  %4 = load i32, i32* %arrayidx9, align 4, !dbg !53, !tbaa !54
  %idxprom10 = sext i32 %4 to i64, !dbg !56
  %arrayidx11 = getelementptr inbounds double, double* %host_vec, i64 %idxprom10, !dbg !56
  %5 = load double, double* %arrayidx11, align 8, !dbg !56, !tbaa !40
  %mul12 = fmul double %3, %5, !dbg !57
  call void @llvm.dbg.value(metadata double %mul12, metadata !29, metadata !DIExpression()), !dbg !36
  %add13 = fadd double %sum.034, %mul12, !dbg !58
  call void @llvm.dbg.value(metadata double %add13, metadata !30, metadata !DIExpression()), !dbg !44
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !59
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !28, metadata !DIExpression()), !dbg !36
  %exitcond = icmp eq i64 %indvars.iv.next, 10, !dbg !60
  br i1 %exitcond, label %for.end, label %for.body3, !dbg !50, !llvm.loop !61

for.end:                                          ; preds = %for.body3
  call void @llvm.dbg.value(metadata double %add13, metadata !30, metadata !DIExpression()), !dbg !44
  store double %add13, double* %arrayidx, align 8, !dbg !63, !tbaa !40
  %indvars.iv.next38 = add nuw nsw i64 %indvars.iv37, 1, !dbg !64
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next38, metadata !27, metadata !DIExpression()), !dbg !36
  %exitcond40 = icmp eq i64 %indvars.iv.next38, 494, !dbg !65
  br i1 %exitcond40, label %for.end18, label %for.body, !dbg !38, !llvm.loop !66

for.end18:                                        ; preds = %for.end
  ret void, !dbg !68
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

attributes #0 = { nofree noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4, !5}
!llvm.ident = !{!6}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 10.0.1 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "spmv.c", directory: "/home/coco/work/benchmark_codes/spmv-ellpack")
!2 = !{}
!3 = !{i32 7, !"Dwarf Version", i32 4}
!4 = !{i32 2, !"Debug Info Version", i32 3}
!5 = !{i32 1, !"wchar_size", i32 4}
!6 = !{!"clang version 10.0.1 "}
!7 = distinct !DISubprogram(name: "ellpack", scope: !1, file: !1, line: 12, type: !8, scopeLine: 20, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !18)
!8 = !DISubroutineType(types: !9)
!9 = !{null, !10, !12, !10, !10, !10, !12, !10, !10}
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!11 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!12 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !13, size: 64)
!13 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !14, line: 26, baseType: !15)
!14 = !DIFile(filename: "/usr/include/bits/stdint-intn.h", directory: "")
!15 = !DIDerivedType(tag: DW_TAG_typedef, name: "__int32_t", file: !16, line: 41, baseType: !17)
!16 = !DIFile(filename: "/usr/include/bits/types.h", directory: "")
!17 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!18 = !{!19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !34, !35}
!19 = !DILocalVariable(name: "host_nzval", arg: 1, scope: !7, file: !1, line: 12, type: !10)
!20 = !DILocalVariable(name: "host_cols", arg: 2, scope: !7, file: !1, line: 13, type: !12)
!21 = !DILocalVariable(name: "host_vec", arg: 3, scope: !7, file: !1, line: 14, type: !10)
!22 = !DILocalVariable(name: "host_out", arg: 4, scope: !7, file: !1, line: 15, type: !10)
!23 = !DILocalVariable(name: "nzval", arg: 5, scope: !7, file: !1, line: 16, type: !10)
!24 = !DILocalVariable(name: "cols", arg: 6, scope: !7, file: !1, line: 17, type: !12)
!25 = !DILocalVariable(name: "vec", arg: 7, scope: !7, file: !1, line: 18, type: !10)
!26 = !DILocalVariable(name: "out", arg: 8, scope: !7, file: !1, line: 19, type: !10)
!27 = !DILocalVariable(name: "i", scope: !7, file: !1, line: 21, type: !17)
!28 = !DILocalVariable(name: "j", scope: !7, file: !1, line: 21, type: !17)
!29 = !DILocalVariable(name: "Si", scope: !7, file: !1, line: 22, type: !11)
!30 = !DILocalVariable(name: "sum", scope: !31, file: !1, line: 36, type: !11)
!31 = distinct !DILexicalBlock(scope: !32, file: !1, line: 35, column: 37)
!32 = distinct !DILexicalBlock(scope: !33, file: !1, line: 35, column: 17)
!33 = distinct !DILexicalBlock(scope: !7, file: !1, line: 35, column: 17)
!34 = !DILabel(scope: !7, name: "ellpack_1", file: !1, line: 35)
!35 = !DILabel(scope: !31, name: "ellpack_2", file: !1, line: 37)
!36 = !DILocation(line: 0, scope: !7)
!37 = !DILocation(line: 35, column: 5, scope: !7)
!38 = !DILocation(line: 35, column: 17, scope: !33)
!39 = !DILocation(line: 36, column: 20, scope: !31)
!40 = !{!41, !41, i64 0}
!41 = !{!"double", !42, i64 0}
!42 = !{!"omnipotent char", !43, i64 0}
!43 = !{!"Simple C/C++ TBAA"}
!44 = !DILocation(line: 0, scope: !31)
!45 = !DILocation(line: 37, column: 9, scope: !31)
!46 = !DILocation(line: 0, scope: !47)
!47 = distinct !DILexicalBlock(scope: !48, file: !1, line: 37, column: 41)
!48 = distinct !DILexicalBlock(scope: !49, file: !1, line: 37, column: 21)
!49 = distinct !DILexicalBlock(scope: !31, file: !1, line: 37, column: 21)
!50 = !DILocation(line: 37, column: 21, scope: !49)
!51 = !DILocation(line: 38, column: 30, scope: !47)
!52 = !DILocation(line: 38, column: 22, scope: !47)
!53 = !DILocation(line: 38, column: 43, scope: !47)
!54 = !{!55, !55, i64 0}
!55 = !{!"int", !42, i64 0}
!56 = !DILocation(line: 38, column: 39, scope: !47)
!57 = !DILocation(line: 38, column: 37, scope: !47)
!58 = !DILocation(line: 39, column: 21, scope: !47)
!59 = !DILocation(line: 37, column: 37, scope: !48)
!60 = !DILocation(line: 37, column: 32, scope: !48)
!61 = distinct !{!61, !50, !62}
!62 = !DILocation(line: 40, column: 9, scope: !49)
!63 = !DILocation(line: 41, column: 16, scope: !31)
!64 = !DILocation(line: 35, column: 33, scope: !32)
!65 = !DILocation(line: 35, column: 28, scope: !32)
!66 = distinct !{!66, !38, !67}
!67 = !DILocation(line: 42, column: 5, scope: !33)
!68 = !DILocation(line: 47, column: 1, scope: !7)
