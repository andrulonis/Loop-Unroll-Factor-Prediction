; ModuleID = 'pp_scan.c'
source_filename = "pp_scan.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [4 x i8] c"%u\09\00", align 1

; Function Attrs: nofree noinline nounwind uwtable
define dso_local void @print(i32* nocapture readonly %a, i32 %size) local_unnamed_addr #0 !dbg !19 {
entry:
  call void @llvm.dbg.value(metadata i32* %a, metadata !23, metadata !DIExpression()), !dbg !26
  call void @llvm.dbg.value(metadata i32 %size, metadata !24, metadata !DIExpression()), !dbg !26
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !26
  %cmp4 = icmp sgt i32 %size, 0, !dbg !27
  br i1 %cmp4, label %for.body.preheader, label %for.end, !dbg !30

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %size to i64, !dbg !27
  br label %for.body, !dbg !30

for.body:                                         ; preds = %for.body, %for.body.preheader
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !25, metadata !DIExpression()), !dbg !26
  %arrayidx = getelementptr inbounds i32, i32* %a, i64 %indvars.iv, !dbg !31
  %0 = load i32, i32* %arrayidx, align 4, !dbg !31, !tbaa !32
  %call = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %0), !dbg !36
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !37
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !26
  %exitcond = icmp eq i64 %indvars.iv.next, %wide.trip.count, !dbg !27
  br i1 %exitcond, label %for.end, label %for.body, !dbg !30, !llvm.loop !38

for.end:                                          ; preds = %for.body, %entry
  ret void, !dbg !40
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree noinline norecurse nounwind uwtable
define dso_local void @local_scan(i32* nocapture %bucket) local_unnamed_addr #4 !dbg !41 {
entry:
  call void @llvm.dbg.value(metadata i32* %bucket, metadata !45, metadata !DIExpression()), !dbg !52
  call void @llvm.dbg.label(metadata !48), !dbg !53
  call void @llvm.dbg.value(metadata i32 0, metadata !46, metadata !DIExpression()), !dbg !52
  br label %for.cond1.preheader, !dbg !54

for.cond1.preheader:                              ; preds = %for.inc9, %entry
  %indvars.iv25 = phi i64 [ 0, %entry ], [ %indvars.iv.next26, %for.inc9 ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv25, metadata !46, metadata !DIExpression()), !dbg !52
  call void @llvm.dbg.value(metadata i32 1, metadata !47, metadata !DIExpression()), !dbg !52
  %0 = shl nuw nsw i64 %indvars.iv25, 4, !dbg !55
  %scevgep = getelementptr i32, i32* %bucket, i64 %0, !dbg !55
  %1 = shl nsw i64 %indvars.iv25, 4, !dbg !55
  %load_initial = load i32, i32* %scevgep, align 4
  br label %for.body3, !dbg !59

for.body3:                                        ; preds = %for.body3, %for.cond1.preheader
  %store_forwarded = phi i32 [ %load_initial, %for.cond1.preheader ], [ %add8, %for.body3 ]
  %indvars.iv = phi i64 [ 1, %for.cond1.preheader ], [ %indvars.iv.next, %for.body3 ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !47, metadata !DIExpression()), !dbg !52
  %2 = add nuw nsw i64 %indvars.iv, %1, !dbg !60
  %arrayidx7 = getelementptr inbounds i32, i32* %bucket, i64 %2, !dbg !61
  %3 = load i32, i32* %arrayidx7, align 4, !dbg !62, !tbaa !32
  %add8 = add nsw i32 %3, %store_forwarded, !dbg !62
  store i32 %add8, i32* %arrayidx7, align 4, !dbg !62, !tbaa !32
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !63
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !47, metadata !DIExpression()), !dbg !52
  %exitcond = icmp eq i64 %indvars.iv.next, 16, !dbg !64
  br i1 %exitcond, label %for.inc9, label %for.body3, !dbg !59, !llvm.loop !65

for.inc9:                                         ; preds = %for.body3
  %indvars.iv.next26 = add nuw nsw i64 %indvars.iv25, 1, !dbg !67
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next26, metadata !46, metadata !DIExpression()), !dbg !52
  %exitcond28 = icmp eq i64 %indvars.iv.next26, 128, !dbg !68
  br i1 %exitcond28, label %for.end11, label %for.cond1.preheader, !dbg !54, !llvm.loop !69

for.end11:                                        ; preds = %for.inc9
  ret void, !dbg !71
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: nofree noinline norecurse nounwind uwtable
define dso_local void @sum_scan(i32* nocapture %sum, i32* nocapture readonly %bucket) local_unnamed_addr #4 !dbg !72 {
entry:
  call void @llvm.dbg.value(metadata i32* %sum, metadata !76, metadata !DIExpression()), !dbg !80
  call void @llvm.dbg.value(metadata i32* %bucket, metadata !77, metadata !DIExpression()), !dbg !80
  store i32 0, i32* %sum, align 4, !dbg !81, !tbaa !32
  call void @llvm.dbg.label(metadata !79), !dbg !82
  call void @llvm.dbg.value(metadata i32 1, metadata !78, metadata !DIExpression()), !dbg !80
  br label %for.body, !dbg !83

for.body:                                         ; preds = %for.body, %entry
  %store_forwarded = phi i32 [ 0, %entry ], [ %add, %for.body ]
  %indvars.iv = phi i64 [ 1, %entry ], [ %indvars.iv.next, %for.body ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !78, metadata !DIExpression()), !dbg !80
  %0 = shl i64 %indvars.iv, 4, !dbg !85
  %1 = add nsw i64 %0, -1, !dbg !87
  %arrayidx4 = getelementptr inbounds i32, i32* %bucket, i64 %1, !dbg !88
  %2 = load i32, i32* %arrayidx4, align 4, !dbg !88, !tbaa !32
  %add = add nsw i32 %2, %store_forwarded, !dbg !89
  %arrayidx6 = getelementptr inbounds i32, i32* %sum, i64 %indvars.iv, !dbg !90
  store i32 %add, i32* %arrayidx6, align 4, !dbg !91, !tbaa !32
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !92
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !78, metadata !DIExpression()), !dbg !80
  %exitcond = icmp eq i64 %indvars.iv.next, 128, !dbg !93
  br i1 %exitcond, label %for.end, label %for.body, !dbg !83, !llvm.loop !94

for.end:                                          ; preds = %for.body
  ret void, !dbg !96
}

; Function Attrs: nofree noinline norecurse nounwind uwtable
define dso_local void @last_step_scan(i32* nocapture readonly %bucket, i32* nocapture %bucket2, i32* nocapture readonly %sum) local_unnamed_addr #4 !dbg !97 {
entry:
  call void @llvm.dbg.value(metadata i32* %bucket, metadata !101, metadata !DIExpression()), !dbg !110
  call void @llvm.dbg.value(metadata i32* %bucket2, metadata !102, metadata !DIExpression()), !dbg !110
  call void @llvm.dbg.value(metadata i32* %sum, metadata !103, metadata !DIExpression()), !dbg !110
  call void @llvm.dbg.label(metadata !106), !dbg !111
  call void @llvm.dbg.value(metadata i32 0, metadata !104, metadata !DIExpression()), !dbg !110
  br label %for.cond1.preheader, !dbg !112

for.cond1.preheader:                              ; preds = %for.inc11, %entry
  %indvars.iv26 = phi i64 [ 0, %entry ], [ %indvars.iv.next27, %for.inc11 ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv26, metadata !104, metadata !DIExpression()), !dbg !110
  call void @llvm.dbg.value(metadata i32 0, metadata !105, metadata !DIExpression()), !dbg !110
  %0 = shl i64 %indvars.iv26, 4, !dbg !113
  %arrayidx5 = getelementptr inbounds i32, i32* %sum, i64 %indvars.iv26, !dbg !113
  br label %for.body3, !dbg !117

for.body3:                                        ; preds = %for.body3, %for.cond1.preheader
  %indvars.iv = phi i64 [ 0, %for.cond1.preheader ], [ %indvars.iv.next, %for.body3 ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !105, metadata !DIExpression()), !dbg !110
  %1 = add nuw nsw i64 %indvars.iv, %0, !dbg !118
  %arrayidx = getelementptr inbounds i32, i32* %bucket, i64 %1, !dbg !119
  %2 = load i32, i32* %arrayidx, align 4, !dbg !119, !tbaa !32
  %3 = load i32, i32* %arrayidx5, align 4, !dbg !120, !tbaa !32
  %add6 = add nsw i32 %3, %2, !dbg !121
  %arrayidx10 = getelementptr inbounds i32, i32* %bucket2, i64 %1, !dbg !122
  store i32 %add6, i32* %arrayidx10, align 4, !dbg !123, !tbaa !32
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !124
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !105, metadata !DIExpression()), !dbg !110
  %exitcond = icmp eq i64 %indvars.iv.next, 16, !dbg !125
  br i1 %exitcond, label %for.inc11, label %for.body3, !dbg !117, !llvm.loop !126

for.inc11:                                        ; preds = %for.body3
  %indvars.iv.next27 = add nuw nsw i64 %indvars.iv26, 1, !dbg !128
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next27, metadata !104, metadata !DIExpression()), !dbg !110
  %exitcond29 = icmp eq i64 %indvars.iv.next27, 128, !dbg !129
  br i1 %exitcond29, label %for.end13, label %for.cond1.preheader, !dbg !112, !llvm.loop !130

for.end13:                                        ; preds = %for.inc11
  ret void, !dbg !132
}

; Function Attrs: nofree noinline norecurse nounwind uwtable
define dso_local void @pp_scan(i32* nocapture %bucket, i32* nocapture %bucket2, i32* nocapture %sum) local_unnamed_addr #4 !dbg !133 {
entry:
  call void @llvm.dbg.value(metadata i32* %bucket, metadata !135, metadata !DIExpression()), !dbg !138
  call void @llvm.dbg.value(metadata i32* %bucket2, metadata !136, metadata !DIExpression()), !dbg !138
  call void @llvm.dbg.value(metadata i32* %sum, metadata !137, metadata !DIExpression()), !dbg !138
  call void @local_scan(i32* %bucket), !dbg !139
  call void @sum_scan(i32* %sum, i32* %bucket), !dbg !140
  call void @last_step_scan(i32* %bucket, i32* %bucket2, i32* %sum), !dbg !141
  ret void, !dbg !142
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #5 !dbg !143 {
entry:
  %sum = alloca [128 x i32], align 16
  %call = call noalias dereferenceable_or_null(8192) i8* @malloc(i64 8192) #8, !dbg !154
  %0 = bitcast i8* %call to i32*, !dbg !155
  call void @llvm.dbg.value(metadata i32* %0, metadata !146, metadata !DIExpression()), !dbg !156
  %call1 = call noalias dereferenceable_or_null(8192) i8* @malloc(i64 8192) #8, !dbg !157
  %1 = bitcast i8* %call1 to i32*, !dbg !158
  call void @llvm.dbg.value(metadata i32* %1, metadata !147, metadata !DIExpression()), !dbg !156
  %2 = bitcast [128 x i32]* %sum to i8*, !dbg !159
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %2) #8, !dbg !159
  call void @llvm.dbg.declare(metadata [128 x i32]* %sum, metadata !148, metadata !DIExpression()), !dbg !160
  call void @srand(i32 8650341) #8, !dbg !161
  call void @llvm.dbg.value(metadata i32 2048, metadata !152, metadata !DIExpression()), !dbg !156
  call void @llvm.dbg.value(metadata i32 0, metadata !153, metadata !DIExpression()), !dbg !156
  call void @llvm.dbg.value(metadata i32 0, metadata !145, metadata !DIExpression()), !dbg !156
  br label %for.body, !dbg !162

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !145, metadata !DIExpression()), !dbg !156
  %call2 = call i32 @rand() #8, !dbg !164
  %conv = sitofp i32 %call2 to double, !dbg !167
  %div = fdiv double %conv, 0x41DFFFFFFFC00000, !dbg !168
  %mul = fmul double %div, 2.048000e+03, !dbg !169
  %add = fadd double %mul, 0.000000e+00, !dbg !170
  %conv5 = fptosi double %add to i32, !dbg !171
  %arrayidx = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !172
  store i32 %conv5, i32* %arrayidx, align 4, !dbg !173, !tbaa !32
  %call6 = call i32 @rand() #8, !dbg !174
  %conv7 = sitofp i32 %call6 to double, !dbg !175
  %div8 = fdiv double %conv7, 0x41DFFFFFFFC00000, !dbg !176
  %mul11 = fmul double %div8, 2.048000e+03, !dbg !177
  %add13 = fadd double %mul11, 0.000000e+00, !dbg !178
  %conv14 = fptosi double %add13 to i32, !dbg !179
  %arrayidx16 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !180
  store i32 %conv14, i32* %arrayidx16, align 4, !dbg !181, !tbaa !32
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !182
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !145, metadata !DIExpression()), !dbg !156
  %exitcond = icmp eq i64 %indvars.iv.next, 2048, !dbg !183
  br i1 %exitcond, label %for.end, label %for.body, !dbg !162, !llvm.loop !184

for.end:                                          ; preds = %for.body
  call void @print(i32* %0, i32 1), !dbg !186
  %putchar = call i32 @putchar(i32 10), !dbg !187
  %arraydecay = getelementptr inbounds [128 x i32], [128 x i32]* %sum, i64 0, i64 0, !dbg !188
  call void @pp_scan(i32* %0, i32* %1, i32* nonnull %arraydecay), !dbg !189
  call void @print(i32* %0, i32 2), !dbg !190
  %putchar37 = call i32 @putchar(i32 10), !dbg !191
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %2) #8, !dbg !192
  ret i32 0, !dbg !193
}

; Function Attrs: nofree nounwind
declare dso_local noalias i8* @malloc(i64) local_unnamed_addr #3

; Function Attrs: nounwind
declare !dbg !6 dso_local void @srand(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare !dbg !12 dso_local i32 @rand() local_unnamed_addr #6

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

; Function Attrs: nofree nounwind
declare i32 @putchar(i32) local_unnamed_addr #7

attributes #0 = { nofree noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind }
attributes #8 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!15, !16, !17}
!llvm.ident = !{!18}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 10.0.1 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "pp_scan.c", directory: "/home/coco/work/benchmark_codes/pp_scan")
!2 = !{}
!3 = !{!4, !6, !5, !11, !12}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64)
!5 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!6 = !DISubprogram(name: "srand", scope: !7, file: !7, line: 456, type: !8, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !2)
!7 = !DIFile(filename: "/usr/include/stdlib.h", directory: "")
!8 = !DISubroutineType(types: !9)
!9 = !{null, !10}
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!12 = !DISubprogram(name: "rand", scope: !7, file: !7, line: 454, type: !13, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !2)
!13 = !DISubroutineType(types: !14)
!14 = !{!5}
!15 = !{i32 7, !"Dwarf Version", i32 4}
!16 = !{i32 2, !"Debug Info Version", i32 3}
!17 = !{i32 1, !"wchar_size", i32 4}
!18 = !{!"clang version 10.0.1 "}
!19 = distinct !DISubprogram(name: "print", scope: !1, file: !1, line: 7, type: !20, scopeLine: 8, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !22)
!20 = !DISubroutineType(types: !21)
!21 = !{null, !4, !5}
!22 = !{!23, !24, !25}
!23 = !DILocalVariable(name: "a", arg: 1, scope: !19, file: !1, line: 7, type: !4)
!24 = !DILocalVariable(name: "size", arg: 2, scope: !19, file: !1, line: 7, type: !5)
!25 = !DILocalVariable(name: "i", scope: !19, file: !1, line: 9, type: !5)
!26 = !DILocation(line: 0, scope: !19)
!27 = !DILocation(line: 10, column: 16, scope: !28)
!28 = distinct !DILexicalBlock(scope: !29, file: !1, line: 10, column: 2)
!29 = distinct !DILexicalBlock(scope: !19, file: !1, line: 10, column: 2)
!30 = !DILocation(line: 10, column: 2, scope: !29)
!31 = !DILocation(line: 11, column: 18, scope: !28)
!32 = !{!33, !33, i64 0}
!33 = !{!"int", !34, i64 0}
!34 = !{!"omnipotent char", !35, i64 0}
!35 = !{!"Simple C/C++ TBAA"}
!36 = !DILocation(line: 11, column: 3, scope: !28)
!37 = !DILocation(line: 10, column: 25, scope: !28)
!38 = distinct !{!38, !30, !39}
!39 = !DILocation(line: 11, column: 22, scope: !29)
!40 = !DILocation(line: 12, column: 1, scope: !19)
!41 = distinct !DISubprogram(name: "local_scan", scope: !1, file: !1, line: 15, type: !42, scopeLine: 16, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !44)
!42 = !DISubroutineType(types: !43)
!43 = !{null, !4}
!44 = !{!45, !46, !47, !48, !49}
!45 = !DILocalVariable(name: "bucket", arg: 1, scope: !41, file: !1, line: 15, type: !4)
!46 = !DILocalVariable(name: "radixID", scope: !41, file: !1, line: 17, type: !5)
!47 = !DILocalVariable(name: "i", scope: !41, file: !1, line: 17, type: !5)
!48 = !DILabel(scope: !41, name: "loop1_outer", file: !1, line: 18)
!49 = !DILabel(scope: !50, name: "loop1_inner", file: !1, line: 19)
!50 = distinct !DILexicalBlock(scope: !51, file: !1, line: 18, column: 15)
!51 = distinct !DILexicalBlock(scope: !41, file: !1, line: 18, column: 15)
!52 = !DILocation(line: 0, scope: !41)
!53 = !DILocation(line: 18, column: 3, scope: !41)
!54 = !DILocation(line: 18, column: 15, scope: !51)
!55 = !DILocation(line: 0, scope: !56)
!56 = distinct !DILexicalBlock(scope: !57, file: !1, line: 20, column: 5)
!57 = distinct !DILexicalBlock(scope: !58, file: !1, line: 19, column: 17)
!58 = distinct !DILexicalBlock(scope: !50, file: !1, line: 19, column: 17)
!59 = !DILocation(line: 19, column: 17, scope: !58)
!60 = !DILocation(line: 21, column: 71, scope: !56)
!61 = !DILocation(line: 21, column: 7, scope: !56)
!62 = !DILocation(line: 21, column: 40, scope: !56)
!63 = !DILocation(line: 19, column: 45, scope: !57)
!64 = !DILocation(line: 19, column: 31, scope: !57)
!65 = distinct !{!65, !59, !66}
!66 = !DILocation(line: 22, column: 5, scope: !58)
!67 = !DILocation(line: 18, column: 55, scope: !50)
!68 = !DILocation(line: 18, column: 41, scope: !50)
!69 = distinct !{!69, !54, !70}
!70 = !DILocation(line: 22, column: 5, scope: !51)
!71 = !DILocation(line: 23, column: 1, scope: !41)
!72 = distinct !DISubprogram(name: "sum_scan", scope: !1, file: !1, line: 25, type: !73, scopeLine: 26, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !75)
!73 = !DISubroutineType(types: !74)
!74 = !{null, !4, !4}
!75 = !{!76, !77, !78, !79}
!76 = !DILocalVariable(name: "sum", arg: 1, scope: !72, file: !1, line: 25, type: !4)
!77 = !DILocalVariable(name: "bucket", arg: 2, scope: !72, file: !1, line: 25, type: !4)
!78 = !DILocalVariable(name: "radixID", scope: !72, file: !1, line: 27, type: !5)
!79 = !DILabel(scope: !72, name: "loop2", file: !1, line: 29)
!80 = !DILocation(line: 0, scope: !72)
!81 = !DILocation(line: 28, column: 10, scope: !72)
!82 = !DILocation(line: 29, column: 3, scope: !72)
!83 = !DILocation(line: 29, column: 9, scope: !84)
!84 = distinct !DILexicalBlock(scope: !72, file: !1, line: 29, column: 9)
!85 = !DILocation(line: 30, column: 53, scope: !86)
!86 = distinct !DILexicalBlock(scope: !84, file: !1, line: 29, column: 9)
!87 = !DILocation(line: 30, column: 66, scope: !86)
!88 = !DILocation(line: 30, column: 38, scope: !86)
!89 = !DILocation(line: 30, column: 36, scope: !86)
!90 = !DILocation(line: 30, column: 5, scope: !86)
!91 = !DILocation(line: 30, column: 18, scope: !86)
!92 = !DILocation(line: 29, column: 49, scope: !86)
!93 = !DILocation(line: 29, column: 35, scope: !86)
!94 = distinct !{!94, !83, !95}
!95 = !DILocation(line: 30, column: 69, scope: !84)
!96 = !DILocation(line: 31, column: 1, scope: !72)
!97 = distinct !DISubprogram(name: "last_step_scan", scope: !1, file: !1, line: 33, type: !98, scopeLine: 34, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !100)
!98 = !DISubroutineType(types: !99)
!99 = !{null, !4, !4, !4}
!100 = !{!101, !102, !103, !104, !105, !106, !107}
!101 = !DILocalVariable(name: "bucket", arg: 1, scope: !97, file: !1, line: 33, type: !4)
!102 = !DILocalVariable(name: "bucket2", arg: 2, scope: !97, file: !1, line: 33, type: !4)
!103 = !DILocalVariable(name: "sum", arg: 3, scope: !97, file: !1, line: 33, type: !4)
!104 = !DILocalVariable(name: "radixID", scope: !97, file: !1, line: 35, type: !5)
!105 = !DILocalVariable(name: "i", scope: !97, file: !1, line: 35, type: !5)
!106 = !DILabel(scope: !97, name: "loop3_outer", file: !1, line: 36)
!107 = !DILabel(scope: !108, name: "loop3_inner", file: !1, line: 37)
!108 = distinct !DILexicalBlock(scope: !109, file: !1, line: 36, column: 15)
!109 = distinct !DILexicalBlock(scope: !97, file: !1, line: 36, column: 15)
!110 = !DILocation(line: 0, scope: !97)
!111 = !DILocation(line: 36, column: 3, scope: !97)
!112 = !DILocation(line: 36, column: 15, scope: !109)
!113 = !DILocation(line: 0, scope: !114)
!114 = distinct !DILexicalBlock(scope: !115, file: !1, line: 38, column: 5)
!115 = distinct !DILexicalBlock(scope: !116, file: !1, line: 37, column: 17)
!116 = distinct !DILexicalBlock(scope: !108, file: !1, line: 37, column: 17)
!117 = !DILocation(line: 37, column: 17, scope: !116)
!118 = !DILocation(line: 40, column: 37, scope: !114)
!119 = !DILocation(line: 40, column: 9, scope: !114)
!120 = !DILocation(line: 40, column: 45, scope: !114)
!121 = !DILocation(line: 40, column: 43, scope: !114)
!122 = !DILocation(line: 39, column: 7, scope: !114)
!123 = !DILocation(line: 39, column: 41, scope: !114)
!124 = !DILocation(line: 37, column: 45, scope: !115)
!125 = !DILocation(line: 37, column: 31, scope: !115)
!126 = distinct !{!126, !117, !127}
!127 = !DILocation(line: 41, column: 5, scope: !116)
!128 = !DILocation(line: 36, column: 55, scope: !108)
!129 = !DILocation(line: 36, column: 41, scope: !108)
!130 = distinct !{!130, !112, !131}
!131 = !DILocation(line: 41, column: 5, scope: !109)
!132 = !DILocation(line: 43, column: 1, scope: !97)
!133 = distinct !DISubprogram(name: "pp_scan", scope: !1, file: !1, line: 44, type: !98, scopeLine: 46, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !134)
!134 = !{!135, !136, !137}
!135 = !DILocalVariable(name: "bucket", arg: 1, scope: !133, file: !1, line: 44, type: !4)
!136 = !DILocalVariable(name: "bucket2", arg: 2, scope: !133, file: !1, line: 44, type: !4)
!137 = !DILocalVariable(name: "sum", arg: 3, scope: !133, file: !1, line: 45, type: !4)
!138 = !DILocation(line: 0, scope: !133)
!139 = !DILocation(line: 51, column: 3, scope: !133)
!140 = !DILocation(line: 52, column: 3, scope: !133)
!141 = !DILocation(line: 53, column: 3, scope: !133)
!142 = !DILocation(line: 58, column: 1, scope: !133)
!143 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 60, type: !13, scopeLine: 61, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !144)
!144 = !{!145, !146, !147, !148, !152, !153}
!145 = !DILocalVariable(name: "i", scope: !143, file: !1, line: 62, type: !5)
!146 = !DILocalVariable(name: "bucket", scope: !143, file: !1, line: 63, type: !4)
!147 = !DILocalVariable(name: "bucket2", scope: !143, file: !1, line: 64, type: !4)
!148 = !DILocalVariable(name: "sum", scope: !143, file: !1, line: 67, type: !149)
!149 = !DICompositeType(tag: DW_TAG_array_type, baseType: !5, size: 4096, elements: !150)
!150 = !{!151}
!151 = !DISubrange(count: 128)
!152 = !DILocalVariable(name: "max", scope: !143, file: !1, line: 68, type: !5)
!153 = !DILocalVariable(name: "min", scope: !143, file: !1, line: 68, type: !5)
!154 = !DILocation(line: 65, column: 19, scope: !143)
!155 = !DILocation(line: 65, column: 12, scope: !143)
!156 = !DILocation(line: 0, scope: !143)
!157 = !DILocation(line: 66, column: 20, scope: !143)
!158 = !DILocation(line: 66, column: 13, scope: !143)
!159 = !DILocation(line: 67, column: 3, scope: !143)
!160 = !DILocation(line: 67, column: 7, scope: !143)
!161 = !DILocation(line: 69, column: 2, scope: !143)
!162 = !DILocation(line: 72, column: 3, scope: !163)
!163 = distinct !DILexicalBlock(scope: !143, file: !1, line: 72, column: 3)
!164 = !DILocation(line: 73, column: 34, scope: !165)
!165 = distinct !DILexicalBlock(scope: !166, file: !1, line: 72, column: 21)
!166 = distinct !DILexicalBlock(scope: !163, file: !1, line: 72, column: 3)
!167 = !DILocation(line: 73, column: 25, scope: !165)
!168 = !DILocation(line: 73, column: 41, scope: !165)
!169 = !DILocation(line: 73, column: 55, scope: !165)
!170 = !DILocation(line: 73, column: 67, scope: !165)
!171 = !DILocation(line: 73, column: 17, scope: !165)
!172 = !DILocation(line: 73, column: 5, scope: !165)
!173 = !DILocation(line: 73, column: 15, scope: !165)
!174 = !DILocation(line: 74, column: 35, scope: !165)
!175 = !DILocation(line: 74, column: 26, scope: !165)
!176 = !DILocation(line: 74, column: 42, scope: !165)
!177 = !DILocation(line: 74, column: 56, scope: !165)
!178 = !DILocation(line: 74, column: 68, scope: !165)
!179 = !DILocation(line: 74, column: 18, scope: !165)
!180 = !DILocation(line: 74, column: 5, scope: !165)
!181 = !DILocation(line: 74, column: 16, scope: !165)
!182 = !DILocation(line: 72, column: 18, scope: !166)
!183 = !DILocation(line: 72, column: 13, scope: !166)
!184 = distinct !{!184, !162, !185}
!185 = !DILocation(line: 75, column: 3, scope: !163)
!186 = !DILocation(line: 77, column: 2, scope: !143)
!187 = !DILocation(line: 78, column: 2, scope: !143)
!188 = !DILocation(line: 83, column: 27, scope: !143)
!189 = !DILocation(line: 83, column: 2, scope: !143)
!190 = !DILocation(line: 88, column: 2, scope: !143)
!191 = !DILocation(line: 89, column: 2, scope: !143)
!192 = !DILocation(line: 92, column: 1, scope: !143)
!193 = !DILocation(line: 91, column: 2, scope: !143)
