; ModuleID = 'spmv.c'
source_filename = "spmv.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: nofree noinline norecurse nounwind uwtable
define dso_local void @spmv(double* nocapture readonly %host_val, i32* nocapture readonly %host_cols, i32* nocapture readonly %host_rowDelimiters, double* nocapture readonly %host_vec, double* nocapture %host_out, double* nocapture readnone %val, i32* nocapture readnone %cols, i32* nocapture readnone %rowDelimiters, double* nocapture readnone %vec, double* nocapture readnone %out) local_unnamed_addr #0 !dbg !7 {
entry:
  call void @llvm.dbg.value(metadata double* %host_val, metadata !19, metadata !DIExpression()), !dbg !40
  call void @llvm.dbg.value(metadata i32* %host_cols, metadata !20, metadata !DIExpression()), !dbg !40
  call void @llvm.dbg.value(metadata i32* %host_rowDelimiters, metadata !21, metadata !DIExpression()), !dbg !40
  call void @llvm.dbg.value(metadata double* %host_vec, metadata !22, metadata !DIExpression()), !dbg !40
  call void @llvm.dbg.value(metadata double* %host_out, metadata !23, metadata !DIExpression()), !dbg !40
  call void @llvm.dbg.value(metadata double* %val, metadata !24, metadata !DIExpression()), !dbg !40
  call void @llvm.dbg.value(metadata i32* %cols, metadata !25, metadata !DIExpression()), !dbg !40
  call void @llvm.dbg.value(metadata i32* %rowDelimiters, metadata !26, metadata !DIExpression()), !dbg !40
  call void @llvm.dbg.value(metadata double* %vec, metadata !27, metadata !DIExpression()), !dbg !40
  call void @llvm.dbg.value(metadata double* %out, metadata !28, metadata !DIExpression()), !dbg !40
  call void @llvm.dbg.value(metadata i32* %host_rowDelimiters, metadata !26, metadata !DIExpression()), !dbg !40
  call void @llvm.dbg.value(metadata double* %host_vec, metadata !27, metadata !DIExpression()), !dbg !40
  call void @llvm.dbg.value(metadata double* %host_val, metadata !24, metadata !DIExpression()), !dbg !40
  call void @llvm.dbg.value(metadata i32* %host_cols, metadata !25, metadata !DIExpression()), !dbg !40
  call void @llvm.dbg.value(metadata double* %host_out, metadata !28, metadata !DIExpression()), !dbg !40
  call void @llvm.dbg.label(metadata !38), !dbg !41
  call void @llvm.dbg.value(metadata i32 0, metadata !29, metadata !DIExpression()), !dbg !40
  br label %for.body, !dbg !42

for.body:                                         ; preds = %for.end, %entry
  %indvars.iv37 = phi i64 [ 0, %entry ], [ %indvars.iv.next38, %for.end ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv37, metadata !29, metadata !DIExpression()), !dbg !40
  call void @llvm.dbg.value(metadata double 0.000000e+00, metadata !31, metadata !DIExpression()), !dbg !40
  call void @llvm.dbg.value(metadata double 0.000000e+00, metadata !32, metadata !DIExpression()), !dbg !40
  %arrayidx = getelementptr inbounds i32, i32* %host_rowDelimiters, i64 %indvars.iv37, !dbg !43
  %0 = load i32, i32* %arrayidx, align 4, !dbg !43, !tbaa !44
  call void @llvm.dbg.value(metadata i32 %0, metadata !33, metadata !DIExpression()), !dbg !48
  %indvars.iv.next38 = add nuw nsw i64 %indvars.iv37, 1, !dbg !49
  %arrayidx2 = getelementptr inbounds i32, i32* %host_rowDelimiters, i64 %indvars.iv.next38, !dbg !50
  %1 = load i32, i32* %arrayidx2, align 4, !dbg !50, !tbaa !44
  call void @llvm.dbg.value(metadata i32 %1, metadata !37, metadata !DIExpression()), !dbg !48
  call void @llvm.dbg.label(metadata !39), !dbg !51
  call void @llvm.dbg.value(metadata i32 %0, metadata !30, metadata !DIExpression()), !dbg !40
  call void @llvm.dbg.value(metadata double 0.000000e+00, metadata !31, metadata !DIExpression()), !dbg !40
  %cmp433 = icmp slt i32 %0, %1, !dbg !52
  br i1 %cmp433, label %for.body5.preheader, label %for.end, !dbg !55

for.body5.preheader:                              ; preds = %for.body
  %2 = sext i32 %0 to i64, !dbg !55
  %wide.trip.count = sext i32 %1 to i64, !dbg !52
  br label %for.body5, !dbg !55

for.body5:                                        ; preds = %for.body5, %for.body5.preheader
  %indvars.iv = phi i64 [ %2, %for.body5.preheader ], [ %indvars.iv.next, %for.body5 ]
  %sum.035 = phi double [ 0.000000e+00, %for.body5.preheader ], [ %add12, %for.body5 ]
  call void @llvm.dbg.value(metadata double %sum.035, metadata !31, metadata !DIExpression()), !dbg !40
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !30, metadata !DIExpression()), !dbg !40
  %arrayidx7 = getelementptr inbounds double, double* %host_val, i64 %indvars.iv, !dbg !56
  %3 = load double, double* %arrayidx7, align 8, !dbg !56, !tbaa !58
  %arrayidx9 = getelementptr inbounds i32, i32* %host_cols, i64 %indvars.iv, !dbg !60
  %4 = load i32, i32* %arrayidx9, align 4, !dbg !60, !tbaa !44
  %idxprom10 = sext i32 %4 to i64, !dbg !61
  %arrayidx11 = getelementptr inbounds double, double* %host_vec, i64 %idxprom10, !dbg !61
  %5 = load double, double* %arrayidx11, align 8, !dbg !61, !tbaa !58
  %mul = fmul double %3, %5, !dbg !62
  call void @llvm.dbg.value(metadata double %mul, metadata !32, metadata !DIExpression()), !dbg !40
  %add12 = fadd double %sum.035, %mul, !dbg !63
  call void @llvm.dbg.value(metadata double %add12, metadata !31, metadata !DIExpression()), !dbg !40
  %indvars.iv.next = add nsw i64 %indvars.iv, 1, !dbg !64
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !30, metadata !DIExpression()), !dbg !40
  %exitcond = icmp eq i64 %indvars.iv.next, %wide.trip.count, !dbg !52
  br i1 %exitcond, label %for.end, label %for.body5, !dbg !55, !llvm.loop !65

for.end:                                          ; preds = %for.body5, %for.body
  %sum.0.lcssa = phi double [ 0.000000e+00, %for.body ], [ %add12, %for.body5 ], !dbg !48
  call void @llvm.dbg.value(metadata double %sum.0.lcssa, metadata !31, metadata !DIExpression()), !dbg !40
  %arrayidx14 = getelementptr inbounds double, double* %host_out, i64 %indvars.iv37, !dbg !67
  store double %sum.0.lcssa, double* %arrayidx14, align 8, !dbg !68, !tbaa !58
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next38, metadata !29, metadata !DIExpression()), !dbg !40
  %exitcond39 = icmp eq i64 %indvars.iv.next38, 494, !dbg !69
  br i1 %exitcond39, label %for.end17, label %for.body, !dbg !42, !llvm.loop !70

for.end17:                                        ; preds = %for.end
  ret void, !dbg !72
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

attributes #0 = { nofree noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4, !5}
!llvm.ident = !{!6}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 10.0.1 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "spmv.c", directory: "/home/coco/work/benchmark_codes/spmv-crs")
!2 = !{}
!3 = !{i32 7, !"Dwarf Version", i32 4}
!4 = !{i32 2, !"Debug Info Version", i32 3}
!5 = !{i32 1, !"wchar_size", i32 4}
!6 = !{!"clang version 10.0.1 "}
!7 = distinct !DISubprogram(name: "spmv", scope: !1, file: !1, line: 12, type: !8, scopeLine: 21, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !18)
!8 = !DISubroutineType(types: !9)
!9 = !{null, !10, !12, !12, !10, !10, !10, !12, !12, !10, !10}
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!11 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!12 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !13, size: 64)
!13 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !14, line: 26, baseType: !15)
!14 = !DIFile(filename: "/usr/include/bits/stdint-intn.h", directory: "")
!15 = !DIDerivedType(tag: DW_TAG_typedef, name: "__int32_t", file: !16, line: 41, baseType: !17)
!16 = !DIFile(filename: "/usr/include/bits/types.h", directory: "")
!17 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!18 = !{!19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !37, !38, !39}
!19 = !DILocalVariable(name: "host_val", arg: 1, scope: !7, file: !1, line: 12, type: !10)
!20 = !DILocalVariable(name: "host_cols", arg: 2, scope: !7, file: !1, line: 13, type: !12)
!21 = !DILocalVariable(name: "host_rowDelimiters", arg: 3, scope: !7, file: !1, line: 14, type: !12)
!22 = !DILocalVariable(name: "host_vec", arg: 4, scope: !7, file: !1, line: 15, type: !10)
!23 = !DILocalVariable(name: "host_out", arg: 5, scope: !7, file: !1, line: 16, type: !10)
!24 = !DILocalVariable(name: "val", arg: 6, scope: !7, file: !1, line: 17, type: !10)
!25 = !DILocalVariable(name: "cols", arg: 7, scope: !7, file: !1, line: 18, type: !12)
!26 = !DILocalVariable(name: "rowDelimiters", arg: 8, scope: !7, file: !1, line: 19, type: !12)
!27 = !DILocalVariable(name: "vec", arg: 9, scope: !7, file: !1, line: 20, type: !10)
!28 = !DILocalVariable(name: "out", arg: 10, scope: !7, file: !1, line: 21, type: !10)
!29 = !DILocalVariable(name: "i", scope: !7, file: !1, line: 22, type: !17)
!30 = !DILocalVariable(name: "j", scope: !7, file: !1, line: 22, type: !17)
!31 = !DILocalVariable(name: "sum", scope: !7, file: !1, line: 23, type: !11)
!32 = !DILocalVariable(name: "Si", scope: !7, file: !1, line: 23, type: !11)
!33 = !DILocalVariable(name: "tmp_begin", scope: !34, file: !1, line: 40, type: !17)
!34 = distinct !DILexicalBlock(scope: !35, file: !1, line: 38, column: 36)
!35 = distinct !DILexicalBlock(scope: !36, file: !1, line: 38, column: 14)
!36 = distinct !DILexicalBlock(scope: !7, file: !1, line: 38, column: 14)
!37 = !DILocalVariable(name: "tmp_end", scope: !34, file: !1, line: 41, type: !17)
!38 = !DILabel(scope: !7, name: "spmv_1", file: !1, line: 38)
!39 = !DILabel(scope: !34, name: "spmv_2", file: !1, line: 42)
!40 = !DILocation(line: 0, scope: !7)
!41 = !DILocation(line: 38, column: 5, scope: !7)
!42 = !DILocation(line: 38, column: 14, scope: !36)
!43 = !DILocation(line: 40, column: 25, scope: !34)
!44 = !{!45, !45, i64 0}
!45 = !{!"int", !46, i64 0}
!46 = !{!"omnipotent char", !47, i64 0}
!47 = !{!"Simple C/C++ TBAA"}
!48 = !DILocation(line: 0, scope: !34)
!49 = !DILocation(line: 41, column: 38, scope: !34)
!50 = !DILocation(line: 41, column: 23, scope: !34)
!51 = !DILocation(line: 42, column: 9, scope: !34)
!52 = !DILocation(line: 42, column: 40, scope: !53)
!53 = distinct !DILexicalBlock(scope: !54, file: !1, line: 42, column: 18)
!54 = distinct !DILexicalBlock(scope: !34, file: !1, line: 42, column: 18)
!55 = !DILocation(line: 42, column: 18, scope: !54)
!56 = !DILocation(line: 43, column: 18, scope: !57)
!57 = distinct !DILexicalBlock(scope: !53, file: !1, line: 42, column: 55)
!58 = !{!59, !59, i64 0}
!59 = !{!"double", !46, i64 0}
!60 = !DILocation(line: 43, column: 31, scope: !57)
!61 = !DILocation(line: 43, column: 27, scope: !57)
!62 = !DILocation(line: 43, column: 25, scope: !57)
!63 = !DILocation(line: 44, column: 23, scope: !57)
!64 = !DILocation(line: 42, column: 52, scope: !53)
!65 = distinct !{!65, !55, !66}
!66 = !DILocation(line: 45, column: 9, scope: !54)
!67 = !DILocation(line: 46, column: 9, scope: !34)
!68 = !DILocation(line: 46, column: 16, scope: !34)
!69 = !DILocation(line: 38, column: 27, scope: !35)
!70 = distinct !{!70, !42, !71}
!71 = !DILocation(line: 47, column: 5, scope: !36)
!72 = !DILocation(line: 51, column: 1, scope: !7)
