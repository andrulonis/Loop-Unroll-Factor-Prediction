; ModuleID = 'bfs.c'
source_filename = "bfs.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.node_t_struct = type { i64, i64 }
%struct.edge_t_struct = type { i64 }

; Function Attrs: noinline nounwind uwtable
define dso_local void @bfs(%struct.node_t_struct* nocapture readonly %host_nodes, %struct.edge_t_struct* nocapture readonly %host_edges, i8* nocapture %host_level, i64* nocapture %host_level_counts, %struct.node_t_struct* nocapture readnone %nodes, %struct.edge_t_struct* nocapture readnone %edges, i8* nocapture readnone %level, i64* nocapture readnone %level_counts, i64 %starting_node) local_unnamed_addr #0 {
entry:
  %host_level_counts101 = bitcast i64* %host_level_counts to i8*
  %queue = alloca [256 x i64], align 16
  %0 = bitcast [256 x i64]* %queue to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %0) #2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(80) %host_level_counts101, i8 0, i64 80, i1 false)
  %arrayidx1 = getelementptr inbounds i8, i8* %host_level, i64 %starting_node
  store i8 0, i8* %arrayidx1, align 1, !tbaa !2
  store i64 1, i64* %host_level_counts, align 8, !tbaa !5
  %arrayidx4 = getelementptr inbounds [256 x i64], [256 x i64]* %queue, i64 0, i64 0
  store i64 %starting_node, i64* %arrayidx4, align 16, !tbaa !5
  br label %for.body7

for.body7:                                        ; preds = %for.end50, %entry
  %q_in.097 = phi i64 [ 2, %entry ], [ %q_in.1.lcssa, %for.end50 ]
  %q_out.095 = phi i64 [ 0, %entry ], [ %rem17, %for.end50 ]
  %dummy.094 = phi i64 [ 0, %entry ], [ %inc52, %for.end50 ]
  %cmp8 = icmp ugt i64 %q_in.097, %q_out.095
  br i1 %cmp8, label %cond.true9, label %cond.false12

cond.true9:                                       ; preds = %for.body7
  %add10 = add nuw nsw i64 %q_out.095, 1
  %cmp11 = icmp eq i64 %q_in.097, %add10
  br i1 %cmp11, label %for.end53, label %if.end

cond.false12:                                     ; preds = %for.body7
  %cmp13 = icmp eq i64 %q_in.097, 0
  %cmp14 = icmp eq i64 %q_out.095, 255
  %or.cond = and i1 %cmp14, %cmp13
  br i1 %or.cond, label %for.end53, label %if.end

if.end:                                           ; preds = %cond.false12, %cond.true9
  %arrayidx15 = getelementptr inbounds [256 x i64], [256 x i64]* %queue, i64 0, i64 %q_out.095
  %1 = load i64, i64* %arrayidx15, align 8, !tbaa !5
  %add16 = add nuw nsw i64 %q_out.095, 1
  %rem17 = and i64 %add16, 255
  %edge_begin = getelementptr inbounds %struct.node_t_struct, %struct.node_t_struct* %host_nodes, i64 %1, i32 0
  %2 = load i64, i64* %edge_begin, align 8, !tbaa !7
  %edge_end = getelementptr inbounds %struct.node_t_struct, %struct.node_t_struct* %host_nodes, i64 %1, i32 1
  %3 = load i64, i64* %edge_end, align 8, !tbaa !9
  %cmp2191 = icmp ult i64 %2, %3
  br i1 %cmp2191, label %for.body22.lr.ph, label %for.end50

for.body22.lr.ph:                                 ; preds = %if.end
  %arrayidx29 = getelementptr inbounds i8, i8* %host_level, i64 %1
  br label %for.body22

for.body22:                                       ; preds = %if.end47, %for.body22.lr.ph
  %q_in.193 = phi i64 [ %q_in.097, %for.body22.lr.ph ], [ %q_in.2, %if.end47 ]
  %e.092 = phi i64 [ %2, %for.body22.lr.ph ], [ %inc49, %if.end47 ]
  %dst = getelementptr inbounds %struct.edge_t_struct, %struct.edge_t_struct* %host_edges, i64 %e.092, i32 0
  %4 = load i64, i64* %dst, align 8, !tbaa !10
  %arrayidx24 = getelementptr inbounds i8, i8* %host_level, i64 %4
  %5 = load i8, i8* %arrayidx24, align 1, !tbaa !2
  %cmp25 = icmp eq i8 %5, 127
  br i1 %cmp25, label %if.then27, label %if.end47

if.then27:                                        ; preds = %for.body22
  %6 = load i8, i8* %arrayidx29, align 1, !tbaa !2
  %add31 = add i8 %6, 1
  store i8 %add31, i8* %arrayidx24, align 1, !tbaa !2
  %idxprom34 = sext i8 %add31 to i64
  %arrayidx35 = getelementptr inbounds i64, i64* %host_level_counts, i64 %idxprom34
  %7 = load i64, i64* %arrayidx35, align 8, !tbaa !5
  %inc36 = add i64 %7, 1
  store i64 %inc36, i64* %arrayidx35, align 8, !tbaa !5
  %cmp37 = icmp eq i64 %q_in.193, 0
  %sub41 = add i64 %q_in.193, -1
  %cond43 = select i1 %cmp37, i64 255, i64 %sub41
  %arrayidx44 = getelementptr inbounds [256 x i64], [256 x i64]* %queue, i64 0, i64 %cond43
  store i64 %4, i64* %arrayidx44, align 8, !tbaa !5
  %add45 = add i64 %q_in.193, 1
  %rem46 = and i64 %add45, 255
  br label %if.end47

if.end47:                                         ; preds = %if.then27, %for.body22
  %q_in.2 = phi i64 [ %rem46, %if.then27 ], [ %q_in.193, %for.body22 ]
  %inc49 = add nuw i64 %e.092, 1
  %exitcond = icmp eq i64 %inc49, %3
  br i1 %exitcond, label %for.end50, label %for.body22

for.end50:                                        ; preds = %if.end47, %if.end
  %q_in.1.lcssa = phi i64 [ %q_in.097, %if.end ], [ %q_in.2, %if.end47 ]
  %inc52 = add nuw nsw i64 %dummy.094, 1
  %exitcond99 = icmp eq i64 %inc52, 256
  br i1 %exitcond99, label %for.end53, label %for.body7

for.end53:                                        ; preds = %for.end50, %cond.true9, %cond.false12
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %0) #2
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}
!5 = !{!6, !6, i64 0}
!6 = !{!"long", !3, i64 0}
!7 = !{!8, !6, i64 0}
!8 = !{!"node_t_struct", !6, i64 0, !6, i64 8}
!9 = !{!8, !6, i64 8}
!10 = !{!11, !6, i64 0}
!11 = !{!"edge_t_struct", !6, i64 0}
