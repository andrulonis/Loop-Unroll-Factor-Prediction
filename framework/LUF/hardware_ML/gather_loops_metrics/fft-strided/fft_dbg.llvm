; ModuleID = 'fft.c'
source_filename = "fft.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: nofree noinline norecurse nounwind uwtable
define dso_local void @fft(double* nocapture %host_real, double* nocapture %host_img, double* nocapture readonly %host_real_twid, double* nocapture readonly %host_img_twid, double* nocapture readnone %real, double* nocapture readnone %img, double* nocapture readnone %real_twid, double* nocapture readnone %img_twid) local_unnamed_addr #0 !dbg !7 {
entry:
  call void @llvm.dbg.value(metadata double* %host_real, metadata !13, metadata !DIExpression()), !dbg !33
  call void @llvm.dbg.value(metadata double* %host_img, metadata !14, metadata !DIExpression()), !dbg !33
  call void @llvm.dbg.value(metadata double* %host_real_twid, metadata !15, metadata !DIExpression()), !dbg !33
  call void @llvm.dbg.value(metadata double* %host_img_twid, metadata !16, metadata !DIExpression()), !dbg !33
  call void @llvm.dbg.value(metadata double* %real, metadata !17, metadata !DIExpression()), !dbg !33
  call void @llvm.dbg.value(metadata double* %img, metadata !18, metadata !DIExpression()), !dbg !33
  call void @llvm.dbg.value(metadata double* %real_twid, metadata !19, metadata !DIExpression()), !dbg !33
  call void @llvm.dbg.value(metadata double* %img_twid, metadata !20, metadata !DIExpression()), !dbg !33
  call void @llvm.dbg.value(metadata double* %host_real, metadata !17, metadata !DIExpression()), !dbg !33
  call void @llvm.dbg.value(metadata double* %host_img, metadata !18, metadata !DIExpression()), !dbg !33
  call void @llvm.dbg.value(metadata double* %host_real_twid, metadata !19, metadata !DIExpression()), !dbg !33
  call void @llvm.dbg.value(metadata double* %host_img_twid, metadata !20, metadata !DIExpression()), !dbg !33
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !33
  call void @llvm.dbg.label(metadata !28), !dbg !34
  call void @llvm.dbg.value(metadata i32 512, metadata !24, metadata !DIExpression()), !dbg !33
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !33
  br label %for.cond1.preheader, !dbg !35

for.cond1.preheader:                              ; preds = %entry, %for.inc53
  %log.0115 = phi i32 [ 0, %entry ], [ %inc54, %for.inc53 ]
  %span.0113 = phi i32 [ 512, %entry ], [ %shr, %for.inc53 ]
  call void @llvm.dbg.value(metadata i32 %log.0115, metadata !25, metadata !DIExpression()), !dbg !33
  call void @llvm.dbg.value(metadata i32 %span.0113, metadata !24, metadata !DIExpression()), !dbg !33
  call void @llvm.dbg.value(metadata i32 %span.0113, metadata !23, metadata !DIExpression()), !dbg !33
  %cmp111 = icmp slt i32 %span.0113, 1024, !dbg !36
  br i1 %cmp111, label %for.body2, label %for.inc53, !dbg !39

for.body2:                                        ; preds = %for.cond1.preheader, %for.inc
  %odd.0112 = phi i32 [ %inc, %for.inc ], [ %span.0113, %for.cond1.preheader ]
  call void @llvm.dbg.value(metadata i32 %odd.0112, metadata !23, metadata !DIExpression()), !dbg !33
  %or = or i32 %odd.0112, %span.0113, !dbg !40
  call void @llvm.dbg.value(metadata i32 %or, metadata !23, metadata !DIExpression()), !dbg !33
  %xor = xor i32 %or, %span.0113, !dbg !42
  call void @llvm.dbg.value(metadata i32 %xor, metadata !21, metadata !DIExpression()), !dbg !33
  %idxprom = sext i32 %xor to i64, !dbg !43
  %arrayidx = getelementptr inbounds double, double* %host_real, i64 %idxprom, !dbg !43
  %0 = load double, double* %arrayidx, align 8, !dbg !43, !tbaa !44
  %idxprom3 = sext i32 %or to i64, !dbg !48
  %arrayidx4 = getelementptr inbounds double, double* %host_real, i64 %idxprom3, !dbg !48
  %1 = load double, double* %arrayidx4, align 8, !dbg !48, !tbaa !44
  %add = fadd double %0, %1, !dbg !49
  call void @llvm.dbg.value(metadata double %add, metadata !27, metadata !DIExpression()), !dbg !33
  %sub = fsub double %0, %1, !dbg !50
  store double %sub, double* %arrayidx4, align 8, !dbg !51, !tbaa !44
  store double %add, double* %arrayidx, align 8, !dbg !52, !tbaa !44
  %arrayidx14 = getelementptr inbounds double, double* %host_img, i64 %idxprom, !dbg !53
  %2 = load double, double* %arrayidx14, align 8, !dbg !53, !tbaa !44
  %arrayidx16 = getelementptr inbounds double, double* %host_img, i64 %idxprom3, !dbg !54
  %3 = load double, double* %arrayidx16, align 8, !dbg !54, !tbaa !44
  %add17 = fadd double %2, %3, !dbg !55
  call void @llvm.dbg.value(metadata double %add17, metadata !27, metadata !DIExpression()), !dbg !33
  %sub22 = fsub double %2, %3, !dbg !56
  store double %sub22, double* %arrayidx16, align 8, !dbg !57, !tbaa !44
  store double %add17, double* %arrayidx14, align 8, !dbg !58, !tbaa !44
  %shl = shl i32 %xor, %log.0115, !dbg !59
  %and = and i32 %shl, 1023, !dbg !60
  call void @llvm.dbg.value(metadata i32 %and, metadata !26, metadata !DIExpression()), !dbg !33
  %tobool27 = icmp eq i32 %and, 0, !dbg !61
  br i1 %tobool27, label %for.inc, label %if.then, !dbg !63

if.then:                                          ; preds = %for.body2
  %idxprom28 = zext i32 %and to i64, !dbg !64
  %arrayidx29 = getelementptr inbounds double, double* %host_real_twid, i64 %idxprom28, !dbg !64
  %4 = load double, double* %arrayidx29, align 8, !dbg !64, !tbaa !44
  %5 = load double, double* %arrayidx4, align 8, !dbg !66, !tbaa !44
  %mul = fmul double %4, %5, !dbg !67
  %arrayidx33 = getelementptr inbounds double, double* %host_img_twid, i64 %idxprom28, !dbg !68
  %6 = load double, double* %arrayidx33, align 8, !dbg !68, !tbaa !44
  %7 = load double, double* %arrayidx16, align 8, !dbg !69, !tbaa !44
  %mul36 = fmul double %6, %7, !dbg !70
  %sub37 = fsub double %mul, %mul36, !dbg !71
  call void @llvm.dbg.value(metadata double %sub37, metadata !27, metadata !DIExpression()), !dbg !33
  %mul42 = fmul double %4, %7, !dbg !72
  %mul47 = fmul double %5, %6, !dbg !73
  %add48 = fadd double %mul47, %mul42, !dbg !74
  store double %add48, double* %arrayidx16, align 8, !dbg !75, !tbaa !44
  store double %sub37, double* %arrayidx4, align 8, !dbg !76, !tbaa !44
  br label %for.inc, !dbg !77

for.inc:                                          ; preds = %for.body2, %if.then
  %inc = add nsw i32 %or, 1, !dbg !78
  call void @llvm.dbg.value(metadata i32 %inc, metadata !23, metadata !DIExpression()), !dbg !33
  %cmp = icmp slt i32 %or, 1023, !dbg !36
  br i1 %cmp, label %for.body2, label %for.inc53, !dbg !39, !llvm.loop !79

for.inc53:                                        ; preds = %for.inc, %for.cond1.preheader
  %shr = ashr i32 %span.0113, 1, !dbg !81
  call void @llvm.dbg.value(metadata i32 %shr, metadata !24, metadata !DIExpression()), !dbg !33
  %inc54 = add nuw nsw i32 %log.0115, 1, !dbg !82
  call void @llvm.dbg.value(metadata i32 %inc54, metadata !25, metadata !DIExpression()), !dbg !33
  %exitcond = icmp eq i32 %inc54, 10, !dbg !35
  br i1 %exitcond, label %for.end55, label %for.cond1.preheader, !dbg !35, !llvm.loop !83

for.end55:                                        ; preds = %for.inc53
  ret void, !dbg !85
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

attributes #0 = { nofree noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4, !5}
!llvm.ident = !{!6}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 10.0.1 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "fft.c", directory: "/home/coco/work/benchmark_codes/fft-strided")
!2 = !{}
!3 = !{i32 7, !"Dwarf Version", i32 4}
!4 = !{i32 2, !"Debug Info Version", i32 3}
!5 = !{i32 1, !"wchar_size", i32 4}
!6 = !{!"clang version 10.0.1 "}
!7 = distinct !DISubprogram(name: "fft", scope: !1, file: !1, line: 7, type: !8, scopeLine: 14, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !12)
!8 = !DISubroutineType(types: !9)
!9 = !{null, !10, !10, !10, !10, !10, !10, !10, !10}
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!11 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!12 = !{!13, !14, !15, !16, !17, !18, !19, !20, !21, !23, !24, !25, !26, !27, !28, !29}
!13 = !DILocalVariable(name: "host_real", arg: 1, scope: !7, file: !1, line: 7, type: !10)
!14 = !DILocalVariable(name: "host_img", arg: 2, scope: !7, file: !1, line: 8, type: !10)
!15 = !DILocalVariable(name: "host_real_twid", arg: 3, scope: !7, file: !1, line: 9, type: !10)
!16 = !DILocalVariable(name: "host_img_twid", arg: 4, scope: !7, file: !1, line: 10, type: !10)
!17 = !DILocalVariable(name: "real", arg: 5, scope: !7, file: !1, line: 11, type: !10)
!18 = !DILocalVariable(name: "img", arg: 6, scope: !7, file: !1, line: 12, type: !10)
!19 = !DILocalVariable(name: "real_twid", arg: 7, scope: !7, file: !1, line: 13, type: !10)
!20 = !DILocalVariable(name: "img_twid", arg: 8, scope: !7, file: !1, line: 14, type: !10)
!21 = !DILocalVariable(name: "even", scope: !7, file: !1, line: 15, type: !22)
!22 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!23 = !DILocalVariable(name: "odd", scope: !7, file: !1, line: 15, type: !22)
!24 = !DILocalVariable(name: "span", scope: !7, file: !1, line: 15, type: !22)
!25 = !DILocalVariable(name: "log", scope: !7, file: !1, line: 15, type: !22)
!26 = !DILocalVariable(name: "rootindex", scope: !7, file: !1, line: 15, type: !22)
!27 = !DILocalVariable(name: "temp", scope: !7, file: !1, line: 16, type: !11)
!28 = !DILabel(scope: !7, name: "outer", file: !1, line: 32)
!29 = !DILabel(scope: !30, name: "inner", file: !1, line: 33)
!30 = distinct !DILexicalBlock(scope: !31, file: !1, line: 32, column: 55)
!31 = distinct !DILexicalBlock(scope: !32, file: !1, line: 32, column: 11)
!32 = distinct !DILexicalBlock(scope: !7, file: !1, line: 32, column: 11)
!33 = !DILocation(line: 0, scope: !7)
!34 = !DILocation(line: 32, column: 5, scope: !7)
!35 = !DILocation(line: 32, column: 11, scope: !32)
!36 = !DILocation(line: 33, column: 32, scope: !37)
!37 = distinct !DILexicalBlock(scope: !38, file: !1, line: 33, column: 15)
!38 = distinct !DILexicalBlock(scope: !30, file: !1, line: 33, column: 15)
!39 = !DILocation(line: 33, column: 15, scope: !38)
!40 = !DILocation(line: 34, column: 17, scope: !41)
!41 = distinct !DILexicalBlock(scope: !37, file: !1, line: 33, column: 49)
!42 = !DILocation(line: 35, column: 24, scope: !41)
!43 = !DILocation(line: 37, column: 20, scope: !41)
!44 = !{!45, !45, i64 0}
!45 = !{!"double", !46, i64 0}
!46 = !{!"omnipotent char", !47, i64 0}
!47 = !{!"Simple C/C++ TBAA"}
!48 = !DILocation(line: 37, column: 33, scope: !41)
!49 = !DILocation(line: 37, column: 31, scope: !41)
!50 = !DILocation(line: 38, column: 36, scope: !41)
!51 = !DILocation(line: 38, column: 23, scope: !41)
!52 = !DILocation(line: 39, column: 24, scope: !41)
!53 = !DILocation(line: 41, column: 20, scope: !41)
!54 = !DILocation(line: 41, column: 32, scope: !41)
!55 = !DILocation(line: 41, column: 30, scope: !41)
!56 = !DILocation(line: 42, column: 34, scope: !41)
!57 = !DILocation(line: 42, column: 22, scope: !41)
!58 = !DILocation(line: 43, column: 23, scope: !41)
!59 = !DILocation(line: 45, column: 30, scope: !41)
!60 = !DILocation(line: 45, column: 37, scope: !41)
!61 = !DILocation(line: 46, column: 16, scope: !62)
!62 = distinct !DILexicalBlock(scope: !41, file: !1, line: 46, column: 16)
!63 = !DILocation(line: 46, column: 16, scope: !41)
!64 = !DILocation(line: 47, column: 24, scope: !65)
!65 = distinct !DILexicalBlock(scope: !62, file: !1, line: 46, column: 26)
!66 = !DILocation(line: 47, column: 47, scope: !65)
!67 = !DILocation(line: 47, column: 45, scope: !65)
!68 = !DILocation(line: 48, column: 21, scope: !65)
!69 = !DILocation(line: 48, column: 44, scope: !65)
!70 = !DILocation(line: 48, column: 42, scope: !65)
!71 = !DILocation(line: 47, column: 57, scope: !65)
!72 = !DILocation(line: 49, column: 48, scope: !65)
!73 = !DILocation(line: 50, column: 40, scope: !65)
!74 = !DILocation(line: 49, column: 58, scope: !65)
!75 = !DILocation(line: 49, column: 26, scope: !65)
!76 = !DILocation(line: 51, column: 27, scope: !65)
!77 = !DILocation(line: 52, column: 13, scope: !65)
!78 = !DILocation(line: 33, column: 46, scope: !37)
!79 = distinct !{!79, !39, !80}
!80 = !DILocation(line: 53, column: 9, scope: !38)
!81 = !DILocation(line: 32, column: 43, scope: !31)
!82 = !DILocation(line: 32, column: 52, scope: !31)
!83 = distinct !{!83, !35, !84}
!84 = !DILocation(line: 54, column: 5, scope: !32)
!85 = !DILocation(line: 59, column: 1, scope: !7)
