; ModuleID = 'md.c'
source_filename = "md.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [19 x i8] c"total pairs - %i \0A\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"after, X:%i Y:%i Z%i \0A\00", align 1

; Function Attrs: nofree noinline norecurse nounwind uwtable
define dso_local void @md(i32* nocapture %d_force_x, i32* nocapture %d_force_y, i32* nocapture %d_force_z, i32* nocapture readonly %position_x, i32* nocapture readonly %position_y, i32* nocapture readonly %position_z, i32* nocapture readonly %NL) local_unnamed_addr #0 {
entry:
  br label %for.body

for.body:                                         ; preds = %for.end, %entry
  %indvars.iv104 = phi i64 [ 0, %entry ], [ %indvars.iv.next105, %for.end ]
  %arrayidx = getelementptr inbounds i32, i32* %position_x, i64 %indvars.iv104
  %0 = load i32, i32* %arrayidx, align 4, !tbaa !2
  %arrayidx2 = getelementptr inbounds i32, i32* %position_y, i64 %indvars.iv104
  %1 = load i32, i32* %arrayidx2, align 4, !tbaa !2
  %arrayidx4 = getelementptr inbounds i32, i32* %position_z, i64 %indvars.iv104
  %2 = load i32, i32* %arrayidx4, align 4, !tbaa !2
  %3 = shl i64 %indvars.iv104, 5
  br label %for.body7

for.body7:                                        ; preds = %for.body7, %for.body
  %indvars.iv = phi i64 [ 0, %for.body ], [ %indvars.iv.next, %for.body7 ]
  %fx.0100 = phi i32 [ 0, %for.body ], [ %add30, %for.body7 ]
  %fy.099 = phi i32 [ 0, %for.body ], [ %add32, %for.body7 ]
  %fz.098 = phi i32 [ 0, %for.body ], [ %add34, %for.body7 ]
  %4 = add nuw nsw i64 %indvars.iv, %3
  %arrayidx9 = getelementptr inbounds i32, i32* %NL, i64 %4
  %5 = load i32, i32* %arrayidx9, align 4, !tbaa !2
  %idxprom10 = sext i32 %5 to i64
  %arrayidx11 = getelementptr inbounds i32, i32* %position_x, i64 %idxprom10
  %6 = load i32, i32* %arrayidx11, align 4, !tbaa !2
  %arrayidx13 = getelementptr inbounds i32, i32* %position_y, i64 %idxprom10
  %7 = load i32, i32* %arrayidx13, align 4, !tbaa !2
  %arrayidx15 = getelementptr inbounds i32, i32* %position_z, i64 %idxprom10
  %8 = load i32, i32* %arrayidx15, align 4, !tbaa !2
  %sub = sub nsw i32 %0, %6
  %sub16 = sub nsw i32 %1, %7
  %sub17 = sub nsw i32 %2, %8
  %mul18 = mul nsw i32 %sub, %sub
  %mul19 = mul nsw i32 %sub16, %sub16
  %mul20 = mul nsw i32 %sub17, %sub17
  %add21 = add nuw nsw i32 %mul19, %mul18
  %add22 = add nuw nsw i32 %add21, %mul20
  %mul23 = mul nsw i32 %add22, %add22
  %mul24 = mul nsw i32 %mul23, %add22
  %mul25 = mul nsw i32 %mul24, %add22
  %mul26 = mul nsw i32 %mul24, 15
  %sub27 = add nsw i32 %mul26, -20
  %mul28 = mul nsw i32 %mul25, %sub27
  %mul29 = mul nsw i32 %mul28, %sub
  %add30 = add nsw i32 %mul29, %fx.0100
  %mul31 = mul nsw i32 %mul28, %sub16
  %add32 = add nsw i32 %mul31, %fy.099
  %mul33 = mul nsw i32 %mul28, %sub17
  %add34 = add nsw i32 %mul33, %fz.098
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 32
  br i1 %exitcond, label %for.end, label %for.body7

for.end:                                          ; preds = %for.body7
  %arrayidx36 = getelementptr inbounds i32, i32* %d_force_x, i64 %indvars.iv104
  store i32 %add30, i32* %arrayidx36, align 4, !tbaa !2
  %arrayidx38 = getelementptr inbounds i32, i32* %d_force_y, i64 %indvars.iv104
  store i32 %add32, i32* %arrayidx38, align 4, !tbaa !2
  %arrayidx40 = getelementptr inbounds i32, i32* %d_force_z, i64 %indvars.iv104
  store i32 %add34, i32* %arrayidx40, align 4, !tbaa !2
  %indvars.iv.next105 = add nuw nsw i64 %indvars.iv104, 1
  %exitcond107 = icmp eq i64 %indvars.iv.next105, 32
  br i1 %exitcond107, label %for.end43, label %for.body

for.end43:                                        ; preds = %for.end
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: noinline norecurse nounwind readonly uwtable
define dso_local i32 @distance(i32* nocapture readonly %position_x, i32* nocapture readonly %position_y, i32* nocapture readonly %position_z, i32 %i, i32 %j) local_unnamed_addr #2 {
entry:
  %idxprom = sext i32 %i to i64
  %arrayidx = getelementptr inbounds i32, i32* %position_x, i64 %idxprom
  %0 = load i32, i32* %arrayidx, align 4, !tbaa !2
  %idxprom1 = sext i32 %j to i64
  %arrayidx2 = getelementptr inbounds i32, i32* %position_x, i64 %idxprom1
  %1 = load i32, i32* %arrayidx2, align 4, !tbaa !2
  %sub = sub nsw i32 %0, %1
  %arrayidx4 = getelementptr inbounds i32, i32* %position_y, i64 %idxprom
  %2 = load i32, i32* %arrayidx4, align 4, !tbaa !2
  %arrayidx6 = getelementptr inbounds i32, i32* %position_y, i64 %idxprom1
  %3 = load i32, i32* %arrayidx6, align 4, !tbaa !2
  %sub7 = sub nsw i32 %2, %3
  %arrayidx9 = getelementptr inbounds i32, i32* %position_z, i64 %idxprom
  %4 = load i32, i32* %arrayidx9, align 4, !tbaa !2
  %arrayidx11 = getelementptr inbounds i32, i32* %position_z, i64 %idxprom1
  %5 = load i32, i32* %arrayidx11, align 4, !tbaa !2
  %sub12 = sub nsw i32 %4, %5
  %mul = mul nsw i32 %sub, %sub
  %mul13 = mul nsw i32 %sub7, %sub7
  %add = add nuw nsw i32 %mul13, %mul
  %mul14 = mul nsw i32 %sub12, %sub12
  %add15 = add nuw nsw i32 %add, %mul14
  ret i32 %add15
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @buildNeighborList(i32* nocapture readonly %position_x, i32* nocapture readonly %position_y, i32* nocapture readonly %position_z, [32 x i32]* nocapture %NL) local_unnamed_addr #3 {
entry:
  %currList = alloca [32 x i32], align 16
  %0 = bitcast [32 x i32]* %currList to i8*
  %arraydecay17 = getelementptr inbounds [32 x i32], [32 x i32]* %currList, i64 0, i64 0
  br label %for.body

for.body:                                         ; preds = %for.end16, %entry
  %indvars.iv48 = phi i64 [ 0, %entry ], [ %indvars.iv.next49, %for.end16 ]
  %totalPairs.047 = phi i32 [ 0, %entry ], [ %add, %for.end16 ]
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %0) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(128) %0, i8 0, i64 128, i1 false)
  br label %for.body8

for.body8:                                        ; preds = %for.inc14, %for.body
  %indvars.iv = phi i64 [ 0, %for.body ], [ %indvars.iv.next, %for.inc14 ]
  %cmp9 = icmp eq i64 %indvars.iv48, %indvars.iv
  br i1 %cmp9, label %for.inc14, label %if.end

if.end:                                           ; preds = %for.body8
  %arrayidx11 = getelementptr inbounds [32 x i32], [32 x i32]* %currList, i64 0, i64 %indvars.iv
  %1 = trunc i64 %indvars.iv to i32
  store i32 %1, i32* %arrayidx11, align 4, !tbaa !2
  br label %for.inc14

for.inc14:                                        ; preds = %for.body8, %if.end
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 32
  br i1 %exitcond, label %for.end16, label %for.body8

for.end16:                                        ; preds = %for.inc14
  %2 = trunc i64 %indvars.iv48 to i32
  %call18 = call i32 @populateNeighborList(i32* undef, i32* nonnull %arraydecay17, i32 %2, [32 x i32]* %NL)
  %add = add nsw i32 %call18, %totalPairs.047
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %0) #6
  %indvars.iv.next49 = add nuw nsw i64 %indvars.iv48, 1
  %exitcond50 = icmp eq i64 %indvars.iv.next49, 32
  br i1 %exitcond50, label %for.end21, label %for.body

for.end21:                                        ; preds = %for.end16
  %call22 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), i32 %add)
  ret i32 %add
}

; Function Attrs: nofree nounwind
declare dso_local i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #4

; Function Attrs: nofree noinline norecurse nounwind uwtable
define dso_local i32 @populateNeighborList(i32* nocapture readnone %currDist, i32* nocapture readonly %currList, i32 %i, [32 x i32]* nocapture %NL) local_unnamed_addr #0 {
entry:
  %idxprom1 = sext i32 %i to i64
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds i32, i32* %currList, i64 %indvars.iv
  %0 = load i32, i32* %arrayidx, align 4, !tbaa !2
  %arrayidx4 = getelementptr inbounds [32 x i32], [32 x i32]* %NL, i64 %idxprom1, i64 %indvars.iv
  store i32 %0, i32* %arrayidx4, align 4, !tbaa !2
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 32
  br i1 %exitcond, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  ret i32 32
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #3 {
entry:
  %position_x = alloca [32 x i32], align 16
  %position_y = alloca [32 x i32], align 16
  %position_z = alloca [32 x i32], align 16
  %force_x = alloca [32 x i32], align 16
  %force_y = alloca [32 x i32], align 16
  %force_z = alloca [32 x i32], align 16
  %NL = alloca [32 x [32 x i32]], align 16
  %0 = bitcast [32 x [32 x i32]]* %NL to i8*
  %neighborList = alloca [1024 x i32], align 16
  call void @srand(i32 8650341) #6
  %1 = bitcast [32 x i32]* %position_x to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %1) #6
  %2 = bitcast [32 x i32]* %position_y to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %2) #6
  %3 = bitcast [32 x i32]* %position_z to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %3) #6
  %4 = bitcast [32 x i32]* %force_x to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4) #6
  %5 = bitcast [32 x i32]* %force_y to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %5) #6
  %6 = bitcast [32 x i32]* %force_z to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %6) #6
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %0) #6
  %7 = bitcast [1024 x i32]* %neighborList to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %7) #6
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv118 = phi i64 [ 0, %entry ], [ %indvars.iv.next119, %for.body ]
  %call = call i32 @rand() #6
  %arrayidx = getelementptr inbounds [32 x i32], [32 x i32]* %position_x, i64 0, i64 %indvars.iv118
  store i32 %call, i32* %arrayidx, align 4, !tbaa !2
  %call1 = call i32 @rand() #6
  %arrayidx3 = getelementptr inbounds [32 x i32], [32 x i32]* %position_y, i64 0, i64 %indvars.iv118
  store i32 %call1, i32* %arrayidx3, align 4, !tbaa !2
  %call4 = call i32 @rand() #6
  %arrayidx6 = getelementptr inbounds [32 x i32], [32 x i32]* %position_z, i64 0, i64 %indvars.iv118
  store i32 %call4, i32* %arrayidx6, align 4, !tbaa !2
  %indvars.iv.next119 = add nuw nsw i64 %indvars.iv118, 1
  %exitcond120 = icmp eq i64 %indvars.iv.next119, 32
  br i1 %exitcond120, label %for.cond10.preheader.preheader, label %for.body

for.cond10.preheader.preheader:                   ; preds = %for.body
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(4096) %0, i8 0, i64 4096, i1 false)
  %arraydecay = getelementptr inbounds [32 x i32], [32 x i32]* %position_x, i64 0, i64 0
  %arraydecay23 = getelementptr inbounds [32 x i32], [32 x i32]* %position_y, i64 0, i64 0
  %arraydecay24 = getelementptr inbounds [32 x i32], [32 x i32]* %position_z, i64 0, i64 0
  %arraydecay25 = getelementptr inbounds [32 x [32 x i32]], [32 x [32 x i32]]* %NL, i64 0, i64 0
  %call26 = call i32 @buildNeighborList(i32* nonnull %arraydecay, i32* nonnull %arraydecay23, i32* nonnull %arraydecay24, [32 x i32]* nonnull %arraydecay25)
  br label %for.cond30.preheader

for.cond30.preheader:                             ; preds = %for.cond30.preheader, %for.cond10.preheader.preheader
  %indvar = phi i64 [ 0, %for.cond10.preheader.preheader ], [ %indvar.next, %for.cond30.preheader ]
  %8 = shl nuw nsw i64 %indvar, 5
  %scevgep = getelementptr [1024 x i32], [1024 x i32]* %neighborList, i64 0, i64 %8
  %scevgep106 = bitcast i32* %scevgep to i8*
  %scevgep107 = getelementptr [32 x [32 x i32]], [32 x [32 x i32]]* %NL, i64 0, i64 %indvar, i64 0
  %scevgep107108 = bitcast i32* %scevgep107 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 dereferenceable(128) %scevgep106, i8* nonnull align 16 dereferenceable(128) %scevgep107108, i64 128, i1 false)
  %indvar.next = add nuw nsw i64 %indvar, 1
  %exitcond109 = icmp eq i64 %indvar.next, 32
  br i1 %exitcond109, label %for.end44, label %for.cond30.preheader

for.end44:                                        ; preds = %for.cond30.preheader
  %arraydecay45 = getelementptr inbounds [32 x i32], [32 x i32]* %force_x, i64 0, i64 0
  %arraydecay46 = getelementptr inbounds [32 x i32], [32 x i32]* %force_y, i64 0, i64 0
  %arraydecay47 = getelementptr inbounds [32 x i32], [32 x i32]* %force_z, i64 0, i64 0
  %arraydecay51 = getelementptr inbounds [1024 x i32], [1024 x i32]* %neighborList, i64 0, i64 0
  call void @md(i32* nonnull %arraydecay45, i32* nonnull %arraydecay46, i32* nonnull %arraydecay47, i32* nonnull %arraydecay, i32* nonnull %arraydecay23, i32* nonnull %arraydecay24, i32* nonnull %arraydecay51)
  br label %for.body54

for.body54:                                       ; preds = %for.body54, %for.end44
  %indvars.iv = phi i64 [ 0, %for.end44 ], [ %indvars.iv.next, %for.body54 ]
  %arrayidx56 = getelementptr inbounds [32 x i32], [32 x i32]* %force_x, i64 0, i64 %indvars.iv
  %9 = load i32, i32* %arrayidx56, align 4, !tbaa !2
  %arrayidx58 = getelementptr inbounds [32 x i32], [32 x i32]* %force_y, i64 0, i64 %indvars.iv
  %10 = load i32, i32* %arrayidx58, align 4, !tbaa !2
  %arrayidx60 = getelementptr inbounds [32 x i32], [32 x i32]* %force_z, i64 0, i64 %indvars.iv
  %11 = load i32, i32* %arrayidx60, align 4, !tbaa !2
  %call61 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %9, i32 %10, i32 %11)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 32
  br i1 %exitcond, label %for.end64, label %for.body54

for.end64:                                        ; preds = %for.body54
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %0) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %6) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %5) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %3) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %2) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %1) #6
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind
declare dso_local void @srand(i32) local_unnamed_addr #5

; Function Attrs: nounwind
declare dso_local i32 @rand() local_unnamed_addr #5

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nofree noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { noinline norecurse nounwind readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
