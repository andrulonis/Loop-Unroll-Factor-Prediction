; ModuleID = 'reduction.c'
source_filename = "reduction.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [9 x i8] c"sum: %d\0A\00", align 1

; Function Attrs: noinline norecurse nounwind readonly uwtable
define dso_local i32 @reduction(i32* nocapture readonly %in) local_unnamed_addr #0 !dbg !18 {
entry:
  call void @llvm.dbg.value(metadata i32* %in, metadata !22, metadata !DIExpression()), !dbg !26
  call void @llvm.dbg.value(metadata i32 0, metadata !23, metadata !DIExpression()), !dbg !26
  call void @llvm.dbg.value(metadata i32 0, metadata !24, metadata !DIExpression()), !dbg !26
  call void @llvm.dbg.label(metadata !25), !dbg !27
  call void @llvm.dbg.value(metadata i32 0, metadata !23, metadata !DIExpression()), !dbg !26
  call void @llvm.dbg.value(metadata i32 0, metadata !24, metadata !DIExpression()), !dbg !26
  br label %for.body, !dbg !28

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %sum.08 = phi i32 [ 0, %entry ], [ %add, %for.body ]
  call void @llvm.dbg.value(metadata i32 %sum.08, metadata !24, metadata !DIExpression()), !dbg !26
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !23, metadata !DIExpression()), !dbg !26
  %arrayidx = getelementptr inbounds i32, i32* %in, i64 %indvars.iv, !dbg !30
  %0 = load i32, i32* %arrayidx, align 4, !dbg !30, !tbaa !32
  %add = add nsw i32 %0, %sum.08, !dbg !36
  call void @llvm.dbg.value(metadata i32 %add, metadata !24, metadata !DIExpression()), !dbg !26
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !37
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !23, metadata !DIExpression()), !dbg !26
  %exitcond = icmp eq i64 %indvars.iv.next, 2048, !dbg !38
  br i1 %exitcond, label %for.end, label %for.body, !dbg !28, !llvm.loop !39

for.end:                                          ; preds = %for.body
  call void @llvm.dbg.value(metadata i32 %add, metadata !24, metadata !DIExpression()), !dbg !26
  ret i32 %add, !dbg !41
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #2 !dbg !42 {
entry:
  %call = call noalias dereferenceable_or_null(8192) i8* @malloc(i64 8192) #5, !dbg !49
  %0 = bitcast i8* %call to i32*, !dbg !50
  call void @llvm.dbg.value(metadata i32* %0, metadata !44, metadata !DIExpression()), !dbg !51
  call void @llvm.dbg.value(metadata i32 2147483646, metadata !46, metadata !DIExpression()), !dbg !51
  call void @llvm.dbg.value(metadata i32 0, metadata !47, metadata !DIExpression()), !dbg !51
  call void @srand(i32 8650341) #5, !dbg !52
  call void @llvm.dbg.value(metadata i32 0, metadata !45, metadata !DIExpression()), !dbg !51
  br label %for.body, !dbg !53

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !45, metadata !DIExpression()), !dbg !51
  %call1 = call i32 @rand() #5, !dbg !55
  %conv2 = sitofp i32 %call1 to double, !dbg !55
  %mul4 = fmul double %conv2, 0x41DFFFFFFF800000, !dbg !58
  %div = fdiv double %mul4, 0x41DFFFFFFFC00000, !dbg !59
  %add = fadd double %div, 0.000000e+00, !dbg !60
  %conv5 = fptosi double %add to i32, !dbg !61
  %arrayidx = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !62
  store i32 %conv5, i32* %arrayidx, align 4, !dbg !63, !tbaa !32
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !64
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !45, metadata !DIExpression()), !dbg !51
  %exitcond = icmp eq i64 %indvars.iv.next, 2048, !dbg !65
  br i1 %exitcond, label %for.end, label %for.body, !dbg !53, !llvm.loop !66

for.end:                                          ; preds = %for.body
  %call7 = call i32 @reduction(i32* %0), !dbg !68
  call void @llvm.dbg.value(metadata i32 %call7, metadata !48, metadata !DIExpression()), !dbg !51
  %call8 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 %call7), !dbg !69
  ret i32 0, !dbg !70
}

; Function Attrs: nofree nounwind
declare dso_local noalias i8* @malloc(i64) local_unnamed_addr #3

; Function Attrs: nounwind
declare !dbg !6 dso_local void @srand(i32) local_unnamed_addr #4

; Function Attrs: nounwind
declare !dbg !11 dso_local i32 @rand() local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare dso_local i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!14, !15, !16}
!llvm.ident = !{!17}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 10.0.1 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "reduction.c", directory: "/home/coco/work/benchmark_codes/reduction")
!2 = !{}
!3 = !{!4, !6, !5, !11}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64)
!5 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!6 = !DISubprogram(name: "srand", scope: !7, file: !7, line: 456, type: !8, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !2)
!7 = !DIFile(filename: "/usr/include/stdlib.h", directory: "")
!8 = !DISubroutineType(types: !9)
!9 = !{null, !10}
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !DISubprogram(name: "rand", scope: !7, file: !7, line: 454, type: !12, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !2)
!12 = !DISubroutineType(types: !13)
!13 = !{!5}
!14 = !{i32 7, !"Dwarf Version", i32 4}
!15 = !{i32 2, !"Debug Info Version", i32 3}
!16 = !{i32 1, !"wchar_size", i32 4}
!17 = !{!"clang version 10.0.1 "}
!18 = distinct !DISubprogram(name: "reduction", scope: !1, file: !1, line: 7, type: !19, scopeLine: 8, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !21)
!19 = !DISubroutineType(types: !20)
!20 = !{!5, !4}
!21 = !{!22, !23, !24, !25}
!22 = !DILocalVariable(name: "in", arg: 1, scope: !18, file: !1, line: 7, type: !4)
!23 = !DILocalVariable(name: "i", scope: !18, file: !1, line: 9, type: !5)
!24 = !DILocalVariable(name: "sum", scope: !18, file: !1, line: 9, type: !5)
!25 = !DILabel(scope: !18, name: "sum", file: !1, line: 13)
!26 = !DILocation(line: 0, scope: !18)
!27 = !DILocation(line: 13, column: 3, scope: !18)
!28 = !DILocation(line: 13, column: 7, scope: !29)
!29 = distinct !DILexicalBlock(scope: !18, file: !1, line: 13, column: 7)
!30 = !DILocation(line: 14, column: 12, scope: !31)
!31 = distinct !DILexicalBlock(scope: !29, file: !1, line: 13, column: 7)
!32 = !{!33, !33, i64 0}
!33 = !{!"int", !34, i64 0}
!34 = !{!"omnipotent char", !35, i64 0}
!35 = !{!"Simple C/C++ TBAA"}
!36 = !DILocation(line: 14, column: 9, scope: !31)
!37 = !DILocation(line: 13, column: 29, scope: !31)
!38 = !DILocation(line: 13, column: 21, scope: !31)
!39 = distinct !{!39, !28, !40}
!40 = !DILocation(line: 14, column: 16, scope: !29)
!41 = !DILocation(line: 16, column: 3, scope: !18)
!42 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 20, type: !12, scopeLine: 21, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !43)
!43 = !{!44, !45, !46, !47, !48}
!44 = !DILocalVariable(name: "in", scope: !42, file: !1, line: 22, type: !4)
!45 = !DILocalVariable(name: "i", scope: !42, file: !1, line: 25, type: !5)
!46 = !DILocalVariable(name: "max", scope: !42, file: !1, line: 26, type: !5)
!47 = !DILocalVariable(name: "min", scope: !42, file: !1, line: 27, type: !5)
!48 = !DILocalVariable(name: "sum", scope: !42, file: !1, line: 37, type: !5)
!49 = !DILocation(line: 23, column: 16, scope: !42)
!50 = !DILocation(line: 23, column: 8, scope: !42)
!51 = !DILocation(line: 0, scope: !42)
!52 = !DILocation(line: 28, column: 3, scope: !42)
!53 = !DILocation(line: 29, column: 3, scope: !54)
!54 = distinct !DILexicalBlock(scope: !42, file: !1, line: 29, column: 3)
!55 = !DILocation(line: 31, column: 25, scope: !56)
!56 = distinct !DILexicalBlock(scope: !57, file: !1, line: 30, column: 3)
!57 = distinct !DILexicalBlock(scope: !54, file: !1, line: 29, column: 3)
!58 = !DILocation(line: 31, column: 38, scope: !56)
!59 = !DILocation(line: 31, column: 52, scope: !56)
!60 = !DILocation(line: 31, column: 23, scope: !56)
!61 = !DILocation(line: 31, column: 13, scope: !56)
!62 = !DILocation(line: 31, column: 5, scope: !56)
!63 = !DILocation(line: 31, column: 11, scope: !56)
!64 = !DILocation(line: 29, column: 25, scope: !57)
!65 = !DILocation(line: 29, column: 17, scope: !57)
!66 = distinct !{!66, !53, !67}
!67 = !DILocation(line: 32, column: 3, scope: !54)
!68 = !DILocation(line: 37, column: 13, scope: !42)
!69 = !DILocation(line: 41, column: 3, scope: !42)
!70 = !DILocation(line: 42, column: 3, scope: !42)
