; ModuleID = 'md.c'
source_filename = "md.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.dvector_t = type { double, double, double }

; Function Attrs: nofree noinline norecurse nounwind uwtable
define dso_local void @md(i32* nocapture readonly %host_n_points, %struct.dvector_t* nocapture %host_force, %struct.dvector_t* nocapture readonly %host_position, i32* nocapture readnone %n_points, %struct.dvector_t* nocapture readnone %force, %struct.dvector_t* nocapture readnone %position) local_unnamed_addr #0 {
entry:
  %0 = bitcast i32* %host_n_points to [4 x [4 x i32]]*
  %1 = bitcast %struct.dvector_t* %host_force to [4 x [4 x [10 x %struct.dvector_t]]]*
  %2 = bitcast %struct.dvector_t* %host_position to [4 x [4 x [10 x %struct.dvector_t]]]*
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.inc245, %entry
  %indvars.iv408 = phi i64 [ 0, %entry ], [ %indvars.iv.next409, %for.inc245 ]
  %3 = icmp ugt i64 %indvars.iv408, 1
  %umax397412 = select i1 %3, i64 %indvars.iv408, i64 1
  %4 = and i64 %umax397412, 4294967295
  %5 = add nsw i64 %4, -1
  %cmp11 = icmp eq i64 %indvars.iv408, 0
  %6 = trunc i64 %indvars.iv408 to i32
  %7 = add i32 %6, -1
  %cond = select i1 %cmp11, i32 0, i32 %7
  %8 = icmp ult i64 %indvars.iv408, 2
  %9 = select i1 %8, i64 %indvars.iv408, i64 2
  %10 = trunc i64 %9 to i32
  %cond24 = add nuw nsw i32 %10, 2
  %cmp25383 = icmp slt i32 %cond, %cond24
  %11 = zext i32 %cond24 to i64
  br label %for.cond6.preheader

for.cond6.preheader:                              ; preds = %for.inc241, %for.cond2.preheader
  %indvars.iv404 = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next405, %for.inc241 ]
  %12 = icmp ugt i64 %indvars.iv404, 1
  %umax394413 = select i1 %12, i64 %indvars.iv404, i64 1
  %13 = and i64 %umax394413, 4294967295
  %14 = add nsw i64 %13, -1
  %cmp29 = icmp eq i64 %indvars.iv404, 0
  %15 = trunc i64 %indvars.iv404 to i32
  %16 = add i32 %15, -1
  %cond35 = select i1 %cmp29, i32 0, i32 %16
  %17 = icmp ult i64 %indvars.iv404, 2
  %18 = select i1 %17, i64 %indvars.iv404, i64 2
  %19 = trunc i64 %18 to i32
  %cond47 = add nuw nsw i32 %19, 2
  %cmp48380 = icmp slt i32 %cond35, %cond47
  %20 = zext i32 %cond47 to i64
  br label %loop_grid1_x

loop_grid1_x:                                     ; preds = %for.inc237, %for.cond6.preheader
  %indvars.iv400 = phi i64 [ 0, %for.cond6.preheader ], [ %indvars.iv.next401, %for.inc237 ]
  %21 = icmp ugt i64 %indvars.iv400, 1
  %umax414 = select i1 %21, i64 %indvars.iv400, i64 1
  %22 = and i64 %umax414, 4294967295
  %23 = add nsw i64 %22, -1
  br i1 %cmp25383, label %loop_grid1_y.lr.ph, label %for.inc237

loop_grid1_y.lr.ph:                               ; preds = %loop_grid1_x
  %cmp52 = icmp eq i64 %indvars.iv400, 0
  %24 = trunc i64 %indvars.iv400 to i32
  %25 = add i32 %24, -1
  %cond58 = select i1 %cmp52, i32 0, i32 %25
  %26 = icmp ult i64 %indvars.iv400, 2
  %27 = select i1 %26, i64 %indvars.iv400, i64 2
  %28 = trunc i64 %27 to i32
  %cond70 = add nuw nsw i32 %28, 2
  %cmp71378 = icmp slt i32 %cond58, %cond70
  %arrayidx98 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %0, i64 %indvars.iv408, i64 %indvars.iv404, i64 %indvars.iv400
  %29 = zext i32 %cond70 to i64
  br label %loop_grid1_y

loop_grid1_y:                                     ; preds = %loop_grid1_y.lr.ph, %for.inc233
  %indvars.iv398 = phi i64 [ %5, %loop_grid1_y.lr.ph ], [ %indvars.iv.next399, %for.inc233 ]
  br i1 %cmp48380, label %loop_grid1_z, label %for.inc233

loop_grid1_z:                                     ; preds = %loop_grid1_y, %for.inc229
  %indvars.iv395 = phi i64 [ %indvars.iv.next396, %for.inc229 ], [ %14, %loop_grid1_y ]
  br i1 %cmp71378, label %for.body72.lr.ph, label %for.inc229

for.body72.lr.ph:                                 ; preds = %loop_grid1_z
  %30 = load i32, i32* %arrayidx98, align 4, !tbaa !2
  %cmp99376 = icmp sgt i32 %30, 0
  br label %for.body72

for.body72:                                       ; preds = %for.body72.lr.ph, %for.end224
  %indvars.iv392 = phi i64 [ %23, %for.body72.lr.ph ], [ %indvars.iv.next393, %for.end224 ]
  %arrayidx88 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* %0, i64 %indvars.iv398, i64 %indvars.iv395, i64 %indvars.iv392
  %31 = load i32, i32* %arrayidx88, align 4, !tbaa !2
  br i1 %cmp99376, label %for.body100.lr.ph, label %for.end224

for.body100.lr.ph:                                ; preds = %for.body72
  %cmp149369 = icmp sgt i32 %31, 0
  %32 = load i32, i32* %arrayidx98, align 4, !tbaa !2
  %33 = sext i32 %32 to i64
  br label %for.body100

for.body100:                                      ; preds = %for.body100.lr.ph, %for.end
  %indvars.iv390 = phi i64 [ 0, %for.body100.lr.ph ], [ %indvars.iv.next391, %for.end ]
  %p.sroa.0.0..sroa_idx = getelementptr inbounds [4 x [4 x [10 x %struct.dvector_t]]], [4 x [4 x [10 x %struct.dvector_t]]]* %2, i64 %indvars.iv408, i64 %indvars.iv404, i64 %indvars.iv400, i64 %indvars.iv390, i32 0
  %p.sroa.0.0.copyload = load double, double* %p.sroa.0.0..sroa_idx, align 8, !tbaa.struct !6
  %p.sroa.5.0..sroa_idx308 = getelementptr inbounds [4 x [4 x [10 x %struct.dvector_t]]], [4 x [4 x [10 x %struct.dvector_t]]]* %2, i64 %indvars.iv408, i64 %indvars.iv404, i64 %indvars.iv400, i64 %indvars.iv390, i32 1
  %p.sroa.5.0.copyload = load double, double* %p.sroa.5.0..sroa_idx308, align 8, !tbaa.struct !6
  %p.sroa.7.0..sroa_idx311 = getelementptr inbounds [4 x [4 x [10 x %struct.dvector_t]]], [4 x [4 x [10 x %struct.dvector_t]]]* %2, i64 %indvars.iv408, i64 %indvars.iv404, i64 %indvars.iv400, i64 %indvars.iv390, i32 2
  %p.sroa.7.0.copyload = load double, double* %p.sroa.7.0..sroa_idx311, align 8, !tbaa.struct !6
  %x123 = getelementptr inbounds [4 x [4 x [10 x %struct.dvector_t]]], [4 x [4 x [10 x %struct.dvector_t]]]* %1, i64 %indvars.iv408, i64 %indvars.iv404, i64 %indvars.iv400, i64 %indvars.iv390, i32 0
  %34 = load double, double* %x123, align 8, !tbaa !9
  %y135 = getelementptr inbounds [4 x [4 x [10 x %struct.dvector_t]]], [4 x [4 x [10 x %struct.dvector_t]]]* %1, i64 %indvars.iv408, i64 %indvars.iv404, i64 %indvars.iv400, i64 %indvars.iv390, i32 1
  %35 = load double, double* %y135, align 8, !tbaa !11
  %z147 = getelementptr inbounds [4 x [4 x [10 x %struct.dvector_t]]], [4 x [4 x [10 x %struct.dvector_t]]]* %1, i64 %indvars.iv408, i64 %indvars.iv404, i64 %indvars.iv400, i64 %indvars.iv390, i32 2
  %36 = load double, double* %z147, align 8, !tbaa !12
  br i1 %cmp149369, label %for.body150.preheader, label %for.end

for.body150.preheader:                            ; preds = %for.body100
  %wide.trip.count = zext i32 %31 to i64
  br label %for.body150

for.body150:                                      ; preds = %for.inc, %for.body150.preheader
  %indvars.iv = phi i64 [ 0, %for.body150.preheader ], [ %indvars.iv.next, %for.inc ]
  %sum_z.0373 = phi double [ %36, %for.body150.preheader ], [ %sum_z.1, %for.inc ]
  %sum_y.0372 = phi double [ %35, %for.body150.preheader ], [ %sum_y.1, %for.inc ]
  %sum_x.0371 = phi double [ %34, %for.body150.preheader ], [ %sum_x.1, %for.inc ]
  %q.sroa.0.0..sroa_idx = getelementptr inbounds [4 x [4 x [10 x %struct.dvector_t]]], [4 x [4 x [10 x %struct.dvector_t]]]* %2, i64 %indvars.iv398, i64 %indvars.iv395, i64 %indvars.iv392, i64 %indvars.iv, i32 0
  %q.sroa.0.0.copyload = load double, double* %q.sroa.0.0..sroa_idx, align 8, !tbaa.struct !6
  %q.sroa.5.0..sroa_idx300 = getelementptr inbounds [4 x [4 x [10 x %struct.dvector_t]]], [4 x [4 x [10 x %struct.dvector_t]]]* %2, i64 %indvars.iv398, i64 %indvars.iv395, i64 %indvars.iv392, i64 %indvars.iv, i32 1
  %q.sroa.5.0.copyload = load double, double* %q.sroa.5.0..sroa_idx300, align 8, !tbaa.struct !6
  %q.sroa.7.0..sroa_idx303 = getelementptr inbounds [4 x [4 x [10 x %struct.dvector_t]]], [4 x [4 x [10 x %struct.dvector_t]]]* %2, i64 %indvars.iv398, i64 %indvars.iv395, i64 %indvars.iv392, i64 %indvars.iv, i32 2
  %q.sroa.7.0.copyload = load double, double* %q.sroa.7.0..sroa_idx303, align 8, !tbaa.struct !6
  %cmp153 = fcmp une double %q.sroa.0.0.copyload, %p.sroa.0.0.copyload
  %cmp156 = fcmp une double %q.sroa.5.0.copyload, %p.sroa.5.0.copyload
  %or.cond = or i1 %cmp153, %cmp156
  %cmp160 = fcmp une double %q.sroa.7.0.copyload, %p.sroa.7.0.copyload
  %or.cond368 = or i1 %or.cond, %cmp160
  br i1 %or.cond368, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body150
  %sub163 = fsub double %p.sroa.0.0.copyload, %q.sroa.0.0.copyload
  %sub166 = fsub double %p.sroa.5.0.copyload, %q.sroa.5.0.copyload
  %sub169 = fsub double %p.sroa.7.0.copyload, %q.sroa.7.0.copyload
  %mul = fmul double %sub163, %sub163
  %mul170 = fmul double %sub166, %sub166
  %add171 = fadd double %mul, %mul170
  %mul172 = fmul double %sub169, %sub169
  %add173 = fadd double %add171, %mul172
  %div = fdiv double 1.000000e+00, %add173
  %mul174 = fmul double %div, %div
  %mul175 = fmul double %div, %mul174
  %mul176 = fmul double %mul175, 1.500000e+00
  %sub177 = fadd double %mul176, -2.000000e+00
  %mul178 = fmul double %mul175, %sub177
  %mul179 = fmul double %div, %mul178
  %mul180 = fmul double %sub163, %mul179
  %add181 = fadd double %sum_x.0371, %mul180
  %mul182 = fmul double %sub166, %mul179
  %add183 = fadd double %sum_y.0372, %mul182
  %mul184 = fmul double %sub169, %mul179
  %add185 = fadd double %sum_z.0373, %mul184
  br label %for.inc

for.inc:                                          ; preds = %for.body150, %if.then
  %sum_x.1 = phi double [ %add181, %if.then ], [ %sum_x.0371, %for.body150 ]
  %sum_y.1 = phi double [ %add183, %if.then ], [ %sum_y.0372, %for.body150 ]
  %sum_z.1 = phi double [ %add185, %if.then ], [ %sum_z.0373, %for.body150 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond, label %for.end, label %for.body150

for.end:                                          ; preds = %for.inc, %for.body100
  %sum_x.0.lcssa = phi double [ %34, %for.body100 ], [ %sum_x.1, %for.inc ]
  %sum_y.0.lcssa = phi double [ %35, %for.body100 ], [ %sum_y.1, %for.inc ]
  %sum_z.0.lcssa = phi double [ %36, %for.body100 ], [ %sum_z.1, %for.inc ]
  store double %sum_x.0.lcssa, double* %x123, align 8, !tbaa !9
  store double %sum_y.0.lcssa, double* %y135, align 8, !tbaa !11
  store double %sum_z.0.lcssa, double* %z147, align 8, !tbaa !12
  %indvars.iv.next391 = add nuw nsw i64 %indvars.iv390, 1
  %cmp99 = icmp slt i64 %indvars.iv.next391, %33
  br i1 %cmp99, label %for.body100, label %for.end224

for.end224:                                       ; preds = %for.end, %for.body72
  %indvars.iv.next393 = add nsw i64 %indvars.iv392, 1
  %cmp71 = icmp ult i64 %indvars.iv.next393, %29
  br i1 %cmp71, label %for.body72, label %for.inc229

for.inc229:                                       ; preds = %for.end224, %loop_grid1_z
  %indvars.iv.next396 = add nsw i64 %indvars.iv395, 1
  %cmp48 = icmp ult i64 %indvars.iv.next396, %20
  br i1 %cmp48, label %loop_grid1_z, label %for.inc233

for.inc233:                                       ; preds = %for.inc229, %loop_grid1_y
  %indvars.iv.next399 = add nsw i64 %indvars.iv398, 1
  %cmp25 = icmp ult i64 %indvars.iv.next399, %11
  br i1 %cmp25, label %loop_grid1_y, label %for.inc237

for.inc237:                                       ; preds = %for.inc233, %loop_grid1_x
  %indvars.iv.next401 = add nuw nsw i64 %indvars.iv400, 1
  %exitcond403 = icmp eq i64 %indvars.iv.next401, 4
  br i1 %exitcond403, label %for.inc241, label %loop_grid1_x

for.inc241:                                       ; preds = %for.inc237
  %indvars.iv.next405 = add nuw nsw i64 %indvars.iv404, 1
  %exitcond407 = icmp eq i64 %indvars.iv.next405, 4
  br i1 %exitcond407, label %for.inc245, label %for.cond6.preheader

for.inc245:                                       ; preds = %for.inc241
  %indvars.iv.next409 = add nuw nsw i64 %indvars.iv408, 1
  %exitcond411 = icmp eq i64 %indvars.iv.next409, 4
  br i1 %exitcond411, label %for.end248, label %for.cond2.preheader

for.end248:                                       ; preds = %for.inc245
  ret void
}

attributes #0 = { nofree noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{i64 0, i64 8, !7, i64 8, i64 8, !7, i64 16, i64 8, !7}
!7 = !{!8, !8, i64 0}
!8 = !{!"double", !4, i64 0}
!9 = !{!10, !8, i64 0}
!10 = !{!"", !8, i64 0, !8, i64 8, !8, i64 16}
!11 = !{!10, !8, i64 8}
!12 = !{!10, !8, i64 16}
