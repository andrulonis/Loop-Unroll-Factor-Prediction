; ModuleID = 'fft.c'
source_filename = "fft.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: nofree noinline norecurse nounwind uwtable
define dso_local void @fft(double* nocapture %host_real, double* nocapture %host_img, double* nocapture readonly %host_real_twid, double* nocapture readonly %host_img_twid, double* nocapture readnone %real, double* nocapture readnone %img, double* nocapture readnone %real_twid, double* nocapture readnone %img_twid) local_unnamed_addr #0 {
entry:
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %entry, %for.inc53
  %log.0115 = phi i32 [ 0, %entry ], [ %inc54, %for.inc53 ]
  %span.0113 = phi i32 [ 512, %entry ], [ %shr, %for.inc53 ]
  %cmp111 = icmp slt i32 %span.0113, 1024
  br i1 %cmp111, label %for.body2, label %for.inc53

for.body2:                                        ; preds = %for.cond1.preheader, %for.inc
  %odd.0112 = phi i32 [ %inc, %for.inc ], [ %span.0113, %for.cond1.preheader ]
  %or = or i32 %odd.0112, %span.0113
  %xor = xor i32 %or, %span.0113
  %idxprom = sext i32 %xor to i64
  %arrayidx = getelementptr inbounds double, double* %host_real, i64 %idxprom
  %0 = load double, double* %arrayidx, align 8, !tbaa !2
  %idxprom3 = sext i32 %or to i64
  %arrayidx4 = getelementptr inbounds double, double* %host_real, i64 %idxprom3
  %1 = load double, double* %arrayidx4, align 8, !tbaa !2
  %add = fadd double %0, %1
  %sub = fsub double %0, %1
  store double %sub, double* %arrayidx4, align 8, !tbaa !2
  store double %add, double* %arrayidx, align 8, !tbaa !2
  %arrayidx14 = getelementptr inbounds double, double* %host_img, i64 %idxprom
  %2 = load double, double* %arrayidx14, align 8, !tbaa !2
  %arrayidx16 = getelementptr inbounds double, double* %host_img, i64 %idxprom3
  %3 = load double, double* %arrayidx16, align 8, !tbaa !2
  %add17 = fadd double %2, %3
  %sub22 = fsub double %2, %3
  store double %sub22, double* %arrayidx16, align 8, !tbaa !2
  store double %add17, double* %arrayidx14, align 8, !tbaa !2
  %shl = shl i32 %xor, %log.0115
  %and = and i32 %shl, 1023
  %tobool27 = icmp eq i32 %and, 0
  br i1 %tobool27, label %for.inc, label %if.then

if.then:                                          ; preds = %for.body2
  %idxprom28 = zext i32 %and to i64
  %arrayidx29 = getelementptr inbounds double, double* %host_real_twid, i64 %idxprom28
  %4 = load double, double* %arrayidx29, align 8, !tbaa !2
  %5 = load double, double* %arrayidx4, align 8, !tbaa !2
  %mul = fmul double %4, %5
  %arrayidx33 = getelementptr inbounds double, double* %host_img_twid, i64 %idxprom28
  %6 = load double, double* %arrayidx33, align 8, !tbaa !2
  %7 = load double, double* %arrayidx16, align 8, !tbaa !2
  %mul36 = fmul double %6, %7
  %sub37 = fsub double %mul, %mul36
  %mul42 = fmul double %4, %7
  %mul47 = fmul double %5, %6
  %add48 = fadd double %mul47, %mul42
  store double %add48, double* %arrayidx16, align 8, !tbaa !2
  store double %sub37, double* %arrayidx4, align 8, !tbaa !2
  br label %for.inc

for.inc:                                          ; preds = %for.body2, %if.then
  %inc = add nsw i32 %or, 1
  %cmp = icmp slt i32 %or, 1023
  br i1 %cmp, label %for.body2, label %for.inc53

for.inc53:                                        ; preds = %for.inc, %for.cond1.preheader
  %shr = ashr i32 %span.0113, 1
  %inc54 = add nuw nsw i32 %log.0115, 1
  %exitcond = icmp eq i32 %inc54, 10
  br i1 %exitcond, label %for.end55, label %for.cond1.preheader

for.end55:                                        ; preds = %for.inc53
  ret void
}

attributes #0 = { nofree noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"double", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
