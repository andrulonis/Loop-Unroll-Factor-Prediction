; ModuleID = 'viterbi.c'
source_filename = "viterbi.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @viterbi(double* nocapture readonly %host_init, double* nocapture readonly %host_transition, double* nocapture readonly %host_emission, i8* nocapture %host_path, i8* nocapture readonly %obs, double* nocapture readnone %init, double* nocapture readnone %transition, double* nocapture readnone %emission, i8* nocapture readnone %path) local_unnamed_addr #0 {
entry:
  %llike = alloca [140 x [64 x double]], align 16
  %0 = bitcast [140 x [64 x double]]* %llike to i8*
  call void @llvm.lifetime.start.p0i8(i64 71680, i8* nonnull %0) #2
  %1 = load i8, i8* %obs, align 1, !tbaa !2
  %conv4 = zext i8 %1 to i64
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv241 = phi i64 [ 0, %entry ], [ %indvars.iv.next242, %for.body ]
  %arrayidx = getelementptr inbounds double, double* %host_init, i64 %indvars.iv241
  %2 = load double, double* %arrayidx, align 8, !tbaa !5
  %mul = shl nuw nsw i64 %indvars.iv241, 6
  %add = add nuw nsw i64 %mul, %conv4
  %arrayidx6 = getelementptr inbounds double, double* %host_emission, i64 %add
  %3 = load double, double* %arrayidx6, align 8, !tbaa !5
  %add7 = fadd double %2, %3
  %arrayidx10 = getelementptr inbounds [140 x [64 x double]], [140 x [64 x double]]* %llike, i64 0, i64 0, i64 %indvars.iv241
  store double %add7, double* %arrayidx10, align 8, !tbaa !5
  %indvars.iv.next242 = add nuw nsw i64 %indvars.iv241, 1
  %exitcond243 = icmp eq i64 %indvars.iv.next242, 64
  br i1 %exitcond243, label %for.cond15.preheader, label %for.body

for.cond15.preheader:                             ; preds = %for.body, %for.inc78
  %indvars.iv237 = phi i64 [ %indvars.iv.next238, %for.inc78 ], [ 1, %for.body ]
  %4 = add nsw i64 %indvars.iv237, -1
  %arrayidx23 = getelementptr inbounds [140 x [64 x double]], [140 x [64 x double]]* %llike, i64 0, i64 %4, i64 0
  %arrayidx34 = getelementptr inbounds i8, i8* %obs, i64 %indvars.iv237
  %5 = load i8, i8* %arrayidx34, align 1, !tbaa !2
  %6 = zext i8 %5 to i64
  br label %for.body19

for.body19:                                       ; preds = %for.end70, %for.cond15.preheader
  %indvars.iv232 = phi i64 [ 0, %for.cond15.preheader ], [ %indvars.iv.next233, %for.end70 ]
  %7 = load double, double* %arrayidx23, align 16, !tbaa !5
  %arrayidx29 = getelementptr inbounds double, double* %host_transition, i64 %indvars.iv232
  %8 = load double, double* %arrayidx29, align 8, !tbaa !5
  %add30 = fadd double %7, %8
  %9 = shl nuw nsw i64 %indvars.iv232, 6
  %10 = add nuw nsw i64 %9, %6
  %arrayidx38 = getelementptr inbounds double, double* %host_emission, i64 %10
  %11 = load double, double* %arrayidx38, align 8, !tbaa !5
  %add39 = fadd double %add30, %11
  br label %for.body44

for.body44:                                       ; preds = %for.body44, %for.body19
  %indvars.iv229 = phi i64 [ 1, %for.body19 ], [ %indvars.iv.next230, %for.body44 ]
  %min_p.0218 = phi double [ %add39, %for.body19 ], [ %min_p.1, %for.body44 ]
  %arrayidx49 = getelementptr inbounds [140 x [64 x double]], [140 x [64 x double]]* %llike, i64 0, i64 %4, i64 %indvars.iv229
  %12 = load double, double* %arrayidx49, align 8, !tbaa !5
  %mul51 = shl i64 %indvars.iv229, 6
  %add53 = add i64 %mul51, %indvars.iv232
  %idxprom54 = and i64 %add53, 4294967295
  %arrayidx55 = getelementptr inbounds double, double* %host_transition, i64 %idxprom54
  %13 = load double, double* %arrayidx55, align 8, !tbaa !5
  %add56 = fadd double %12, %13
  %add65 = fadd double %11, %add56
  %cmp66 = fcmp olt double %add65, %min_p.0218
  %min_p.1 = select i1 %cmp66, double %add65, double %min_p.0218
  %indvars.iv.next230 = add nuw nsw i64 %indvars.iv229, 1
  %exitcond231 = icmp eq i64 %indvars.iv.next230, 64
  br i1 %exitcond231, label %for.end70, label %for.body44

for.end70:                                        ; preds = %for.body44
  %arrayidx74 = getelementptr inbounds [140 x [64 x double]], [140 x [64 x double]]* %llike, i64 0, i64 %indvars.iv237, i64 %indvars.iv232
  store double %min_p.1, double* %arrayidx74, align 8, !tbaa !5
  %indvars.iv.next233 = add nuw nsw i64 %indvars.iv232, 1
  %exitcond236 = icmp eq i64 %indvars.iv.next233, 64
  br i1 %exitcond236, label %for.inc78, label %for.body19

for.inc78:                                        ; preds = %for.end70
  %indvars.iv.next238 = add nuw nsw i64 %indvars.iv237, 1
  %exitcond240 = icmp eq i64 %indvars.iv.next238, 140
  br i1 %exitcond240, label %for.end80, label %for.cond15.preheader

for.end80:                                        ; preds = %for.inc78
  %arrayidx83 = getelementptr inbounds [140 x [64 x double]], [140 x [64 x double]]* %llike, i64 0, i64 139, i64 0
  %14 = load double, double* %arrayidx83, align 16, !tbaa !5
  br label %for.body88

for.body88:                                       ; preds = %for.body88, %for.end80
  %indvars.iv226 = phi i64 [ 1, %for.end80 ], [ %indvars.iv.next227, %for.body88 ]
  %min_s.0215 = phi i8 [ 0, %for.end80 ], [ %min_s.1, %for.body88 ]
  %min_p.2214 = phi double [ %14, %for.end80 ], [ %min_p.3, %for.body88 ]
  %arrayidx91 = getelementptr inbounds [140 x [64 x double]], [140 x [64 x double]]* %llike, i64 0, i64 139, i64 %indvars.iv226
  %15 = load double, double* %arrayidx91, align 8, !tbaa !5
  %cmp92 = fcmp olt double %15, %min_p.2214
  %min_p.3 = select i1 %cmp92, double %15, double %min_p.2214
  %16 = trunc i64 %indvars.iv226 to i8
  %min_s.1 = select i1 %cmp92, i8 %16, i8 %min_s.0215
  %indvars.iv.next227 = add nuw nsw i64 %indvars.iv226, 1
  %exitcond228 = icmp eq i64 %indvars.iv.next227, 64
  br i1 %exitcond228, label %for.end98, label %for.body88

for.end98:                                        ; preds = %for.body88
  %arrayidx99 = getelementptr inbounds i8, i8* %host_path, i64 139
  store i8 %min_s.1, i8* %arrayidx99, align 1, !tbaa !2
  br label %for.body103

for.body103:                                      ; preds = %for.end143, %for.end98
  %indvars.iv223 = phi i64 [ 138, %for.end98 ], [ %indvars.iv.next224, %for.end143 ]
  %arrayidx107 = getelementptr inbounds [140 x [64 x double]], [140 x [64 x double]]* %llike, i64 0, i64 %indvars.iv223, i64 0
  %17 = load double, double* %arrayidx107, align 16, !tbaa !5
  %18 = add nuw nsw i64 %indvars.iv223, 1
  %arrayidx112 = getelementptr inbounds i8, i8* %host_path, i64 %18
  %19 = load i8, i8* %arrayidx112, align 1, !tbaa !2
  %idxprom115 = zext i8 %19 to i64
  %arrayidx116 = getelementptr inbounds double, double* %host_transition, i64 %idxprom115
  %20 = load double, double* %arrayidx116, align 8, !tbaa !5
  %add117 = fadd double %17, %20
  br label %for.body122

for.body122:                                      ; preds = %for.body122, %for.body103
  %indvars.iv = phi i64 [ 1, %for.body103 ], [ %indvars.iv.next, %for.body122 ]
  %min_s.2211 = phi i8 [ 0, %for.body103 ], [ %min_s.3, %for.body122 ]
  %min_p.4210 = phi double [ %add117, %for.body103 ], [ %min_p.5, %for.body122 ]
  %arrayidx126 = getelementptr inbounds [140 x [64 x double]], [140 x [64 x double]]* %llike, i64 0, i64 %indvars.iv223, i64 %indvars.iv
  %21 = load double, double* %arrayidx126, align 8, !tbaa !5
  %mul128 = shl nuw nsw i64 %indvars.iv, 6
  %add133 = add nuw nsw i64 %mul128, %idxprom115
  %arrayidx135 = getelementptr inbounds double, double* %host_transition, i64 %add133
  %22 = load double, double* %arrayidx135, align 8, !tbaa !5
  %add136 = fadd double %21, %22
  %cmp137 = fcmp olt double %add136, %min_p.4210
  %min_p.5 = select i1 %cmp137, double %add136, double %min_p.4210
  %23 = trunc i64 %indvars.iv to i8
  %min_s.3 = select i1 %cmp137, i8 %23, i8 %min_s.2211
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 64
  br i1 %exitcond, label %for.end143, label %for.body122

for.end143:                                       ; preds = %for.body122
  %arrayidx145 = getelementptr inbounds i8, i8* %host_path, i64 %indvars.iv223
  store i8 %min_s.3, i8* %arrayidx145, align 1, !tbaa !2
  %indvars.iv.next224 = add nsw i64 %indvars.iv223, -1
  %cmp101 = icmp eq i64 %indvars.iv223, 0
  br i1 %cmp101, label %for.end147, label %for.body103

for.end147:                                       ; preds = %for.end143
  call void @llvm.lifetime.end.p0i8(i64 71680, i8* nonnull %0) #2
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}
!5 = !{!6, !6, i64 0}
!6 = !{!"double", !3, i64 0}
