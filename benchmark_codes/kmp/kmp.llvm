; ModuleID = 'kmp.c'
source_filename = "kmp.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: nofree noinline norecurse nounwind uwtable
define dso_local void @CPF(i8* nocapture readonly %pattern, i32* nocapture %kmpNext) local_unnamed_addr #0 {
entry:
  store i32 0, i32* %kmpNext, align 4, !tbaa !2
  br label %while.cond.preheader

while.cond.preheader:                             ; preds = %while.end, %entry
  %indvars.iv = phi i64 [ 1, %entry ], [ %indvars.iv.next, %while.end ]
  %k.040 = phi i32 [ 0, %entry ], [ %spec.select, %while.end ]
  %cmp137 = icmp sgt i32 %k.040, 0
  br i1 %cmp137, label %land.rhs.lr.ph, label %while.end

land.rhs.lr.ph:                                   ; preds = %while.cond.preheader
  %arrayidx4 = getelementptr inbounds i8, i8* %pattern, i64 %indvars.iv
  %0 = load i8, i8* %arrayidx4, align 1, !tbaa !6
  %arrayidx9 = getelementptr inbounds i32, i32* %kmpNext, i64 %indvars.iv
  br label %land.rhs

land.rhs:                                         ; preds = %land.rhs.lr.ph, %while.body
  %k.138 = phi i32 [ %k.040, %land.rhs.lr.ph ], [ %2, %while.body ]
  %idxprom = sext i32 %k.138 to i64
  %arrayidx2 = getelementptr inbounds i8, i8* %pattern, i64 %idxprom
  %1 = load i8, i8* %arrayidx2, align 1, !tbaa !6
  %cmp6 = icmp eq i8 %1, %0
  br i1 %cmp6, label %while.end, label %while.body

while.body:                                       ; preds = %land.rhs
  %2 = load i32, i32* %arrayidx9, align 4, !tbaa !2
  %cmp1 = icmp sgt i32 %2, 0
  br i1 %cmp1, label %land.rhs, label %while.end

while.end:                                        ; preds = %while.body, %land.rhs, %while.cond.preheader
  %k.1.lcssa = phi i32 [ %k.040, %while.cond.preheader ], [ %2, %while.body ], [ %k.138, %land.rhs ]
  %idxprom10 = sext i32 %k.1.lcssa to i64
  %arrayidx11 = getelementptr inbounds i8, i8* %pattern, i64 %idxprom10
  %3 = load i8, i8* %arrayidx11, align 1, !tbaa !6
  %arrayidx14 = getelementptr inbounds i8, i8* %pattern, i64 %indvars.iv
  %4 = load i8, i8* %arrayidx14, align 1, !tbaa !6
  %cmp16 = icmp eq i8 %3, %4
  %inc = zext i1 %cmp16 to i32
  %spec.select = add nsw i32 %k.1.lcssa, %inc
  %arrayidx19 = getelementptr inbounds i32, i32* %kmpNext, i64 %indvars.iv
  store i32 %spec.select, i32* %arrayidx19, align 4, !tbaa !2
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 4
  br i1 %exitcond, label %for.end, label %while.cond.preheader

for.end:                                          ; preds = %while.end
  ret void
}

; Function Attrs: nofree noinline norecurse nounwind uwtable
define dso_local i32 @kmp(i8* nocapture readonly %host_input, i32* nocapture %host_n_matches, i8* nocapture readonly %pattern, i8* nocapture readnone %input, i32* nocapture %kmpNext, i32* nocapture readnone %n_matches) local_unnamed_addr #0 {
entry:
  store i32 0, i32* %host_n_matches, align 4, !tbaa !2
  call void @CPF(i8* %pattern, i32* %kmpNext)
  br label %while.cond.preheader

while.cond.preheader:                             ; preds = %for.inc, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.inc ]
  %q.049 = phi i32 [ 0, %entry ], [ %q.3, %for.inc ]
  %cmp144 = icmp sgt i32 %q.049, 0
  br i1 %cmp144, label %land.rhs.lr.ph, label %while.end

land.rhs.lr.ph:                                   ; preds = %while.cond.preheader
  %arrayidx4 = getelementptr inbounds i8, i8* %host_input, i64 %indvars.iv
  %0 = load i8, i8* %arrayidx4, align 1, !tbaa !6
  br label %land.rhs

land.rhs:                                         ; preds = %land.rhs.lr.ph, %while.body
  %q.145 = phi i32 [ %q.049, %land.rhs.lr.ph ], [ %2, %while.body ]
  %idxprom = sext i32 %q.145 to i64
  %arrayidx2 = getelementptr inbounds i8, i8* %pattern, i64 %idxprom
  %1 = load i8, i8* %arrayidx2, align 1, !tbaa !6
  %cmp6 = icmp eq i8 %1, %0
  br i1 %cmp6, label %while.end, label %while.body

while.body:                                       ; preds = %land.rhs
  %arrayidx9 = getelementptr inbounds i32, i32* %kmpNext, i64 %idxprom
  %2 = load i32, i32* %arrayidx9, align 4, !tbaa !2
  %cmp1 = icmp sgt i32 %2, 0
  br i1 %cmp1, label %land.rhs, label %while.end

while.end:                                        ; preds = %while.body, %land.rhs, %while.cond.preheader
  %q.1.lcssa = phi i32 [ %q.049, %while.cond.preheader ], [ %2, %while.body ], [ %q.145, %land.rhs ]
  %idxprom10 = sext i32 %q.1.lcssa to i64
  %arrayidx11 = getelementptr inbounds i8, i8* %pattern, i64 %idxprom10
  %3 = load i8, i8* %arrayidx11, align 1, !tbaa !6
  %arrayidx14 = getelementptr inbounds i8, i8* %host_input, i64 %indvars.iv
  %4 = load i8, i8* %arrayidx14, align 1, !tbaa !6
  %cmp16 = icmp eq i8 %3, %4
  %inc = zext i1 %cmp16 to i32
  %spec.select = add nsw i32 %q.1.lcssa, %inc
  %cmp18 = icmp sgt i32 %spec.select, 3
  br i1 %cmp18, label %if.then20, label %for.inc

if.then20:                                        ; preds = %while.end
  %5 = load i32, i32* %host_n_matches, align 4, !tbaa !2
  %inc22 = add nsw i32 %5, 1
  store i32 %inc22, i32* %host_n_matches, align 4, !tbaa !2
  %sub = add nsw i32 %spec.select, -1
  %idxprom23 = sext i32 %sub to i64
  %arrayidx24 = getelementptr inbounds i32, i32* %kmpNext, i64 %idxprom23
  %6 = load i32, i32* %arrayidx24, align 4, !tbaa !2
  br label %for.inc

for.inc:                                          ; preds = %while.end, %if.then20
  %q.3 = phi i32 [ %6, %if.then20 ], [ %spec.select, %while.end ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 32411
  br i1 %exitcond, label %for.end, label %while.cond.preheader

for.end:                                          ; preds = %for.inc
  ret i32 0
}

attributes #0 = { nofree noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!4, !4, i64 0}
